{"title":"kuangbin 题单","date":"2020-10-07T09:10:05.000Z","date_formatted":{"ll":"Oct 7, 2020","L":"10/07/2020","MM-DD":"10-07"},"link":"wu5oin","comments":true,"tags":["算法"],"categories":["备战蓝桥杯","数据结构与算法"],"updated":"2021-02-03T04:20:59.729Z","content":"<blockquote>\n<p><a href=\"https://vjudge.net/article/752\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/article/752</a></p>\n</blockquote>\n<h1 id=\"简单搜索\">简单搜索<a title=\"#简单搜索\" href=\"#简单搜索\"></a></h1>\n<h2 id=\"poj-3984-迷宫问题\">POJ 3984 迷宫问题<a title=\"#poj-3984-迷宫问题\" href=\"#poj-3984-迷宫问题\"></a></h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> maze[<span class=\"number\">6</span>][<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> used[<span class=\"number\">6</span>][<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P; <span class=\"comment\">// 节点坐标</span></span><br><span class=\"line\">P pre[<span class=\"number\">6</span>][<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;, dy[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;P&gt; v; <span class=\"comment\">//save path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; q;</span><br><span class=\"line\">    q.push(P(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.size())&#123;</span><br><span class=\"line\">        P p=q.front(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=p.first, y=p.second;</span><br><span class=\"line\">        used[x][y]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==<span class=\"number\">4</span>&amp;&amp;y==<span class=\"number\">4</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx=x+dx[i],ny=y+dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;<span class=\"number\">5</span>&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;<span class=\"number\">5</span>&amp;&amp;!used[nx][ny]&amp;&amp;maze[nx][ny]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                pre[nx][ny]=P(x,y);</span><br><span class=\"line\">                q.push(P(nx,ny));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;maze[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\"></span><br><span class=\"line\">    P p=pre[<span class=\"number\">4</span>][<span class=\"number\">4</span>];</span><br><span class=\"line\">    v.push_back(P(<span class=\"number\">4</span>,<span class=\"number\">4</span>));</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        v.push_back(p);</span><br><span class=\"line\">        p=pre[p.first][p.second];</span><br><span class=\"line\">    &#125;<span class=\"keyword\">while</span>(p.first!=<span class=\"number\">0</span>||p.second!=<span class=\"number\">0</span>);</span><br><span class=\"line\">    v.push_back(P(<span class=\"number\">0</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    reverse(v.begin(),v.end());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v.size();i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;(&quot;</span>&lt;&lt;v[i].first&lt;&lt;<span class=\"string\">&quot;, &quot;</span>&lt;&lt;v[i].second&lt;&lt;<span class=\"string\">&quot;)&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"poj-2251-dungeon-master\">POJ 2251 Dungeon Master<a title=\"#poj-2251-dungeon-master\" href=\"#poj-2251-dungeon-master\"></a></h2>\n<p>找不到为什么一直 tle 的原因</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">32</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l,r,c;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx,sy,sz,gx,gy,gz;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> dilao[maxn][maxn][maxn];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y,z,steps;</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z,<span class=\"keyword\">int</span> s):x(x),y(y),z(z),steps(s)&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">6</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,dy[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;,dz[<span class=\"number\">6</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;node&gt; que;</span><br><span class=\"line\">    que.push(node(sx,sy,sz,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(que.size())&#123;</span><br><span class=\"line\">        node n=que.front(); que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=n.x,y=n.y,z=n.z,steps=n.steps;</span><br><span class=\"line\">        dilao[x][y][z]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x==gx&amp;&amp;y==gy&amp;&amp;z==gz)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> steps;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx=x+dx[i],ny=y+dy[i],nz=z+dz[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;l&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;r&amp;&amp;nz&gt;=<span class=\"number\">0</span>&amp;&amp;nz&lt;c&amp;&amp;</span><br><span class=\"line\">               (dilao[nx][ny][nz]==<span class=\"string\">&#x27;.&#x27;</span>||dilao[nx][ny][nz]==<span class=\"string\">&#x27;E&#x27;</span>))</span><br><span class=\"line\">                que.push(node(nx,ny,nz,steps+<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ios::sync_with_stdio(<span class=\"literal\">false</span>),<span class=\"built_in\">cin</span>.tie(<span class=\"number\">0</span>),<span class=\"built_in\">cout</span>.tie(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;l&gt;&gt;r&gt;&gt;c)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l==<span class=\"number\">0</span>&amp;r==<span class=\"number\">0</span>&amp;&amp;c==<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        getchar();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;r;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;c;k++)&#123;</span><br><span class=\"line\">                    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;dilao[i][j][k]);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dilao[i][j][k]==<span class=\"string\">&#x27;S&#x27;</span>)</span><br><span class=\"line\">                        sx=i,sy=j,sz=k;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(dilao[i][j][k]==<span class=\"string\">&#x27;E&#x27;</span>)</span><br><span class=\"line\">                        gx=i,gy=j,gz=k;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                getchar();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            getchar();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=bfs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;Escaped in &quot;</span>&lt;&lt;res&lt;&lt;<span class=\"string\">&quot; minute(s).&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;Trapped!&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hdu-1241-oil-deposits\">HDU 1241 Oil Deposits<a title=\"#hdu-1241-oil-deposits\" href=\"#hdu-1241-oil-deposits\"></a></h2>\n<p>多次 bfs<br>\n注意是 8 个方向</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example program</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt; que;</span><br><span class=\"line\">    que.push(P(x,y));</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(que.size())&#123;</span><br><span class=\"line\">        P p=que.front();que.pop();</span><br><span class=\"line\">        maze[p.first][p.second]=<span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dx=<span class=\"number\">-1</span>;dx&lt;=<span class=\"number\">1</span>;dx++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dy=<span class=\"number\">-1</span>;dy&lt;=<span class=\"number\">1</span>;dy++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx=p.first+dx,ny=p.second+dy;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;m&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;n&amp;&amp;maze[nx][ny]==<span class=\"string\">&#x27;@&#x27;</span>)&#123;</span><br><span class=\"line\">                    que.push(P(nx,ny));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n&amp;&amp;m&amp;&amp;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span>&gt;&gt;maze[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(maze[i][j]==<span class=\"string\">&#x27;@&#x27;</span>)&#123;</span><br><span class=\"line\">                    bfs(i,j);</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1602075878479-4f718558-7420-4d5e-ac7f-7400c0672fdb.png#align=left&amp;display=inline&amp;height=98&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=196&amp;originWidth=740&amp;size=16589&amp;status=done&amp;style=none&amp;width=370\" alt=\"image.png\"><br>\n内存超出限制了, 改用 dfs 试试</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example program</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    maze[x][y]=<span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dx=<span class=\"number\">-1</span>;dx&lt;=<span class=\"number\">1</span>;dx++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dy=<span class=\"number\">-1</span>;dy&lt;=<span class=\"number\">1</span>;dy++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx=x+dx,ny=y+dy;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;m&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;n&amp;&amp;maze[nx][ny]==<span class=\"string\">&#x27;@&#x27;</span>)</span><br><span class=\"line\">                dfs(nx,ny);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;m&gt;&gt;n&amp;&amp;m&amp;&amp;n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span>&gt;&gt;maze[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(maze[i][j]==<span class=\"string\">&#x27;@&#x27;</span>)&#123;</span><br><span class=\"line\">                    dfs(i,j);</span><br><span class=\"line\">                    ans++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ac 了, 也就只有这种简单的题可以抚慰一下我了</p>\n<blockquote>\n<p>虽然说配张表情包更应景, 但是我没有表情包</p>\n</blockquote>\n<h2 id=\"poj-3278-catch-that-cow\">POJ 3278 Catch That Cow<a title=\"#poj-3278-catch-that-cow\" href=\"#poj-3278-catch-that-cow\"></a></h2>\n<p>这应该是一道搜索题<br>\n**BFS 找到的一定是最短路 **细品</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Example program</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k; <span class=\"comment\">// begin end</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[maxn]; <span class=\"comment\">// n 点到其他点的距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dis,INF,<span class=\"keyword\">sizeof</span>(dis));</span><br><span class=\"line\">    dis[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.size())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=q.front(); q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> next[<span class=\"number\">3</span>];</span><br><span class=\"line\">        next[<span class=\"number\">0</span>]=t+<span class=\"number\">1</span>;</span><br><span class=\"line\">        next[<span class=\"number\">1</span>]=t<span class=\"number\">-1</span>;</span><br><span class=\"line\">        next[<span class=\"number\">2</span>]=<span class=\"number\">2</span>*t;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(next[i]&gt;=<span class=\"number\">0</span>&amp;&amp;next[i]&lt;maxn)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> d= dis[next[i]]; <span class=\"comment\">// 到这些点的距离</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(d&gt;dis[t]+<span class=\"number\">1</span>)&#123; <span class=\"comment\">// 大于一次操作的距离, 证明是第一次到这些点或者有优的方法到达该点</span></span><br><span class=\"line\">                    dis[next[i]]=dis[t]+<span class=\"number\">1</span>; <span class=\"comment\">// 更新到这些点的位置的操作次数 是操作数+1</span></span><br><span class=\"line\">                    q.push(next[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&gt;k)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;n-k&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    bfs();</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dis[k]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"**poj-3279-fliptile\">**POJ 3279 Fliptile<a title=\"#**poj-3279-fliptile\" href=\"#**poj-3279-fliptile\"></a></h2>\n<p>给定一个 N*M 格子盘, 翻转格子, 使其全部变成 0 , 翻转一个格子会使周围的格子也翻转. 输出每个位置的格子需要翻转的次数. 如果没有办法全部变成 0 , 输出 “IMPOSSIBLE”<br>\n读懂了, 不会做<br>\n看了看别人的思路:<br>\n一个格子翻转两次是没有意义的, 因此每个格子最多翻转 1 次, 最后要么 1 , 要么 0<br>\n从第一行开始考虑, 第一行的格子决定是否翻转之后, 下面每一个格子是否被翻转的状态都固定下来了.<br>\n也就是<strong>第 (i+1,j) 的格子是否需要翻转是由第 (i,j) 的格子的状态决定的,</strong> 假如 (i,j)=0, 那么 (i+1,j) 就不能翻转, 翻转次数就为 0 ; 假如 (i,j) =1 , 那么 (i+1,j) 就必须翻转, 翻转次数也就是 1<br>\n假如操作完每一行, 但是最后一行缺不是全为 0 ,那么说明无论怎样翻转都无法得到.<br>\n首先我们要枚举第一行的所有状态</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 0x3f3f3f3f</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> map1[<span class=\"number\">35</span>][<span class=\"number\">35</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> flip[<span class=\"number\">35</span>][<span class=\"number\">35</span>]; <span class=\"comment\">//记录翻转</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> opt[<span class=\"number\">35</span>][<span class=\"number\">35</span>]; <span class=\"comment\">// 记录最优解</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> Next[<span class=\"number\">5</span>][<span class=\"number\">2</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回[x][y]被翻转后是否为黑色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isBlack</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fliptime = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">5</span>; ++k)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx = x + Next[k][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ny = y + Next[k][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx &gt; <span class=\"number\">0</span> &amp;&amp; ny &gt; <span class=\"number\">0</span> &amp;&amp; nx &lt;= m &amp;&amp; ny &lt;= n)&#123;</span><br><span class=\"line\">            fliptime += flip[nx][ny];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (map1[x][y] + fliptime) % <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从第二行开始计算需要反转的次数，如果成功则返回次数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;  <span class=\"comment\">// 反转次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">            <span class=\"comment\">// map1[i-1][j]为黑色则需要反转</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isBlack(i<span class=\"number\">-1</span>, j))&#123;</span><br><span class=\"line\">                flip[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                ret ++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断最后一行是否全为白色</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isBlack(m, j))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flip[<span class=\"number\">1</span>][j]) ret ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; m &gt;&gt; n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = INF;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(map1, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> map1);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">                <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;map1[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1</span> &lt;&lt; n; ++i)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(flip, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> flip);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">                flip[<span class=\"number\">1</span>][j] =  i &gt;&gt; (j<span class=\"number\">-1</span>) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = dfs();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp &lt; ans)</span><br><span class=\"line\">                    <span class=\"built_in\">memcpy</span>(opt, flip, <span class=\"keyword\">sizeof</span>(flip));</span><br><span class=\"line\">                ans = min(temp, ans);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans == INF) <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;IMPOSSIBLE&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, opt[i][j],<span class=\"string\">&quot; \\n&quot;</span>[j == n]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"*poj-1321-棋盘问题\">*POJ 1321 棋盘问题<a title=\"#*poj-1321-棋盘问题\" href=\"#*poj-1321-棋盘问题\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/POJ-1321\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/POJ-1321</a></p>\n</blockquote>\n<p>上面那道题花了我很多时间, 而且还没做出来, 结果发现那道题是最后推荐做的, 意思是那道题难度不低, 之前没有发现, 一直耗在上面, 现在来尝试一下这道 “简单” 一点的题<br>\n题意: n*n 的棋盘, 摆放 k 个棋子, 没对棋子不能出现在同一列或者同一行<br>\n不会, 解决这道题之前我先去看看八皇后问题<br>\n好, 看完 八皇后 问题了, 再来看这道题就再简单不过了, 诶 , 不对, 这道题的皇后数不固定, 每一行不一定必须有一个皇后.试着在 n 行生成中 k 行的排列. 枚举以求解<br>\n不过这种解法似乎复杂化了这道题, 我们只需要在递归查找的时候扩大查找范围, 不要局限于一行.<br>\n不过还是没能做出来<br>\n别人都是用深度优先遍历做的, 对于一个节点(棋子), 有两种选择: 左, 不放. 右, 放.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"><span class=\"keyword\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N];   <span class=\"comment\">// 使用st[N]数组表示哪些列已经被占用了</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s == k) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  <span class=\"comment\">// 如果当前棋子数已经满足条件k，说明方案合法，返回1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == n) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  <span class=\"comment\">// return -1 // 如果已经走到了第n行，但是没有凑够棋子，表明当前方案不合法，返回0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 表示这一行可以不放棋子，直接下一行</span></span><br><span class=\"line\">    <span class=\"comment\">// 深度优先遍历向左走</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = dfs(u + <span class=\"number\">1</span>, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 枚举以下，当前这行中，哪些列可以放棋子</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!st[i] &amp;&amp; g[u][i] == <span class=\"string\">&#x27;#&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 将当前这列标记一下，表示它已经被用过了</span></span><br><span class=\"line\">            st[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 深度优先遍历 向右走</span></span><br><span class=\"line\">            res += dfs(u + <span class=\"number\">1</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">            st[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span> &gt;&gt; n &gt;&gt; k, n != <span class=\"number\">-1</span> || k != <span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++) <span class=\"built_in\">cin</span> &gt;&gt; g[i];</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// 从第0行开始看，有0个棋子数量的方案数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>些许抽象慢慢理解</p>\n<h2 id=\"poj-3414-pots\">POJ 3414 Pots<a title=\"#poj-3414-pots\" href=\"#poj-3414-pots\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/POJ-3414\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/POJ-3414</a></p>\n</blockquote>\n<p><strong>题意:</strong><br>\n给定两个锅 1,2, 容量分别为 A B, 有以下操作</p>\n<ul>\n<li>FILL(1),FILL(2) 使 锅 1 或者 锅 2 装满水</li>\n<li>DROP(1),DROP(2) 使 锅 1 或者 锅 2 为空</li>\n<li>POUR(1,2) 把 锅 1 中的水灌入 锅 2. 结束操作之后, 要么 锅 2 满了, 要么 锅 1 为空</li>\n</ul>\n<p>找到一个使其中一个锅达到 容量 C 的最小路径<br>\n<strong>我的第一思路</strong><br>\n最短路径问题, 采取 bfs<br>\n节点的状态就是 a,b 的余量, 从队列中取出节点之后有 6 种走法, 对于 6 种操作<br>\n由于这道题实在是没什么难度, 写起来还挺麻烦, 我就直接 pass 了<br>\n注意一个技巧, 保存对每个节点的操作使用一个 op 变量就行了, 然后额外使用一个字符串数组来对应.<br>\n最后 print 时使用一个 栈比 vector. reverse 方便</p>\n<h2 id=\"poj-3126-prime-path\">POJ 3126 Prime Path<a title=\"#poj-3126-prime-path\" href=\"#poj-3126-prime-path\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/POJ-3126\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/POJ-3126</a></p>\n</blockquote>\n<p>这道题要用到数学的素数知识, 就先去看一看素数的知识<br>\n<strong>题意</strong><br>\n给定两个四位素数 a  b，把 a 转换成 b 转换的过程要求每次转换出来的数都是一个 四位素数，而且当前这步的变换所得的素数与前一步得到的素数   只能有一个位不同，而且每步得到的素数都不能重复。<br>\n数据范围在 1-10000 之内, 我们可以直接先把该范围内的素数枚举出来</p>\n<h2 id=\"uva-11624-fire!\">UVA 11624 Fire!<a title=\"#uva-11624-fire!\" href=\"#uva-11624-fire!\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/UVA-11624\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/UVA-11624</a></p>\n</blockquote>\n<p>最快出去， 使用 bfs<br>\n火是朝 4 个方向蔓延， 但是 J 每次只能走一步<br>\n使用两个队列， 一个用于火， 一个用于 J<br>\n每次火先走， 标记访问过的地方， 之后 J 走， 走火和他自己没有到达过的地方。 可以只用一个标记数组标记<br>\n我感觉我的答案没错, 但是 WA 了<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1602482507465-242e8713-3a5c-47d5-b0eb-d979abb743a0.png#align=left&amp;display=inline&amp;height=170&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=340&amp;originWidth=1169&amp;size=56939&amp;status=done&amp;style=none&amp;width=584.5\" alt=\"image.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, step;</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> s) :x(x), y(y), step(s)&#123;&#125;;</span><br><span class=\"line\">    node()&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span> &#125;, dy[<span class=\"number\">4</span>] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, c, r;</span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> jx, jy, fx[maxn], fy[maxn], num;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;node&gt;q2;</span><br><span class=\"line\">    <span class=\"comment\">// 每个火源推进去</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;num; i++)&#123;</span><br><span class=\"line\">        q2.push(node(fx[i], fy[i], <span class=\"number\">0</span>));</span><br><span class=\"line\">        vis[fx[i]][fy[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;node&gt; q1;</span><br><span class=\"line\">    q1.push(node(jx, jy, <span class=\"number\">0</span>));</span><br><span class=\"line\">    vis[jx][jy]=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q1.size())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;q2.size(); i++)&#123;</span><br><span class=\"line\">            node n = q2.front(); q2.pop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = n.x, y = n.y, step = n.step;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k&lt;<span class=\"number\">4</span>; k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nx = dx[k] + x, ny = dy[k] + y;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx&lt;r&amp;&amp;ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny&lt;c&amp;&amp;vis[nx][ny] == <span class=\"literal\">false</span> &amp;&amp; maze[nx][ny] != <span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">                    q2.push(node(nx, ny, step + <span class=\"number\">1</span>));</span><br><span class=\"line\">                    vis[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// J 走一步</span></span><br><span class=\"line\">        node n = q1.front(); q1.pop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = n.x, y = n.y, step = n.step;</span><br><span class=\"line\">        <span class=\"comment\">// retrun</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span> || x == r - <span class=\"number\">1</span> || y == <span class=\"number\">0</span> || y == c - <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> step+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;<span class=\"number\">4</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx = dx[i] + x, ny = dy[i] + y;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nx &gt;= <span class=\"number\">0</span> &amp;&amp; nx &lt; r &amp;&amp; ny &gt;= <span class=\"number\">0</span> &amp;&amp; ny &lt; c &amp;&amp; vis[nx][ny] == <span class=\"literal\">false</span> &amp;&amp; maze[nx][ny] != <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">                vis[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                q1.push(node(nx, ny, step + <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"literal\">false</span>, <span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">        num=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt;r; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j&lt;c; j++)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cin</span> &gt;&gt; maze[i][j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maze[i][j] == <span class=\"string\">&#x27;J&#x27;</span>)&#123;</span><br><span class=\"line\">                    jx = i; jy = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (maze[i][j] == <span class=\"string\">&#x27;F&#x27;</span>)&#123;</span><br><span class=\"line\">                    fx[num] = i; fy[num]=j;</span><br><span class=\"line\">                    num++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = bfs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (res == <span class=\"number\">-1</span>)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;IMPOSSIBLE&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; res&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"hdu-2612-find-a-way\">HDU 2612 Find a way<a title=\"#hdu-2612-find-a-way\" href=\"#hdu-2612-find-a-way\"></a></h2>\n<blockquote>\n<p><a href=\"https://cn.vjudge.net/problem/HDU-2612\" target=\"_blank\" rel=\"external nofollow noopener\">https://cn.vjudge.net/problem/HDU-2612</a></p>\n</blockquote>\n<p>该题与上一道题不能说不一样<br>\n路径最短 bfs<br>\n两个人同时 bfs , 假如 M 到达一个 KFC 并且 J 已经访问过了, 那么这个店就是他们彼此到达时间最短的店. 这个时候输出较小的 M 的时间<br>\n两个标记数组记录到达该位置的时间/步数</p>\n<h2 id=\"poj-1426-find-the-multiple\">POJ 1426 Find The Multiple<a title=\"#poj-1426-find-the-multiple\" href=\"#poj-1426-find-the-multiple\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/POJ-1426\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/POJ-1426</a></p>\n</blockquote>\n<p>给定一个数 n , 输出一个能整除该数的一个数, 要求这个数只能包含 01</p>\n<ol>\n<li>暴力枚举: 枚举从 2-&gt;无穷, 直到找到一个数, 他们相乘的倍数只包含 01 (效率极低)</li>\n<li>bfs 枚举所有 01 构成的数, 直到该数为 n 的倍数</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span>  <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\">ll n;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> flag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(ll k, <span class=\"keyword\">int</span> x)</span> <span class=\"comment\">//  k 为当前数, x为当前数的长度</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (x &gt; <span class=\"number\">19</span> || flag == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k % n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; k &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdfs(k * <span class=\"number\">10</span>, x + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tdfs(k * <span class=\"number\">10</span> + <span class=\"number\">1</span>, x + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class=\"line\">\t\tflag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tdfs(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"fzu-2150-fire-game\">FZU 2150 Fire Game<a title=\"#fzu-2150-fire-game\" href=\"#fzu-2150-fire-game\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/FZU-2150\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/FZU-2150</a></p>\n</blockquote>\n<p>选择 2 个起点（#）代表着火点，每个着火点会向上下左右四个方向蔓延，一秒蔓延一次，问最少多少秒所有的#都能被点燃。</p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/lvkhi9/\">洛谷【搜索】暴力专项训练</a></li><li><a href=\"https://mvbbb.github.io/ehshi7/\">八皇后问题</a></li><li><a href=\"https://mvbbb.github.io/nftmte/\">位运算</a></li><li><a href=\"https://mvbbb.github.io/wdmukq/\">挑战程序设计竞赛-习题</a></li><li><a href=\"https://lailin.xyz/post/defer.html\">Go数据结构与算法05-栈下: 深入理解 defer</a></li></ul></div>","prev":{"title":"位运算","link":"nftmte"},"next":{"title":"刷题!刷题!","link":"taxvu3"},"plink":"https://mvbbb.github.io/wu5oin/","toc":[{"id":"简单搜索","title":"简单搜索","index":"1","children":[{"id":"poj-3984-迷宫问题","title":"POJ 3984 迷宫问题","index":"1.1"},{"id":"poj-2251-dungeon-master","title":"POJ 2251 Dungeon Master","index":"1.2"},{"id":"hdu-1241-oil-deposits","title":"HDU 1241 Oil Deposits","index":"1.3"},{"id":"poj-3278-catch-that-cow","title":"POJ 3278 Catch That Cow","index":"1.4"},{"id":"**poj-3279-fliptile","title":"**POJ 3279 Fliptile","index":"1.5"},{"id":"*poj-1321-棋盘问题","title":"*POJ 1321 棋盘问题","index":"1.6"},{"id":"poj-3414-pots","title":"POJ 3414 Pots","index":"1.7"},{"id":"poj-3126-prime-path","title":"POJ 3126 Prime Path","index":"1.8"},{"id":"uva-11624-fire!","title":"UVA 11624 Fire!","index":"1.9"},{"id":"hdu-2612-find-a-way","title":"HDU 2612 Find a way","index":"1.10"},{"id":"poj-1426-find-the-multiple","title":"POJ 1426 Find The Multiple","index":"1.11"},{"id":"fzu-2150-fire-game","title":"FZU 2150 Fire Game","index":"1.12"}]},{"id":"推荐文章","title":"推荐文章","index":"2"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/wu5oin/\" title=\"kuangbin 题单\">https://mvbbb.github.io/wu5oin/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}