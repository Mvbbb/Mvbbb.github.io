{"title":"排序算法","date":"2020-08-04T16:03:06.000Z","date_formatted":{"ll":"Aug 4, 2020","L":"08/04/2020","MM-DD":"08-04"},"link":"iixrxk","comments":true,"tags":["分治","哈希","堆","排序","递归"],"categories":["数据结构与算法","算法"],"updated":"2021-02-03T04:21:00.877Z","content":"<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\" target=\"_blank\" rel=\"external nofollow noopener\">排序算法</a><br>\n<a href=\"https://visualgo.net/en/sorting\" target=\"_blank\" rel=\"external nofollow noopener\">可视化程序</a><br>\n<a href=\"https://blog.csdn.net/u012562943/article/details/100136531\" target=\"_blank\" rel=\"external nofollow noopener\">算法学习总结（2）——温故十大经典排序算法</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIZE 10;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*交换元素的函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> index1,<span class=\"keyword\">int</span> index2)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*冒泡排序*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BulleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*简单选择排序*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SelectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*直接插入排序*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*归并排序*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Recursion</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> begin,<span class=\"keyword\">int</span> end,<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">/*快速排序*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> length)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">QuickSortRe</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*初始化一个数组*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size=SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[size];</span><br><span class=\"line\">    srand((<span class=\"keyword\">unsigned</span>)time(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=size;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = rand() % <span class=\"number\">51</span> + <span class=\"number\">13</span>;    <span class=\"comment\">//产生10~63的随机数</span></span><br><span class=\"line\">        arr[i]=a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//BulleSort(arr,size);</span></span><br><span class=\"line\">    <span class=\"comment\">//SelectionSort(arr,size);</span></span><br><span class=\"line\">    <span class=\"comment\">//InsertionSort(arr,size);</span></span><br><span class=\"line\">    <span class=\"comment\">//MergeSort(arr,size);</span></span><br><span class=\"line\">    QuickSort(arr,size);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> index1,<span class=\"keyword\">int</span> index2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp=arr[index1];</span><br><span class=\"line\">    arr[index1]=arr[index2];</span><br><span class=\"line\">    arr[index2]=temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单选择排序\">简单选择排序<a title=\"#简单选择排序\" href=\"#简单选择排序\"></a></h1>\n<p>对比数组中未排序元素大小找到最值<br>\n然后放到数组中已排序列的末尾</p>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SelectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=size;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_index=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;j!=size;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[min_index]&gt;arr[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min_index=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i!=min_index)</span><br><span class=\"line\">\t   swap(arr,i,min_index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"冒泡排序\">冒泡排序<a title=\"#冒泡排序\" href=\"#冒泡排序\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BulleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*冒泡排序*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=size-i<span class=\"number\">-1</span>;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j+<span class=\"number\">1</span>]&lt;arr[j])<span class=\"comment\">//升序排列</span></span><br><span class=\"line\">                swap(arr,j,j+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"直接插入排序\">直接插入排序<a title=\"#直接插入排序\" href=\"#直接插入排序\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> sorting=<span class=\"number\">1</span>;sorting&lt;size; sorting++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>,d;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[sorting]; <span class=\"comment\">//保存现在正在排序的值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (d=sorting<span class=\"number\">-1</span>; d&gt;=<span class=\"number\">0</span>; d--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[d] &gt; temp) <span class=\"comment\">/*需要向后移动? */</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                arr[d+<span class=\"number\">1</span>]=arr[d];</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>  <span class=\"comment\">/*d 之前的元素都小于该值*/</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag==<span class=\"number\">1</span>)  <span class=\"comment\">/*需要插入? */</span></span><br><span class=\"line\">            arr[d+<span class=\"number\">1</span>]=temp;   <span class=\"comment\">//值得注意的是: 原来d+1位置的元素已经向后移动了,直接插入不会影响</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*另外一个版本*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">InsertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> current;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=size<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">            current=arr[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> preIndex=i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(preIndex&gt;=<span class=\"number\">0</span>&amp;&amp;current&lt;arr[preIndex])&#123;</span><br><span class=\"line\">                arr[preIndex+<span class=\"number\">1</span>]=arr[preIndex];</span><br><span class=\"line\">                preIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>]=current;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"归并排序\">归并排序<a title=\"#归并排序\" href=\"#归并排序\"></a></h1>\n<p>分而治之,两路比较,之后合并,repeat<br>\n合并时要比较大小之后插入</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right=<span class=\"number\">0</span>,left=size<span class=\"number\">-1</span>;</span><br><span class=\"line\">    Recursion(arr,right,left,size);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*排序的工作其实最后都交给了Merge()*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Recursion</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> begin,<span class=\"keyword\">int</span> end,<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*放回条件是只有1个元素,这个时候begin=end*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(begin&lt;end)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(end+begin)/<span class=\"number\">2</span>;<span class=\"comment\">//中间对半分</span></span><br><span class=\"line\">        <span class=\"comment\">/*左边排序*/</span></span><br><span class=\"line\">        Recursion(arr,begin,mid,size);</span><br><span class=\"line\">        <span class=\"comment\">/*右边排序*/</span></span><br><span class=\"line\">        Recursion(arr,mid+<span class=\"number\">1</span>,end,size);</span><br><span class=\"line\">        <span class=\"comment\">/*两边两边分别排序之后合并到一个数组*/</span></span><br><span class=\"line\">        Merge(arr,begin,mid,end,size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> left,<span class=\"keyword\">int</span> mid,<span class=\"keyword\">int</span> right,<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*需要一个数组来保存合并两个的结果*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp[size];</span><br><span class=\"line\">    <span class=\"comment\">/*需要探针来指向左右和目标的元素*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> p1=left,p2=mid+<span class=\"number\">1</span>,k=left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1&lt;=mid&amp;&amp;p2&lt;=right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[p1]&lt;=arr[p2])</span><br><span class=\"line\">            temp[k++]=arr[p1++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            temp[k++]=arr[p2++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*左右数组的大小可能不一致,因此还需要将没有搬的数字移动到结果数组*/</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1&lt;=mid)  temp[k++]=arr[p1++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p2&lt;=right)    temp[k++]=arr[p2++];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*将结果数组拷贝到传入的数组*/</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=left;i&lt;=right;i++)</span><br><span class=\"line\">        arr[i]=temp[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"快速排序\">快速排序<a title=\"#快速排序\" href=\"#快速排序\"></a></h1>\n<p>与归并排序的算法有一定的相似之处, 适合于数据规模较大的排序</p>\n<p>从待排序数组里面随便选一个做主元 (pivot), 分成两大块, 小于主元的放左边, 大于主元的放右边.</p>\n<p>使用左右探针记录比比主元小的数和比主元大的数, 交换他们的位置</p>\n<p>对于一个主元一次性的放到了正确位置上, 以后再也不会移动</p>\n<p>递归地处理左边右边</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QuickSortRe(arr,<span class=\"number\">0</span>,length<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">QuickSortRe</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&gt;=R)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;<span class=\"comment\">/*只有一个元素*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> left=L,right=R;<span class=\"comment\">/*用于遍历元素的探针*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot =<span class=\"built_in\">array</span>[left];<span class=\"comment\">/*将中心轴设为左边第一个元素*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*嵌套while循环移动,内层的while实现探针移动*/</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[right]&gt;=pivot&amp;&amp;left&lt;right)<span class=\"comment\">/*右边的数大于等于中心轴的话,继续先中间推进探针*/</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[left]&lt;=pivot&amp;&amp;left&lt;right)<span class=\"comment\">/*左边的数小于等于中心轴的话,继续向中间推进探针*/</span></span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*现在的左探针指向的数大于中心轴的数,右探针的数小于中心轴的数.</span></span><br><span class=\"line\"><span class=\"comment\">        *交换这两个指向的数,实现左边放较小的数,右边放较大的数*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&lt;right)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=<span class=\"built_in\">array</span>[left];</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[left]=<span class=\"built_in\">array</span>[right];</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[right]=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*只进行了一次对称交换,因此还需要循环,将全部较小的数放到中心轴右边,</span></span><br><span class=\"line\"><span class=\"comment\">        * 值得注意的是,在上面两个并列的while循环中,左探针左边的都小于中心轴,右边的都大于中心轴,</span></span><br><span class=\"line\"><span class=\"comment\">\t* 因此下一次while循环只在两个探针中间进行*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/*经过上面的循环,现在左右探针应该指向的是同一个位置*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*基准数归位: 意思是将中心轴的数放在左右两个子序列之间, 原来该位置的数放到原来中心轴的位置*/</span></span><br><span class=\"line\">    <span class=\"built_in\">array</span>[L]=<span class=\"built_in\">array</span>[left];</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[left]=pivot;<span class=\"comment\">/*将中心轴数字放在重合的位置*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*得到了两个子序列*/</span></span><br><span class=\"line\">    QuickSortRe(<span class=\"built_in\">array</span>,L,left<span class=\"number\">-1</span>);<span class=\"comment\">/*处理基准数左边*/</span></span><br><span class=\"line\">    QuickSortRe(<span class=\"built_in\">array</span>,left+<span class=\"number\">1</span>,R);<span class=\"comment\">/*处理基准数右边*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意: 在进行基准数归位时, <code>right</code> 和 <code>left</code> 重合的位置的数肯定要比基准数小, 因为在内层循环中, 我们是先移动 <code>right</code>, 之后再移动 <code>left</code>, 肯定是 <code>left</code> “追上” <code>right</code> 导致的外层循环停止, 而在内层循环里面 <code>right</code> 停止之后指向的是刚好小于中心轴的数</p>\n<p>以 [1,5,2,9,4,3]为例</p>\n<p><img src=\"https://mvbbb-blog-1301484447.cos.ap-chengdu.myqcloud.com/typora/20200331192337.png#align=left&amp;display=inline&amp;height=2002&amp;margin=%5Bobject%20Object%5D&amp;originHeight=2002&amp;originWidth=909&amp;status=done&amp;style=none&amp;width=909\" alt=\"\" class=\"φcx\"></p>\n<p>不带注释的版本</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[],<span class=\"keyword\">int</span> length)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    QuickSortRe(arr,<span class=\"number\">0</span>,length<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>  <span class=\"title\">QuickSortRe</span><span class=\"params\">(<span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[],<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L&gt;=R)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left=L,right=R;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pivot =<span class=\"built_in\">array</span>[left];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;right)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[right]&gt;=pivot&amp;&amp;left&lt;right)</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"built_in\">array</span>[left]&lt;=pivot&amp;&amp;left&lt;right)</span><br><span class=\"line\">            left++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&lt;right)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=<span class=\"built_in\">array</span>[left];</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[left]=<span class=\"built_in\">array</span>[right];</span><br><span class=\"line\">            <span class=\"built_in\">array</span>[right]=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[L]=<span class=\"built_in\">array</span>[left];</span><br><span class=\"line\">    <span class=\"built_in\">array</span>[left]=pivot;</span><br><span class=\"line\">    QuickSortRe(<span class=\"built_in\">array</span>,L,left<span class=\"number\">-1</span>);</span><br><span class=\"line\">    QuickSortRe(<span class=\"built_in\">array</span>,left+<span class=\"number\">1</span>,R);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"随机快速排序\">随机快速排序<a title=\"#随机快速排序\" href=\"#随机快速排序\"></a></h1>\n<h1 id=\"计数排序\">计数排序<a title=\"#计数排序\" href=\"#计数排序\"></a></h1>\n<h1 id=\"基数排序\"><a href=\"https://cuijiahua.com/blog/2018/01/algorithm_8.html\">基数排序</a><a title=\"#基数排序\" href=\"#基数排序\"></a></h1>\n<p>参见算法动画 <a href=\"https://visualgo.net/en/sorting\" target=\"_blank\" rel=\"external nofollow noopener\">RADIX</a></p>\n<p>桶内采用队列结构存储<br>\n基数排序分两种</p>\n<ol>\n<li>链式存储. 从桶里面取出元素并排好的过程就是将上一个桶的 front.next 指向下一位非空桶的 rear</li>\n<li>普通的存储结构. 队列或者数组, 取出元素的过程就是使用另外一个辅助数组, 吐到辅助数组里面去</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求出数组中最大数的位数的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MaxBit</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; input)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数组最大值</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> max_data = input[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; input.size(); i++) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (input[i] &gt; max_data) &#123;</span><br><span class=\"line\">        \tmax_data = input[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数组最大值的位数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> bits_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (max_data) &#123;</span><br><span class=\"line\">    \tbits_num++;</span><br><span class=\"line\">    \tmax_data /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bits_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 取数xxx上的第d位数字</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">digit</span><span class=\"params\">(<span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"built_in\">pow</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (--d &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">pow</span> *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> num / <span class=\"built_in\">pow</span> % <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 基数排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">RadixSort</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; input, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 临时数组，用来存放排序过程中的数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">bucket</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 位记数器，从第0个元素到第9个元素依次用来记录当前比较位是0的有多少个...是9的有多少个数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">count</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">// 从低位往高位循环</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt;= MaxBit(input); d++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计数器清0</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        \tcount[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 统计各个桶中的个数</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        \tcount[digit(input[i], d)]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 比如某次经过上面统计后结果为：[0, 2, 3, 3, 0, 0, 0, 0, 0, 0]则经过下面计算后 结果为： [0, 2,</span></span><br><span class=\"line\"><span class=\"comment\">        * 5, 8, 8, 8, 8, 8, 8, 8]但实质上只有如下[0, 2, 5, 8, 0, 0, 0, 0, 0, 0]中</span></span><br><span class=\"line\"><span class=\"comment\">        * 非零数才用到，因为其他位不存在，它们分别表示如下：2表示比较位为1的元素可以存放在索引为1、0的</span></span><br><span class=\"line\"><span class=\"comment\">        * 位置，5表示比较位为2的元素可以存放在4、3、2三个(5-2=3)位置，8表示比较位为3的元素可以存放在</span></span><br><span class=\"line\"><span class=\"comment\">        * 7、6、5三个(8-5=3)位置</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        \tcount[i] += count[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        * 注，这里只能从数组后往前循环，因为排序时还需保持以前的已排序好的顺序，不应该打</span></span><br><span class=\"line\"><span class=\"comment\">        * 乱原来已排好的序，如果从前往后处理，则会把原来在前面会摆到后面去，因为在处理某个</span></span><br><span class=\"line\"><span class=\"comment\">        * 元素的位置时，位记数器是从大到到小（count[digit(arr[i], d)]--）的方式来处</span></span><br><span class=\"line\"><span class=\"comment\">        * 理的，即先存放索引大的元素，再存放索引小的元素，所以需从最后一个元素开始处理。</span></span><br><span class=\"line\"><span class=\"comment\">        * 如有这样的一个序列[212,213,312]，如果按照从第一个元素开始循环的话，经过第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        * 后（个位）排序后，得到这样一个序列[312,212,213]，第一次好像没什么问题，但问题会</span></span><br><span class=\"line\"><span class=\"comment\">        * 从第二轮开始出现，第二轮排序后，会得到[213,212,312]，这样个位为3的元素本应该</span></span><br><span class=\"line\"><span class=\"comment\">        * 放在最后，但经过第二轮后却排在了前面了，所以出现了问题</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">int</span> k = digit(input[i], d);</span><br><span class=\"line\">        \tbucket[count[k] - <span class=\"number\">1</span>] = input[i];</span><br><span class=\"line\">        \tcount[k]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 临时数组复制到 input 中</span></span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        \tinput[i] = bucket[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> arr[] = &#123; <span class=\"number\">50</span>, <span class=\"number\">123</span>, <span class=\"number\">543</span>, <span class=\"number\">187</span>, <span class=\"number\">49</span>, <span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">11</span>, <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">test</span><span class=\"params\">(arr, arr + <span class=\"keyword\">sizeof</span>(arr) / <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]))</span></span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;排序前:&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; test.size(); i++) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span> &lt;&lt; test[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; result = test;</span><br><span class=\"line\">\tresult = RadixSort(result, result.size());</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;排序后:&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">cout</span> &lt;&lt; result[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/305ace38915f24eaca325d2a9d3ba01f.svg#card=math&amp;code=O%28nk%29&amp;height=20&amp;width=45\" alt=\"\"></p>\n<h1 id=\"堆排序\"><a href=\"https://blog.csdn.net/u010452388/article/details/81283998\">堆排序</a><a title=\"#堆排序\" href=\"#堆排序\"></a></h1>\n<p>用数组存储堆</p>\n<h2 id=\"算法思路\">算法思路<a title=\"#算法思路\" href=\"#算法思路\"></a></h2>\n<ol>\n<li>将待排序数组构造为一个大根堆. 大根堆的顶端就是数组最大值</li>\n<li>将顶端的数与末尾的数交换, 此时末尾为最大值, 待排序的数组大小-1</li>\n<li>将剩余的 n-1 个数在构造成大根堆, 再将顶端的数与 n-1 位置的数交换, 循环往复, 得到有序数组</li>\n</ol>\n<h2 id=\"构造初始大根堆的过程\">构造初始大根堆的过程<a title=\"#构造初始大根堆的过程\" href=\"#构造初始大根堆的过程\"></a></h2>\n<p>每次从数组里面 “取” 一个数, 在原有的大根堆的基础上找到合理的位置 “插入”</p>\n<blockquote>\n<p>在这里插入是抽象的, 其实就是调整他在数组中的位置, 通过合理的交换达到插入效果<br>\n当然你也可以这样理解, 本身给定一个数组就确立了一个完全二叉树, 我们只是在层序遍历每一个结点. 刚刚开始的时候 0 号结点自然构成大根堆, 遍历到 1 号结点的位置, 我们就可能需要调整, 来构成大根堆, repeat, 直到遍历完所有二叉树结点</p>\n</blockquote>\n<p>具体的:<br>\n遍历到一个结点时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> while(他的父结点的值是否比他小&amp;&amp;i!&#x3D;0)&#123;</span><br><span class=\"line\">  true: 交换父结点与他的值</span><br><span class=\"line\">  &#x2F;&#x2F;具体在数组中就是交换他们的位置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"&quot;取出&quot;-最大值,-构造新堆\">“取出” 最大值, 构造新堆<a title=\"#&quot;取出&quot;-最大值,-构造新堆\" href=\"#&quot;取出&quot;-最大值,-构造新堆\"></a></h2>\n<p>“取出”: 将最大值移到完全二叉树的末尾, 在数组中也就是末尾位置<br>\n此时 0 号位置是原来数组末尾的值, 我们要调整他的位置, 使大根堆结构合理<br>\n比较他与左右儿子中的最大值, 如果他比儿子的最大值小, 就交换位置<br>\n调整之后, 我们固定现在处于顶部的结点 [把他放到无序数组的末尾]<br>\nrepeat. 结束条件是他的</p>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<p>想要得到升序序列, 需要构造大根堆. 反之构造小根堆<br>\n固定一个最大值之后需要调整二叉树顶结点的位置, 得到一个结构合理的大根堆, repeat</p>\n<h2 id=\"代码\">代码<a title=\"#代码\" href=\"#代码\"></a></h2>\n<p>代码上面各种语言都差不多, 为了方便我是用的 Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">heapsort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span></span>&#123;</span><br><span class=\"line\">        heapInsert(arr);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size=arr.length;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(size&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            swap(arr,<span class=\"number\">0</span>,size-<span class=\"number\">1</span>);</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            heapify(arr,<span class=\"number\">0</span>,size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=index*<span class=\"number\">2</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right=left+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left&lt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> largestIndex=(arr[left]&lt;arr[right]&amp;&amp;right&lt;size)?right:left;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[index]&gt;arr[largestIndex])&#123;</span><br><span class=\"line\">                largestIndex=index;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index==largestIndex)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            swap(arr,largestIndex,index);</span><br><span class=\"line\">            index=largestIndex;</span><br><span class=\"line\">            left=<span class=\"number\">2</span>*index+<span class=\"number\">1</span>;</span><br><span class=\"line\">            right=left+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"comment\">/*还有一种简洁的办法*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=arr[index];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">2</span>*index+<span class=\"number\">1</span>;k&lt;size;k=<span class=\"number\">2</span>*k+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到较大的儿子</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k+<span class=\"number\">1</span>&lt;size&amp;&amp;arr[k]&lt;arr[k+<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                k=<span class=\"number\">2</span>*index+<span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果他比他儿子都要大就break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp&gt;=arr[k])</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"comment\">//他的大儿子向上移动</span></span><br><span class=\"line\">            arr[index]=arr[k];</span><br><span class=\"line\">            <span class=\"comment\">//继续处理该结点, 使用index记录他现在的下标</span></span><br><span class=\"line\">            <span class=\"comment\">//我们之前使用temp保存了他的值, 不用交换儿子与父亲</span></span><br><span class=\"line\">            index=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//插入结点</span></span><br><span class=\"line\">        arr[index]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=arr[i];</span><br><span class=\"line\">        arr[i]=arr[i1];</span><br><span class=\"line\">        arr[i1]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapInsert</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历每一个结点, 看他爸爸与他的值的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentIndex=i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> fatherIndex=(currentIndex-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(arr[currentIndex]&gt;arr[fatherIndex])&#123;</span><br><span class=\"line\">                swap(arr,currentIndex,fatherIndex);</span><br><span class=\"line\">                currentIndex=fatherIndex;</span><br><span class=\"line\">                fatherIndex=(currentIndex-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        heapSort(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序结果:  &quot;</span>+Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/d344075a2c690847a757434e9e7fa128.svg#card=math&amp;code=O%28nlogn%29&amp;height=20&amp;width=67\" alt=\"\"></p>\n<h1 id=\"折半插入排序\">折半插入排序<a title=\"#折半插入排序\" href=\"#折半插入排序\"></a></h1>\n<p>原来的直接插入排序在有序序列里面查找合适的插入位置是使用的顺序遍历, 我们也可以使用类似二分查找的方法找到插入位置</p>\n<h1 id=\"希尔排序\">希尔排序<a title=\"#希尔排序\" href=\"#希尔排序\"></a></h1>\n<p>是插入排序的一种</p>\n<p>以 dk 为间隔, 数组里面 dk 间隔位置上的无序元素进行插入排序<br>\n之后逐渐减小 dk 循环<br>\ndk=1 处理完就结束排序</p>\n<p>逐渐让无序序列趋向有序, 减少插入排序的</p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/zhme42/\">力扣-二叉树</a></li><li><a href=\"https://mvbbb.github.io/gggq6t/\">Leetbook 初级算法</a></li><li><a href=\"http://www.b5mang.com/pt_offer/first_no_repeat.html\">第一个不重复的字符系列</a></li></ul></div>","prev":{"title":"力扣-动态规划","link":"evg4uw"},"next":{"title":"力扣-二叉树","link":"zhme42"},"plink":"https://mvbbb.github.io/iixrxk/","toc":[{"id":"简单选择排序","title":"简单选择排序","index":"1"},{"id":"冒泡排序","title":"冒泡排序","index":"2"},{"id":"直接插入排序","title":"直接插入排序","index":"3"},{"id":"归并排序","title":"归并排序","index":"4"},{"id":"快速排序","title":"快速排序","index":"5"},{"id":"随机快速排序","title":"随机快速排序","index":"6"},{"id":"计数排序","title":"计数排序","index":"7"},{"id":"基数排序","title":"基数排序","index":"8"},{"id":"堆排序","title":"堆排序","index":"9","children":[{"id":"算法思路","title":"算法思路","index":"9.1"},{"id":"构造初始大根堆的过程","title":"构造初始大根堆的过程","index":"9.2"},{"id":"&quot;取出&quot;-最大值,-构造新堆","title":"“取出” 最大值, 构造新堆","index":"9.3"},{"id":"总结","title":"总结","index":"9.4"},{"id":"代码","title":"代码","index":"9.5"}]},{"id":"折半插入排序","title":"折半插入排序","index":"10"},{"id":"希尔排序","title":"希尔排序","index":"11"},{"id":"推荐文章","title":"推荐文章","index":"12"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/iixrxk/\" title=\"排序算法\">https://mvbbb.github.io/iixrxk/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}