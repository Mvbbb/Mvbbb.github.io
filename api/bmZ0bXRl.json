{"title":"位运算","date":"2020-10-08T04:34:31.000Z","date_formatted":{"ll":"Oct 8, 2020","L":"10/08/2020","MM-DD":"10-08"},"link":"nftmte","comments":true,"tags":["算法"],"categories":["备战蓝桥杯","数据结构与算法"],"updated":"2021-02-03T04:20:59.641Z","content":"<p>之前一直放着没学, 现在遇到一道题需要运用到位运算的知识, 也就随便学了一下<br>\n<a href=\"https://vjudge.net/problem/POJ-3279\" target=\"_blank\" rel=\"external nofollow noopener\">POJ 3279 Fliptile</a></p>\n<a id=\"more\"></a>\n<h1 id=\"basic\">Basic<a title=\"#basic\" href=\"#basic\"></a></h1>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A&lt;&lt;B 结果与 A*pow(2,B) 相同, 不过左移运算速度更快</span><br><span class=\"line\"></span><br><span class=\"line\">对于 Java 而言</span><br><span class=\"line\"> 算数右移 &gt;&gt; 原来是符号位是 <span class=\"number\">1</span> , 右移之后则补 <span class=\"number\">1</span> , 反之, 则补 <span class=\"number\">0</span></span><br><span class=\"line\"> 逻辑右移 &gt;&gt;&gt; 右移之后补 <span class=\"number\">0</span> , 得到的是一个正数</span><br><span class=\"line\">但是在cpp里面 &gt;&gt;</span><br><span class=\"line\"> 对于无符号数使用的是逻辑右移</span><br><span class=\"line\"> 对于有符号数使用的是算数右移</span><br><span class=\"line\"></span><br><span class=\"line\">异或运算是不进位加法</span><br><span class=\"line\">如果对应的二进制位不同，结果位为<span class=\"number\">1</span>，否则为<span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"习题-更新二进制位\">习题 更新二进制位<a title=\"#习题-更新二进制位\" href=\"#习题-更新二进制位\"></a></h1>\n<blockquote>\n<p><a href=\"https://www.lintcode.com/problem/update-bits/description\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.lintcode.com/problem/update-bits/description</a></p>\n</blockquote>\n<p>思路: 将 n 的 i~j 的二进制位全部置为 0 , 将 m 串左移 i 位, 之后两个取 **或 **, n 串 i~j 位就全部变成了 m 串的 i~j 位<br>\n考虑如何使 n 串的 i~j 位变成 0, 让其与 一个 i~j 二进制位串全部为 0 的做 <strong>且</strong> 运算<br>\n但是构造一个这样的串有些困难, 我们可以考虑构造一个 i~j 二进制位串全部为 1 的串, 我们将他叫做 C 串<br>\n所以最后的公式就是 (n&amp;C)|(m&lt;&lt;i)<br>\n那么如何得到这个 C 串呢, 我们知道 -1 的二进制位全部为 1, 长度为 31<br>\n易得 C= (-1&lt;&lt;31-j)&gt;&gt;(31-j+i) 注意要使用逻辑位移</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">updateBits</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">u_int16_t</span>  c=(<span class=\"keyword\">u_int16_t</span> )(<span class=\"number\">-1</span>)&lt;&lt;(<span class=\"number\">31</span>-j);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n&amp;(~c&gt;&gt;(<span class=\"number\">31</span>-j+i)))|(m&lt;&lt;i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"习题-a+b-问题\">习题 A+B 问题<a title=\"#习题-a+b-问题\" href=\"#习题-a+b-问题\"></a></h1>\n<blockquote>\n<p><a href=\"https://www.lintcode.com/problem/a-b-problem/description\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.lintcode.com/problem/a-b-problem/description</a></p>\n</blockquote>\n<p>首先异或运算没有解决上一位的进位问题, 我们需要解决进位问题<br>\n什么时候需要进位, 两个串在该位置都为 1 , 我们需要进位问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * param a: The first integer</span></span><br><span class=\"line\"><span class=\"comment\">     * param b: The second integer</span></span><br><span class=\"line\"><span class=\"comment\">     * return: The sum of a and b</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">aplusb</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (b != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> _a = a ^ b;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> _b = (a &amp; b) &lt;&lt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            a = _a;</span><br><span class=\"line\">            b = _b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"技巧一:-消去二进制中最右侧的那个-1\">技巧一: 消去二进制中最右侧的那个 1<a title=\"#技巧一:-消去二进制中最右侧的那个-1\" href=\"#技巧一:-消去二进制中最右侧的那个-1\"></a></h1>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x &amp; (x - 1) 用于消去x最后一位的1, 比如x &#x3D; 12, 那么在二进制下就是(1100)2</span><br><span class=\"line\"></span><br><span class=\"line\">x           &#x3D; 1100</span><br><span class=\"line\">x - 1       &#x3D; 1011</span><br><span class=\"line\">x &amp; (x - 1) &#x3D; 1000</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用-1:-判断一个数是否是-2-的幂次\">应用 1: 判断一个数是否是 2 的幂次<a title=\"#应用-1:-判断一个数是否是-2-的幂次\" href=\"#应用-1:-判断一个数是否是-2-的幂次\"></a></h2>\n<p>2 的幂次特点</p>\n<ol>\n<li>二进制串中只有 1 个 1</li>\n<li>大于 0</li>\n</ol>\n<h2 id=\"应用二：计算在一个-32-位的整数的二进制表式中有多少个-1.\">应用二：计算在一个 32 位的整数的二进制表式中有多少个 1.<a title=\"#应用二：计算在一个-32-位的整数的二进制表式中有多少个-1.\" href=\"#应用二：计算在一个-32-位的整数的二进制表式中有多少个-1.\"></a></h2>\n<p>不断消去最右边的 1 , 直到为 0, 统计消除次数</p>\n<h2 id=\"应用三：如果要将整数-a-转换为-b，需要改变多少个-bit-位？\">应用三：如果要将整数 A 转换为 B，需要改变多少个 bit 位？<a title=\"#应用三：如果要将整数-a-转换为-b，需要改变多少个-bit-位？\" href=\"#应用三：如果要将整数-a-转换为-b，需要改变多少个-bit-位？\"></a></h2>\n<p>转化为统计不同位上有多少个位不相同, 检测不相同, 将 AB 做异或<br>\n之后统计位 1 的数量</p>\n<h1 id=\"技巧二：使用二进制进行子集枚举\">技巧二：使用二进制进行子集枚举<a title=\"#技巧二：使用二进制进行子集枚举\" href=\"#技巧二：使用二进制进行子集枚举\"></a></h1>\n<p>给定一个含 n 个元素的集合, 返回其所有子集<br>\n对于给定集合中的每一个元素, 他是否出现在子集中有两种状态 0/1, 用一个长度为 n 的二进制串来表示<br>\n而长度为 n 的二进制位串对应的 10 进制数为 2 的 n 次方, 也就是 i&lt;&lt;n<br>\n之后考虑如何获得串 P (0~i&lt;&lt;n) 的位状态信息<br>\n我们要判断第 i 位的状态, 将 (1&lt;&lt;i) 与 P 做 <strong>且,</strong> 结果大于 0 , 证明该位置的二级制位为 1</p>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/subsets/</a></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; subsets(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt; (<span class=\"number\">1</span> &lt;&lt; n); ++mask) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; t;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mask &amp; (<span class=\"number\">1</span> &lt;&lt; i)) &#123;</span><br><span class=\"line\">                    t.push_back(nums[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans.push_back(t);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"技巧三:-巧用异或运算\">技巧三: 巧用异或运算<a title=\"#技巧三:-巧用异或运算\" href=\"#技巧三:-巧用异或运算\"></a></h1>\n<p>a ^ b ^ b = a // 对一个数异或两次等价于没有任何操作！</p>\n<h2 id=\"应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数\">应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数<a title=\"#应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数\" href=\"#应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数\"></a></h2>\n<p>所有数做异或, 得到的就是唯一出现一次的数</p>\n<h2 id=\"more\">MORE<a title=\"#more\" href=\"#more\"></a></h2>\n<p><a href=\"https://www.jiuzhang.com/tutorial/bit-manipulation/84\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.jiuzhang.com/tutorial/bit-manipulation/84</a></p>\n<h1 id=\"其他技巧\">其他技巧<a title=\"#其他技巧\" href=\"#其他技巧\"></a></h1>\n<h2 id=\"位运算有什么奇技淫巧？---力扣（leetcode）的回答---知乎\">位运算有什么奇技淫巧？ - 力扣（LeetCode）的回答 - 知乎<a title=\"#位运算有什么奇技淫巧？---力扣（leetcode）的回答---知乎\" href=\"#位运算有什么奇技淫巧？---力扣（leetcode）的回答---知乎\"></a></h2>\n<p><a href=\"https://www.zhihu.com/question/38206659/answer/736472332\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.zhihu.com/question/38206659/answer/736472332</a></p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/lvkhi9/\">洛谷【搜索】暴力专项训练</a></li><li><a href=\"https://mvbbb.github.io/ehshi7/\">八皇后问题</a></li><li><a href=\"https://mvbbb.github.io/wu5oin/\">kuangbin 题单</a></li><li><a href=\"https://mvbbb.github.io/wdmukq/\">挑战程序设计竞赛-习题</a></li><li><a href=\"https://lailin.xyz/post/defer.html\">Go数据结构与算法05-栈下: 深入理解 defer</a></li></ul></div>","prev":{"title":"博客文章发布BUG记录","link":"lgv9s5"},"next":{"title":"kuangbin 题单","link":"wu5oin"},"plink":"https://mvbbb.github.io/nftmte/","toc":[{"id":"basic","title":"Basic","index":"1"},{"id":"习题-更新二进制位","title":"习题 更新二进制位","index":"2"},{"id":"习题-a+b-问题","title":"习题 A+B 问题","index":"3"},{"id":"技巧一:-消去二进制中最右侧的那个-1","title":"技巧一: 消去二进制中最右侧的那个 1","index":"4","children":[{"id":"应用-1:-判断一个数是否是-2-的幂次","title":"应用 1: 判断一个数是否是 2 的幂次","index":"4.1"},{"id":"应用二：计算在一个-32-位的整数的二进制表式中有多少个-1.","title":"应用二：计算在一个 32 位的整数的二进制表式中有多少个 1.","index":"4.2"},{"id":"应用三：如果要将整数-a-转换为-b，需要改变多少个-bit-位？","title":"应用三：如果要将整数 A 转换为 B，需要改变多少个 bit 位？","index":"4.3"}]},{"id":"技巧二：使用二进制进行子集枚举","title":"技巧二：使用二进制进行子集枚举","index":"5"},{"id":"技巧三:-巧用异或运算","title":"技巧三: 巧用异或运算","index":"6","children":[{"id":"应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数","title":"应用一：数组中，只有一个数出现一次，剩下都出现两次，找出出现一次的数","index":"6.1"},{"id":"more","title":"MORE","index":"6.2"}]},{"id":"其他技巧","title":"其他技巧","index":"7","children":[{"id":"位运算有什么奇技淫巧？---力扣（leetcode）的回答---知乎","title":"位运算有什么奇技淫巧？ - 力扣（LeetCode）的回答 - 知乎","index":"7.1"}]},{"id":"推荐文章","title":"推荐文章","index":"8"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/nftmte/\" title=\"位运算\">https://mvbbb.github.io/nftmte/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}