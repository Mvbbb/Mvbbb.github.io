{"title":"挑战程序设计竞赛-例题","date":"2020-10-03T01:01:01.000Z","date_formatted":{"ll":"Oct 3, 2020","L":"10/03/2020","MM-DD":"10-03"},"link":"po3i4a","comments":true,"tags":["算法"],"categories":["备战蓝桥杯","数据结构与算法"],"updated":"2021-02-03T04:20:59.893Z","content":"<h1 id=\"准备篇\">准备篇<a title=\"#准备篇\" href=\"#准备篇\"></a></h1>\n<h2 id=\"三角形\">三角形<a title=\"#三角形\" href=\"#三角形\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601686962784-abc0f72d-b3ce-4417-8e6c-738710132729.png#align=left&amp;display=inline&amp;height=334&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=667&amp;originWidth=1161&amp;size=182675&amp;status=done&amp;style=none&amp;width=580.5\" alt=\"image.png\" class=\"φcx\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,edge[maxn];</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;edge[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;j;k++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> len=edge[i]+edge[j]+edge[k];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> ma=max(max(edge[i],edge[j]),edge[k]);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> rest=len-ma;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ma&lt;rest)&#123;</span><br><span class=\"line\">                    res=max(len,res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">充要条件 最长的一个边小于其他两边之和</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ants\">Ants<a title=\"#ants\" href=\"#ants\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=1852\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=1852</a></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,x[maxn],L;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x &lt; y ? x : y)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;L&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> minT=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxT=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        minT=max(minT,min(x[i],L-x[i]));</span><br><span class=\"line\">        maxT=max(maxT,max(x[i],L-x[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;minT&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;maxT;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> 每个蚂蚁的速度都是一样的, 不会出现一个蚂蚁追到另一个蚂蚁然后折返的情况</span></span><br><span class=\"line\"><span class=\"comment\"> 由此可以看出, 影响结果的就是每只蚂蚁的初始朝向.</span></span><br><span class=\"line\"><span class=\"comment\"> 对于最短的时间, 只需要初始的时候所有的蚂蚁都朝向距离最短的一个端点前进</span></span><br><span class=\"line\"><span class=\"comment\"> 对于最长的时间, 只需要初始的时候所有的蚂蚁都朝向距离最远的一个端点前进</span></span><br><span class=\"line\"><span class=\"comment\"> 每只蚂蚁相遇时, 把他们角色互换, 当做还是在沿原方向走</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"难度增加的抽签问题\">难度增加的抽签问题<a title=\"#难度增加的抽签问题\" href=\"#难度增加的抽签问题\"></a></h2>\n<p>3 个纸片, 大小分别是 1, 3, 5. 判断抽取 4 次, 是否存在和为 m 的情况. 每次抽取之后放回<br>\n暴力解法 时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/813eac21bcd081b4091d26c0acc401bb.svg#card=math&amp;code=O%28n%5E4%29&amp;height=23&amp;width=43\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n,k[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;k[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;a&lt;n;a++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b=<span class=\"number\">0</span>;b&lt;n;b++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;c&lt;n;c++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d=<span class=\"number\">0</span>;d&lt;n;d++)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(k[a]+k[b]+k[c]+k[d]==m)&#123;</span><br><span class=\"line\">                        flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag==<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>二分搜索 <img src=\"https://cdn.nlark.com/yuque/__latex/39716fca8fb9b1ed3f214e4faec85ded.svg#card=math&amp;code=O%28n%5E3logn%29&amp;height=23&amp;width=74\" alt=\"\"><br>\n之前最内层循环可以优化为一个二分查找. 不需要遍历每一个数来与前 3 个数相加凑成 m, 直接看数组内是否存在 (用 m-前三个数的和)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n,k[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">binary_serach</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>,r=n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r&gt;l)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=(l+l)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k[i]&gt;x)&#123;</span><br><span class=\"line\">            r=i;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k[i]&lt;x)&#123;</span><br><span class=\"line\">            l=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;k[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;a&lt;n;a++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b=<span class=\"number\">0</span>;b&lt;n;b++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c=<span class=\"number\">0</span>;c&lt;n;c++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=m-k[a]-k[b]-k[c];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(binary_serach(x))</span><br><span class=\"line\">                <span class=\"comment\">//if(binary_search(k, k+n, x)) stl</span></span><br><span class=\"line\">                    flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag==<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用 stl 里面的二分查找 <a href=\"https://www.cnblogs.com/wkfvawl/p/9475939.html\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.cnblogs.com/wkfvawl/p/9475939.html</a></p>\n</blockquote>\n<p>再次二分算法 时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/36ca384871f24de8f225c16aba871ea7.svg#card=math&amp;code=O%28n%5E2logn%29&amp;height=23&amp;width=74\" alt=\"\"><br>\n同上个思路, 第一种算法的内两层可以优化为在<strong>后两个和的集合</strong>中查找 <strong>(m-前两个的和)</strong><br>\n后两个集合的和</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e6</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> m,n,k[maxn],kk[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;k[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 构造后两个组成的集合</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=n;j++)&#123;</span><br><span class=\"line\">            kk[i*n+j]=k[i]+k[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(kk,kk+n*n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a=<span class=\"number\">0</span>;a&lt;n;a++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b=<span class=\"number\">0</span>;b&lt;n;b++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(binary_search(kk, kk+n*n, m-k[a]-k[b]))</span><br><span class=\"line\">                flag=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag==<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"初级篇\">初级篇<a title=\"#初级篇\" href=\"#初级篇\"></a></h1>\n<h2 id=\"部分和问题\">部分和问题<a title=\"#部分和问题\" href=\"#部分和问题\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601692290944-9ed8948c-8c6a-4736-8e80-5d8b77229b60.png#align=left&amp;display=inline&amp;height=312&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=624&amp;originWidth=1093&amp;size=143373&amp;status=done&amp;style=none&amp;width=546.5\" alt=\"image.png\" class=\"φcx\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e9</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k,a[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在进行到的数组位置, sum 现在的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> sum)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==n) <span class=\"keyword\">return</span> sum==k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfs(i+<span class=\"number\">1</span>,a[i])||dfs(i+<span class=\"number\">1</span>,a[i]+sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;k;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dfs(<span class=\"number\">0</span>,<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;No&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"lakecounting\">LakeCounting<a title=\"#lakecounting\" href=\"#lakecounting\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=2386\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=2386</a></p>\n</blockquote>\n<p>8 个方向上, 有积水就看成是一个水洼</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>,maxm=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> field[maxn][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    field[x][y]=<span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dx=<span class=\"number\">-1</span>;dx&lt;=<span class=\"number\">1</span>;dx++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dy=<span class=\"number\">-1</span>;dy&lt;=<span class=\"number\">1</span>;dy++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx=x+dx;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny=y+dy;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]==<span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">                dfs(nx,ny);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;field[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(field[i][j]==<span class=\"string\">&#x27;W&#x27;</span>)&#123;</span><br><span class=\"line\">                dfs(i,j);res++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;res&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/0ca5e4e27ca8dc4c891d2c8598529ed1.svg#card=math&amp;code=O%28mn%29&amp;height=20&amp;width=50\" alt=\"\"><br>\n重点需要掌握的是在图中向 8 个方向行走的方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dx=<span class=\"number\">-1</span>;dx&lt;=<span class=\"number\">1</span>;dx++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> dy=<span class=\"number\">-1</span>;dy&lt;=<span class=\"number\">1</span>;dy++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nx=x+dx;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ny=y+dy;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]==<span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">            dfs(nx,ny);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"迷宫的最短路径\">迷宫的最短路径<a title=\"#迷宫的最短路径\" href=\"#迷宫的最短路径\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601705097640-8be7d811-5858-48cc-8e2e-d065ca425eaf.png#align=left&amp;display=inline&amp;height=378&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=756&amp;originWidth=1114&amp;size=188496&amp;status=done&amp;style=none&amp;width=557\" alt=\"image.png\"><br>\n在求最短路径时需要反复经过相同的状态, 此时使用广度优先遍历比较好</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>,maxm=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">10e8</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; P;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> maze[maxn][maxm];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> sx,sy; <span class=\"comment\">// 起点</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> gx,gy; <span class=\"comment\">// 终点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn][maxm]; <span class=\"comment\">// 到起点的最短路径的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;, dy[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;P&gt;que;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            d[n][m]=INF;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    que.push(P(sx,sy));</span><br><span class=\"line\">    d[sx][sy]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!que.empty())&#123;</span><br><span class=\"line\">        P p=que.front();que.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.first==gx&amp;&amp;p.second==gy)&#123;<span class=\"comment\">// 找到终点了</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nx=p.first+dx[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ny=p.second+dy[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;m&amp;&amp;maze[nx][ny]!=<span class=\"string\">&#x27;#&#x27;</span>&amp;&amp;d[nx][ny]==INF)&#123;<span class=\"comment\">// 可以走, 但是没有来过</span></span><br><span class=\"line\">                que.push(P(nx,ny));</span><br><span class=\"line\">                d[nx][ny]=d[p.first][p.second]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[gx][gy];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;maze[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(maze[i][j]==<span class=\"string\">&#x27;S&#x27;</span>)&#123;</span><br><span class=\"line\">                sx=i;sy=j;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(maze[i][j]==<span class=\"string\">&#x27;G&#x27;</span>)&#123;</span><br><span class=\"line\">                gx=i;gy=j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;bfs()&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点掌握 4 个方向上的遍历方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;, dy[<span class=\"number\">4</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nx=p.first+dx[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ny=p.second+dy[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nx&gt;=<span class=\"number\">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class=\"number\">0</span>&amp;&amp;ny&lt;m&amp;&amp;maze[nx][ny]!=<span class=\"string\">&#x27;#&#x27;</span>&amp;&amp;d[nx][ny]==INF)&#123;<span class=\"comment\">// 可以走, 但是没有来过</span></span><br><span class=\"line\">        que.push(P(nx,ny));</span><br><span class=\"line\">        d[nx][ny]=d[p.first][p.second]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>深度优先遍历比广度优先遍历更加节省空间</p>\n<h2 id=\"剪枝\">剪枝<a title=\"#剪枝\" href=\"#剪枝\"></a></h2>\n<p>剔除不可能得到解的状态</p>\n<h2 id=\"硬币问题\">硬币问题<a title=\"#硬币问题\" href=\"#硬币问题\"></a></h2>\n<p>经典贪心算法<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601707107001-ae3b1368-80f5-4f82-b023-8503db72f2cf.png#align=left&amp;display=inline&amp;height=294&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=588&amp;originWidth=1101&amp;size=180879&amp;status=done&amp;style=none&amp;width=550.5\" alt=\"image.png\"><br>\n不断选取最优</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> min(x,y) (x&gt;y?y:x)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> V[<span class=\"number\">6</span>]=&#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> C[<span class=\"number\">6</span>]; <span class=\"comment\">// 对应币值的数量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> A; <span class=\"comment\">// 需要凑的大小</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;C[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt; A;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">5</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=min(A/V[i],C[i]); <span class=\"comment\">// 使用硬币的数量</span></span><br><span class=\"line\">        A-=t*V[i]; <span class=\"comment\">// 还需要支付</span></span><br><span class=\"line\">        ans+=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"区间调度问题\">区间调度问题<a title=\"#区间调度问题\" href=\"#区间调度问题\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601707927809-dda72a30-34ae-4b6d-b682-58a6645dd22a.png#align=left&amp;display=inline&amp;height=106&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=212&amp;originWidth=1054&amp;size=99100&amp;status=done&amp;style=none&amp;width=527\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601707945451-1a9eb987-4ee4-4569-b1ec-32c209700ba9.png#align=left&amp;display=inline&amp;height=212&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=424&amp;originWidth=1055&amp;size=116420&amp;status=done&amp;style=none&amp;width=527.5\" alt=\"image.png\"><br>\n在可选工作中, 每次选择最早结束的工作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10e5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,S[maxn],T[maxn];</span><br><span class=\"line\"><span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; itv[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;S[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=n;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;T[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        itv[i].first=T[i]; <span class=\"comment\">// 结束时间</span></span><br><span class=\"line\">        itv[i].second=S[i]; <span class=\"comment\">// 开始时间</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 让更早结束的工作排前面</span></span><br><span class=\"line\">    sort(itv,itv+n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,t=<span class=\"number\">0</span>;<span class=\"comment\">// t 是所选工作的结束时间</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(t&lt;itv[i].second)&#123; <span class=\"comment\">// 当前工作结束啦</span></span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">            t=itv[i].first; <span class=\"comment\">// 开始下一个工作</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字典最小序问题\">字典最小序问题<a title=\"#字典最小序问题\" href=\"#字典最小序问题\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=3617\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=3617</a></p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601709222008-6c9a0665-8685-4629-9fa7-e90e83474b2c.png#align=left&amp;display=inline&amp;height=298&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=596&amp;originWidth=1060&amp;size=180290&amp;status=done&amp;style=none&amp;width=530\" alt=\"image.png\"><br>\n每次从 s 的末尾或者开头选择一个较小的, 可以任意的得到贪心方法: 每次选择开头或者结尾较小的那个字母. 如果开头和结尾的字母相同, 我们在正序和逆序中选择字典序较小的那个的开头</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2010</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=<span class=\"number\">0</span>,b=n<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(a&lt;=n)&#123; <span class=\"comment\">// 比较从s与s&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> left=<span class=\"literal\">false</span>; <span class=\"comment\">//从左边取</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;a+i&lt;b;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[a+i]&lt;s[b-i])&#123;</span><br><span class=\"line\">                left=<span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[a+i]&gt;s[b-i]) &#123;</span><br><span class=\"line\">                left=<span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left)</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(s[a++]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(s[b--]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"saruman's-army\">Saruman’s Army<a title=\"#saruman's-army\" href=\"#saruman's-army\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=3069\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=3069</a></p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601710384224-0f5d6cc0-7579-4bb1-a64b-d95fd8cba0ad.png#align=left&amp;display=inline&amp;height=324&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=647&amp;originWidth=1109&amp;size=214016&amp;status=done&amp;style=none&amp;width=554.5\" alt=\"image.png\"><br>\n从最左边开始, 考虑到右边没有点了, 为了使覆盖的点更多, 第一个标记应该在覆盖最左边这个点的情况下尽可能的在右边选择.<br>\n同理, 选择了一个点之后, 看下一个未被覆盖的点, 在覆盖该点的情况下尽可能选择靠右边的点标记.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> r,n; <span class=\"comment\">// 半径 数量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> field[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">cin</span>&gt;&gt;r&gt;&gt;n&amp;&amp;r!=<span class=\"number\">-1</span>&amp;&amp;n!=<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;field[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sort(field,field+n); <span class=\"comment\">// 从小到大排好序</span></span><br><span class=\"line\">        <span class=\"comment\">// 在可以庇护当前营地的情况下, 尽可能的靠右边</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;n)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// s 位置是当前营地</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=field[i];</span><br><span class=\"line\">            <span class=\"comment\">// 之后 i 指向的是无法庇护到的点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;n&amp;&amp;field[i]&lt;=s+r)i++;</span><br><span class=\"line\">            <span class=\"comment\">// 驻扎点的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> p=field[i<span class=\"number\">-1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 走出他的覆盖范围之外</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;n&amp;&amp;field[i]&lt;=p+r)i++;</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"fencerepair\">FenceRepair<a title=\"#fencerepair\" href=\"#fencerepair\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=3253\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=3253</a></p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601711475099-cf66f152-c3cc-41cb-8e58-bad8967dbbe6.png#align=left&amp;display=inline&amp;height=384&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=767&amp;originWidth=1099&amp;size=257088&amp;status=done&amp;style=none&amp;width=549.5\" alt=\"image.png\"><br>\n这就是一个哈夫曼树问题, 每个叶子节点对应需要的木板长度, 求最小编码问题<br>\n对于最优解: 最小的节点一定是深度最大的节点, 其次, 次小的节点是他的兄弟节点. 其他节点都是作为对应根节点的唯一一个左儿子, 不存在兄弟节点<br>\n回顾一下哈夫曼编码. 每次从优先队列选择最小的两个, 之后将他们的和放入到优先队列, 继续选择最小的两个, 直到队列为空.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxl=<span class=\"number\">50010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l[maxl],n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;l[i]   ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 求出当前最短板和次短板的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mii1=<span class=\"number\">0</span>,mii2=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l[mii1]&gt;l[mii2])swap(mii1,mii2); <span class=\"comment\">// 先确保mii1位置的数小于mii2的数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l[i]&lt;l[mii1])&#123;</span><br><span class=\"line\">                mii2=mii1;</span><br><span class=\"line\">                mii1=i;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l[i]&lt;l[mii2])&#123;</span><br><span class=\"line\">                mii2=i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 将两块板拼合</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=l[mii1]+l[mii2];</span><br><span class=\"line\">        ans+=t;</span><br><span class=\"line\">        <span class=\"comment\">// 将这两段的和插入到 mii1 的位置, 并且整体长度-1, 末尾的数放入到 mii2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mii1==n<span class=\"number\">-1</span>)swap(mii1,mii2);</span><br><span class=\"line\">        l[mii1]=t;</span><br><span class=\"line\">        l[mii2]=l[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">        n--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意从数组中直到最小和次小的数的方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 求出当前最短板和次短板的长度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> mii1=<span class=\"number\">0</span>,mii2=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(l[mii1]&gt;l[mii2])swap(mii1,mii2); <span class=\"comment\">// 先确保mii1位置的数小于mii2的数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l[i]&lt;l[mii1])&#123;</span><br><span class=\"line\">        mii2=mii1;</span><br><span class=\"line\">        mii1=i;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(l[i]&lt;l[mii2])&#123;</span><br><span class=\"line\">        mii2=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用堆实现时间复杂度为 <img src=\"https://cdn.nlark.com/yuque/__latex/d344075a2c690847a757434e9e7fa128.svg#card=math&amp;code=O%28nlogn%29&amp;height=20&amp;width=67\" alt=\"\">  时间复杂度的算法<br>\n注意: 向堆中插入一个元素的时间复杂度是 <img src=\"https://cdn.nlark.com/yuque/__latex/60d4554fc1d20efd2fe270a75f50433e.svg#card=math&amp;code=O%28logn%29&amp;height=20&amp;width=57\" alt=\"\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">priority_queue</span>&lt;<span class=\"keyword\">int</span>,<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; ,greater&lt;<span class=\"keyword\">int</span>&gt; &gt; que;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;temp;</span><br><span class=\"line\">        que.push(temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(que.size()!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1=<span class=\"number\">0</span>,x2=<span class=\"number\">0</span>;</span><br><span class=\"line\">        x1=que.top(); que.pop();</span><br><span class=\"line\">        x2=que.top(); que.pop();</span><br><span class=\"line\">        que.push(x1+x2);</span><br><span class=\"line\">        ans+=(x1+x2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"*-01-背包\">* 01 背包<a title=\"#*-01-背包\" href=\"#*-01-背包\"></a></h2>\n<blockquote>\n<p>前 i 件物品放入容量为 j 的背包，所得到的最优价值为 dp[i][j]</p>\n</blockquote>\n<p>朴素搜索</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,W;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxn],w[maxn];<span class=\"comment\">// 价值 重量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 针对每一个物品是否放进背包进行搜索</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rec</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res; <span class=\"comment\">// 价值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==n)&#123;<span class=\"comment\">//搜索结束, 没有剩余物品了</span></span><br><span class=\"line\">        res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&lt;w[i])&#123;<span class=\"comment\">//假如加入这个物品的话超过额定重量</span></span><br><span class=\"line\">        <span class=\"comment\">// 无法挑选这个物品</span></span><br><span class=\"line\">        res=rec(i+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res=max(rec(i+<span class=\"number\">1</span>,j),rec(i+<span class=\"number\">1</span>,j-w[i])+v[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;rec(<span class=\"number\">0</span>,W)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>tips: memset 可以快速的对高维数组赋值为 -1, 而 1 则不行</p>\n</blockquote>\n<p>使用记忆化递归</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,W;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxn],w[maxn];<span class=\"comment\">// 价值 重量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[maxn][maxn];</span><br><span class=\"line\"><span class=\"comment\">// 针对每一个物品是否放进背包进行搜索</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rec</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dp[i][j]&gt;=<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res; <span class=\"comment\">// 价值</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==n)&#123;<span class=\"comment\">//搜索结束, 没有剩余物品了</span></span><br><span class=\"line\">        res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j&lt;w[i])&#123;<span class=\"comment\">//假如加入这个物品的话超过额定重量</span></span><br><span class=\"line\">        <span class=\"comment\">// 无法挑选这个物品</span></span><br><span class=\"line\">        res=rec(i+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res=max(rec(i+<span class=\"number\">1</span>,j),rec(i+<span class=\"number\">1</span>,j-w[i])+v[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[i][j]=res;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;rec(<span class=\"number\">0</span>,W)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从后先前的递推</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">11000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,W;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[maxn],w[maxn];<span class=\"comment\">// 价值 重量</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;W;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从后先前递推</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=W;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;w[i])&#123; <span class=\"comment\">//</span></span><br><span class=\"line\">                dp[i][j]=dp[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i][j]=max(dp[i+<span class=\"number\">1</span>][j],dp[i+<span class=\"number\">1</span>][j-w[i]]+v[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[<span class=\"number\">0</span>][W]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一种写法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=W;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;w[i])</span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j]=dp[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j]=max(dp[i][j],dp[i][j-w[i]]+v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[n][W]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>空间优化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=W;j&gt;=w[i];j--)&#123;</span><br><span class=\"line\">            dp[j]=max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[W]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125; ub</span><br></pre></td></tr></table></figure>\n<h2 id=\"完全背包问题\">完全背包问题<a title=\"#完全背包问题\" href=\"#完全背包问题\"></a></h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// w重量, v价值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve3</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=W;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k*w[i]&lt;=j;k++)&#123;</span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j]=max(dp[i+<span class=\"number\">1</span>][j],dp[i][j-k*w[i]]+k*v[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[n][W];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=W;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;w[i])</span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j]=dp[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j]=max(dp[i][j],dp[i+<span class=\"number\">1</span>][j-w[i]]+v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[n][W]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>空间优化</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=w[i];j&lt;=W;j++)&#123;</span><br><span class=\"line\">            dp[j]=max(dp[j],dp[j-w[i]]+v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[W]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最长公共子序列\">最长公共子序列<a title=\"#最长公共子序列\" href=\"#最长公共子序列\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601725157473-ffc72cd9-66f3-4d1b-b8c8-587944caa4dc.png#align=left&amp;display=inline&amp;height=263&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=422&amp;originWidth=780&amp;size=147921&amp;status=done&amp;style=none&amp;width=487\" alt=\"image.png\" class=\"φcx\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[maxn][maxn];<span class=\"comment\">// dp[i][j] 代表 s(1-i) 与 t(1-j) 的最长公共子序列的长度</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\"><span class=\"built_in\">string</span> s,t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[i]==t[j])</span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=dp[i][j]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=max(dp[i][j+<span class=\"number\">1</span>],dp[i+<span class=\"number\">1</span>][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;dp[n][m];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>背包问题后补</p>\n<p>划分数<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601727328178-c2a69496-e886-4ddf-bbc8-aab503a372df.png#align=left&amp;display=inline&amp;height=145&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=289&amp;originWidth=1073&amp;size=82360&amp;status=done&amp;style=none&amp;width=536.5\" alt=\"image.png\"></p>\n<h2 id=\"expedition\">Expedition<a title=\"#expedition\" href=\"#expedition\"></a></h2>\n<blockquote>\n<p><a href=\"http://poj.org/problem?id=2431\" target=\"_blank\" rel=\"external nofollow noopener\">http://poj.org/problem?id=2431</a><br>\n书上有改动, 建议看书</p>\n</blockquote>\n<p>经过加油站选择加还是不加? 我们可以当做我得到了一次加油的机会, 但是现在不加油, 在之后油用完了, 我们就把这个机会用掉. 可能在用完之前我们会经过几个加油站, 我们的得到了很多机会, 那么我们这么选择呢? 显然, 选择可以加油量最多的那个加油站</p>\n<blockquote>\n<p>注意, 题目只要求加油站的数量, 但是并没有要求是哪个具体的加油站<br>\n使用优先队列从&quot;机会&quot;中选择加油量最多的</p>\n</blockquote>\n<p>当前油箱不为空, 就继续前进, 遇到加油站就放入优先队列, 油用完了, 就从优先队列中取出一个, 如果优先队列为空, 说明汽车无法到达终点</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],b[maxn]; <span class=\"comment\">// 加油站距离开始 加油站加油量</span></span><br><span class=\"line\"><span class=\"built_in\">priority_queue</span>&lt;<span class=\"keyword\">int</span>&gt; que;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,l,p; <span class=\"comment\">// 加油站数量, 总长度, 刚开始的汽油</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 把终点站看成是加油站</span></span><br><span class=\"line\">    a[n]=l;</span><br><span class=\"line\">    b[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    n++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 加油次数 位置 油量</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,pos=<span class=\"number\">0</span>,tank=p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d=a[i]-pos; <span class=\"comment\">// 接下去要行进的距离</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tank&lt;d)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(que.empty())&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;-1&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 一直加油, 油箱的余量可以到达下一个加油站</span></span><br><span class=\"line\">            tank+=que.top();</span><br><span class=\"line\">            que.pop();</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tank-=d;</span><br><span class=\"line\">        pos=a[i];</span><br><span class=\"line\">        que.push(b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;ans&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;l&gt;&gt;p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;n;j++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;b[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    solve();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编码实现时: 对于该车, 看油箱余量是否可以支持它到下一个加油站, 不够的话就从&quot;机会&quot;里面加油, 如果没有&quot;机会&quot;了, -1. 经过下一个加油站时, 我们就又多了一个机会. 把终点虚拟为一个加油站</p>\n<h2 id=\"并查集\">并查集<a title=\"#并查集\" href=\"#并查集\"></a></h2>\n<p>管理元素分组情况的数据结构<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601816048625-deceaa26-eaa0-477d-ae1c-92afcdfc402f.png#align=left&amp;display=inline&amp;height=181&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=362&amp;originWidth=1130&amp;size=83117&amp;status=done&amp;style=none&amp;width=565\" alt=\"image.png\"><br>\n并查集也是使用树形结构实现的<br>\n判断两个元素是否是同一集合: 找到两个元素所在树形的根元素, 判断是否相同<br>\n合并: 两颗树根与根连接成一个树形, 小树接大树<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601816384619-5043d7f7-a550-49fe-9954-d997ac78c82f.png#align=left&amp;display=inline&amp;height=154&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=307&amp;originWidth=1142&amp;size=72241&amp;status=done&amp;style=none&amp;width=571\" alt=\"image.png\"><br>\n使用路径压缩来使并查集效率更高. 子节点尽可能的靠近根节点<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601816334357-892de7bc-df4b-450b-a972-6f7c8c5dd411.png#align=left&amp;display=inline&amp;height=197&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=393&amp;originWidth=1123&amp;size=79777&amp;status=done&amp;style=none&amp;width=561.5\" alt=\"image.png\"><br>\n并查集的时间复杂度低于 <img src=\"https://cdn.nlark.com/yuque/__latex/60d4554fc1d20efd2fe270a75f50433e.svg#card=math&amp;code=O%28logn%29&amp;height=20&amp;width=57\" alt=\"\"></p>\n<h2 id=\"*食物链\">*食物链<a title=\"#*食物链\" href=\"#*食物链\"></a></h2>\n<blockquote>\n<p><a href=\"https://vjudge.net/problem/POJ-1182\" target=\"_blank\" rel=\"external nofollow noopener\">https://vjudge.net/problem/POJ-1182</a></p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601816502735-929b178f-11ab-4c54-9f12-512ebeb6676d.png#align=left&amp;display=inline&amp;height=474&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=948&amp;originWidth=1147&amp;size=289717&amp;status=done&amp;style=none&amp;width=573.5\" alt=\"image.png\" class=\"φcx\"></p>\n<blockquote>\n<p>我怀疑这是一道脑筋急转弯<br>\n解释 1: <a href=\"https://blog.csdn.net/niushuai666/article/details/6981689\" target=\"_blank\" rel=\"external nofollow noopener\">https://blog.csdn.net/niushuai666/article/details/6981689</a><br>\n解释 2: <a href=\"https://blog.csdn.net/hitwhylz/article/details/12260377?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param\" target=\"_blank\" rel=\"external nofollow noopener\">https://blog.csdn.net/hitwhylz/article/details/12260377</a></p>\n</blockquote>\n<p>他们说的话可能是真, 可能是假. 先初步判断真假<br>\n增加一个结构, 存在于动物体之间. 联系并查集树形的特点.<br>\n先将每一个个体看成是一个单独的并查集. 之后根据输入的同类, 捕食关系来合并不同的并查集.<br>\n&lt;–后补–&gt;</p>\n<h2 id=\"二分图判定\">二分图判定<a title=\"#二分图判定\" href=\"#二分图判定\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601826009734-dd86ad5b-c11d-461a-9167-4c97f66e499b.png#align=left&amp;display=inline&amp;height=120&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=239&amp;originWidth=973&amp;size=134888&amp;status=done&amp;style=none&amp;width=486.5\" alt=\"image.png\" class=\"φcx\"></p>\n<blockquote>\n<p>p97 页</p>\n</blockquote>\n<p>确定一个位置的着色之后, 相邻位置的颜色也就确定了<br>\n使用邻接表的存储方式</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 顶点 颜色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">    color[v]=c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;G[v].size();i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 相邻节点被染色了, 并且与当前节点同色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[G[v][i]]==c)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 相邻节点未被染色, 则染成 -c</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[G[v][i]]==<span class=\"number\">0</span>&amp;&amp;!dfs(G[v][i],-c))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(color[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!dfs(i,<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;NO&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">&quot;YES&quot;</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最短路径问题\">最短路径问题<a title=\"#最短路径问题\" href=\"#最短路径问题\"></a></h2>\n<blockquote>\n<p><a href=\"https://www.acwing.com/blog/content/405/\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.acwing.com/blog/content/405/</a></p>\n</blockquote>\n<h3 id=\"frod-算法\">Frod 算法<a title=\"#frod-算法\" href=\"#frod-算法\"></a></h3>\n<p>Ford 算法: 单源最短路径算法, 适用于有边为负值的情况, 是求原点到其他所有点的最短路径, 不是两个点之间的最短路径</p>\n<blockquote>\n<p><a href=\"http://www.wutianqi.com/blog/1912.html\" target=\"_blank\" rel=\"external nofollow noopener\">http://www.wutianqi.com/blog/1912.html</a> &gt; <a href=\"https://endlesslethe.com/bellmanford-spfa-tutorial.html\" target=\"_blank\" rel=\"external nofollow noopener\">https://endlesslethe.com/bellmanford-spfa-tutorial.html</a> &gt; <a href=\"https://blog.csdn.net/tengweitw/article/details/17451125\" target=\"_blank\" rel=\"external nofollow noopener\">https://blog.csdn.net/tengweitw/article/details/17451125</a> &gt; <a href=\"https://juejin.im/post/6844903661395509262\" target=\"_blank\" rel=\"external nofollow noopener\">https://juejin.im/post/6844903661395509262</a></p>\n</blockquote>\n<p>关于形成的最短路径的几个定理<br>\n定理一：只有上一次迭代中松弛过的点才有可能参与下一次迭代的松弛操作<br>\n定理二：如果在边权都为正的图中，最短路一定是一条路径，而不是一个圈，且长度不会大于等于 V<br>\n定理三：对于存在负圈的图，最短路无意义<br>\n定理四：对于不存在负圈的图，最短路一定是一条路径，且长度不会大于等于 V</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAX=<span class=\"number\">10000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> m=<span class=\"number\">10</span>,n=<span class=\"number\">5</span>;<span class=\"comment\">// 边数, 顶点数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> startvex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> endvex;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125;edge;</span><br><span class=\"line\">edge T[m]; <span class=\"comment\">// 边的集合</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值为0, 代表存在从源点s可达的负权回路, 否则返回边的个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BellmanFord</span><span class=\"params\">(<span class=\"keyword\">int</span> dist[n][n],<span class=\"keyword\">int</span> d[n],<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化到每个顶点的距离为无穷</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        d[i]=MAX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    d[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>;<span class=\"comment\">// 用于统计边</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;n<span class=\"number\">-1</span>;k++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 当前节点是 ii</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ii=<span class=\"number\">0</span>;ii&lt;n;ii++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> jj=<span class=\"number\">0</span>;jj&lt;n;jj++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dist[ii][jj]!=MAX)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 更新原点到他邻居的节点的距离</span></span><br><span class=\"line\">                    <span class=\"comment\">// 如果原点直接到邻居的距离比从原点到该点,再从该点到邻居要远的话</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(d[jj]&gt;(d[ii]+dist[ii][jj]))&#123;</span><br><span class=\"line\">                        d[jj]=d[ii]+dist[ii][jj]; <span class=\"comment\">// 更新原点到邻居的最短距离</span></span><br><span class=\"line\">                        T[num].startvex=ii;</span><br><span class=\"line\">                        T[num].endvex=jj;</span><br><span class=\"line\">                        T[num].length=dist[ii][jj];</span><br><span class=\"line\">                        num++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> ii=<span class=\"number\">0</span>;ii&lt;n;ii++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> jj=<span class=\"number\">0</span>;jj&lt;n;jj++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[jj]&gt;d[ii]+dist[ii][jj])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dist[n][n]=&#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">6</span>,MAX,<span class=\"number\">7</span>,MAX&#125;,</span><br><span class=\"line\">                    &#123;MAX,<span class=\"number\">0</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">-4</span>&#125;,</span><br><span class=\"line\">                    &#123;MAX,<span class=\"number\">-2</span>,<span class=\"number\">0</span>,MAX,MAX&#125;,</span><br><span class=\"line\">                    &#123;MAX,MAX,<span class=\"number\">-3</span>,<span class=\"number\">0</span>,<span class=\"number\">9</span>&#125;,</span><br><span class=\"line\">                    &#123;<span class=\"number\">2</span>,MAX,<span class=\"number\">7</span>,MAX,<span class=\"number\">0</span>&#125;&#125;;<span class=\"comment\">//图的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d[n];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">0</span>; <span class=\"comment\">// num 用于统计边</span></span><br><span class=\"line\">    num=BellmanFord(dist, d, <span class=\"number\">0</span>);<span class=\"comment\">// 0 为源点</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start= %d, end= %d, length= %d\\n&quot;</span>,T[i].startvex,T[i].endvex,T[i].length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>关于这个算法的几个问题</strong><br>\n<strong>为什么是循环 n-1 次?</strong><br>\n答：因为最短路径肯定是个简单路径，不可能包含回路的， 如果包含回路，且回路的权值和为正的，那么去掉这个回路，可以得到更短的路径 如果回路的权值是负的，那么肯定没有解了<br>\n图有 n 个点，又不能有回路 所以最短路径最多 n-1 边<br>\n又因为每次循环，至少 relax 一边 所以最多 n-1 次就行了<br>\n<strong>第二种版本的代码</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* About:  Bellman-Ford算法</span></span><br><span class=\"line\"><span class=\"comment\">* Author: Tanky Woo</span></span><br><span class=\"line\"><span class=\"comment\">* Blog:   www.WuTianqi.com</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxnum = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxint = <span class=\"number\">99999</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 边，</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;    <span class=\"comment\">// 起点，重点</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> weight;  <span class=\"comment\">// 边的权值</span></span><br><span class=\"line\">&#125;Edge;</span><br><span class=\"line\"></span><br><span class=\"line\">Edge edge[maxnum];     <span class=\"comment\">// 保存边的值</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>  dist[maxnum];     <span class=\"comment\">// 结点到源点最小距离</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> nodenum, edgenum, source;    <span class=\"comment\">// 结点数，边数，源点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输入结点数，边数，源点</span></span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; nodenum &gt;&gt; edgenum &gt;&gt; source;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=nodenum; ++i)</span><br><span class=\"line\">        dist[i] = maxint;</span><br><span class=\"line\">    dist[source] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=edgenum; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span> &gt;&gt; edge[i].u &gt;&gt; edge[i].v &gt;&gt; edge[i].weight;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(edge[i].u == source)          <span class=\"comment\">//注意这里设置初始情况</span></span><br><span class=\"line\">            dist[edge[i].v] = edge[i].weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 松弛计算</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">relax</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> weight)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist[v] &gt; dist[u] + weight)</span><br><span class=\"line\">        dist[v] = dist[u] + weight;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Bellman_Ford</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=nodenum<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=edgenum; ++j)</span><br><span class=\"line\">            relax(edge[j].u, edge[j].v, edge[j].weight);</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否有负环路</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=edgenum; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dist[edge[i].v] &gt; dist[edge[i].u] + edge[i].weight)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    init();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Bellman_Ford())</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span> ;i &lt;= nodenum; i++)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; dist[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dijkstra-算法\">Dijkstra 算法<a title=\"#dijkstra-算法\" href=\"#dijkstra-算法\"></a></h3>\n<p>一个点到其他所有点</p>\n<blockquote>\n<p><a href=\"https://www.bilibili.com/video/BV1QK411V7V4/\" target=\"_blank\" rel=\"external nofollow noopener\">https://www.bilibili.com/video/BV1QK411V7V4/</a></p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF =<span class=\"number\">0x3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxv=<span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cost [maxv][maxv]; <span class=\"comment\">// i-&gt;j 的花费</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxv]; <span class=\"comment\">// 顶点出发的最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> V;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[maxv]; <span class=\"comment\">// 已经用过的图</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    fill(d,d+V,INF);</span><br><span class=\"line\">    fill(used,used+v,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从尚未选择的节点中选择一个距离最短的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=<span class=\"number\">0</span>;u&lt;v;u++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!used[u]&amp;&amp;(v==<span class=\"number\">-1</span>||d[u]&lt;d[v]))</span><br><span class=\"line\">                v=u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==<span class=\"number\">-1</span>)<span class=\"keyword\">break</span>; <span class=\"comment\">// 全部都被使用过了</span></span><br><span class=\"line\">        used[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=<span class=\"number\">0</span>;u&lt;v;u++)&#123;</span><br><span class=\"line\">            d[u]=min(d[u],d[v]+cost[v][u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"floyd-算法\">Floyd 算法<a title=\"#floyd-算法\" href=\"#floyd-算法\"></a></h3>\n<p>所有两个点之间的最短路径<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1601888021692-7f1a7fd6-61a8-413a-862a-4a93e4d59e6f.png#align=left&amp;display=inline&amp;height=76&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=152&amp;originWidth=1059&amp;size=125273&amp;status=done&amp;style=none&amp;width=529.5\" alt=\"image.png\"></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;v;k++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;v;j++)&#123;</span><br><span class=\"line\">                d[i][j]=min(d[i][j],d[k][j]+d[i][k]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"路径还原\">路径还原<a title=\"#路径还原\" href=\"#路径还原\"></a></h3>\n<p>使用 prev 来记录最短路径顶点的前驱节点</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cost [maxv][maxv]; <span class=\"comment\">// i-&gt;j 的花费</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxv]; <span class=\"comment\">// 顶点出发的最短路径</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> v;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[maxv]; <span class=\"comment\">// 已经用过的图</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> prevs[maxv];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span>&#123;</span><br><span class=\"line\">    fill(d,d+v,INF);</span><br><span class=\"line\">    fill(used,used+v,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    fill(prevs,prevs+v,<span class=\"number\">-1</span>); <span class=\"comment\">//默认前驱不存在</span></span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!used[i]&amp;&amp;(v==<span class=\"number\">-1</span>||d[i]&lt;d[v]))</span><br><span class=\"line\">                v=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==<span class=\"number\">-1</span>)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        used[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=<span class=\"number\">0</span>;u&lt;v;u++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d[u]&gt;d[v]+cost[v][u])&#123;</span><br><span class=\"line\">                d[u]=d[v]+cost[v][u];</span><br><span class=\"line\">                prevs[u]=u;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">get_path</span><span class=\"params\">(<span class=\"keyword\">int</span> t)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; path;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(; t!=<span class=\"number\">-1</span>;t=prevs[t])</span><br><span class=\"line\">        path.push_back(t);</span><br><span class=\"line\">    reverse(path.begin(),path.end());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> path;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最小生成树问题\">最小生成树问题<a title=\"#最小生成树问题\" href=\"#最小生成树问题\"></a></h2>\n<h3 id=\"prim-算法\">Prim 算法<a title=\"#prim-算法\" href=\"#prim-算法\"></a></h3>\n<p>加顶点法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF =<span class=\"number\">0x3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxv=<span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cost[maxv][maxv];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mincost[maxv]; <span class=\"comment\">// 从集合x出发到每个顶点的最小权值</span></span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[maxv]; <span class=\"comment\">// 节点是否被包含在其中</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> v;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">prim</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fill(mincost,mincost+v,INF);</span><br><span class=\"line\">    fill(used,used+v,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    mincost[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 从不属于x集合的顶点中选取x到其权值最小的顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=<span class=\"number\">0</span>;u&lt;v;u++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!used[u]&amp;&amp;(v==<span class=\"number\">-1</span>||mincost[u]&lt;mincost[v]))</span><br><span class=\"line\">                v=u;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v==<span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        used[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        res+=mincost[v];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> u=<span class=\"number\">0</span>;u&lt;v;u++)&#123;</span><br><span class=\"line\">            mincost[u]=min(mincost[u],cost[v][u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"kruskal-算法\">Kruskal 算法<a title=\"#kruskal-算法\" href=\"#kruskal-算法\"></a></h3>\n<p>加边法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF =<span class=\"number\">0x3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxv=<span class=\"number\">10000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,cost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">comp</span><span class=\"params\">(<span class=\"keyword\">const</span> edge&amp; e1,<span class=\"keyword\">const</span> edge&amp; e2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> e1.cost&lt;e2.cost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">edge es[maxv];</span><br><span class=\"line\"><span class=\"keyword\">int</span> v,e;</span><br><span class=\"line\"><span class=\"keyword\">int</span> p[maxv]; <span class=\"comment\">//并查集的父节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init_union_find</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">        p[i]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[x]!=x)</span><br><span class=\"line\">        p[x]=find(p[x]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">same</span><span class=\"params\">(<span class=\"keyword\">int</span> i1,<span class=\"keyword\">int</span> i2)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> find(i1)==find(i2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"keyword\">int</span> i1,<span class=\"keyword\">int</span> i2)</span></span>&#123;</span><br><span class=\"line\">    p[i1]=i2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    sort(es,es+e,comp); <span class=\"comment\">//从小到大排序</span></span><br><span class=\"line\">    init_union_find(v); <span class=\"comment\">// 并查集的初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;e;i++)&#123;</span><br><span class=\"line\">        edge e=es[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!same(e.u,e.v))&#123; <span class=\"comment\">// 不是同一个连通分量</span></span><br><span class=\"line\">            unite(e.u,e.v); <span class=\"comment\">// 合并两个连通分量</span></span><br><span class=\"line\">            res+=e.cost;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/lvkhi9/\">洛谷【搜索】暴力专项训练</a></li><li><a href=\"https://mvbbb.github.io/ehshi7/\">八皇后问题</a></li><li><a href=\"https://mvbbb.github.io/nftmte/\">位运算</a></li><li><a href=\"https://mvbbb.github.io/wu5oin/\">kuangbin 题单</a></li><li><a href=\"https://lailin.xyz/post/defer.html\">Go数据结构与算法05-栈下: 深入理解 defer</a></li></ul></div>","prev":{"title":"挑战程序设计竞赛-习题","link":"wdmukq"},"next":{"title":"想学算法","link":"mce5h4"},"plink":"https://mvbbb.github.io/po3i4a/","toc":[{"id":"准备篇","title":"准备篇","index":"1","children":[{"id":"三角形","title":"三角形","index":"1.1"},{"id":"ants","title":"Ants","index":"1.2"},{"id":"难度增加的抽签问题","title":"难度增加的抽签问题","index":"1.3"}]},{"id":"初级篇","title":"初级篇","index":"2","children":[{"id":"部分和问题","title":"部分和问题","index":"2.1"},{"id":"lakecounting","title":"LakeCounting","index":"2.2"},{"id":"迷宫的最短路径","title":"迷宫的最短路径","index":"2.3"},{"id":"剪枝","title":"剪枝","index":"2.4"},{"id":"硬币问题","title":"硬币问题","index":"2.5"},{"id":"区间调度问题","title":"区间调度问题","index":"2.6"},{"id":"字典最小序问题","title":"字典最小序问题","index":"2.7"},{"id":"saruman's-army","title":"Saruman’s Army","index":"2.8"},{"id":"fencerepair","title":"FenceRepair","index":"2.9"},{"id":"*-01-背包","title":"* 01 背包","index":"2.10"},{"id":"完全背包问题","title":"完全背包问题","index":"2.11"},{"id":"最长公共子序列","title":"最长公共子序列","index":"2.12"},{"id":"expedition","title":"Expedition","index":"2.13"},{"id":"并查集","title":"并查集","index":"2.14"},{"id":"*食物链","title":"*食物链","index":"2.15"},{"id":"二分图判定","title":"二分图判定","index":"2.16"},{"id":"最短路径问题","title":"最短路径问题","index":"2.17","children":[{"id":"frod-算法","title":"Frod 算法","index":"2.17.1"},{"id":"dijkstra-算法","title":"Dijkstra 算法","index":"2.17.2"},{"id":"floyd-算法","title":"Floyd 算法","index":"2.17.3"},{"id":"路径还原","title":"路径还原","index":"2.17.4"}]},{"id":"最小生成树问题","title":"最小生成树问题","index":"2.18","children":[{"id":"prim-算法","title":"Prim 算法","index":"2.18.1"},{"id":"kruskal-算法","title":"Kruskal 算法","index":"2.18.2"}]}]},{"id":"推荐文章","title":"推荐文章","index":"3"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/po3i4a/\" title=\"挑战程序设计竞赛-例题\">https://mvbbb.github.io/po3i4a/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}