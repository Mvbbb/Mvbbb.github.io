{"title":"MySQL 基础","date":"2020-09-19T03:49:05.000Z","date_formatted":{"ll":"Sep 19, 2020","L":"09/19/2020","MM-DD":"09-19"},"link":"zwggs9","comments":true,"tags":["MySQL","SQL"],"categories":["数据库"],"updated":"2021-02-03T04:21:00.225Z","content":"<p><a href=\"https://sqlzoo.net/\" target=\"_blank\" rel=\"external nofollow noopener\">练习网站</a> <a href=\"https://blog.csdn.net/qq_38490457/article/details/107640904\" target=\"_blank\" rel=\"external nofollow noopener\">学习 MySQL 这一篇就够了</a><br>\n<a href=\"https://www.runoob.com/sql/sql-tutorial.html\" target=\"_blank\" rel=\"external nofollow noopener\">SQL 教程</a> <a href=\"https://www.runoob.com/mysql/mysql-tutorial.html\" target=\"_blank\" rel=\"external nofollow noopener\">MySQL 教程</a></p>\n<a id=\"more\"></a>\n<h1 id=\"mysql-命令\">MySQL 命令<a title=\"#mysql-命令\" href=\"#mysql-命令\"></a></h1>\n<p>表中具有几个概念：列、行、主键。 列叫做字段(Column),行叫做表中的记录,每一个字段都有:字段名称/字段数据类型/字段约束/字段长度</p>\n<p><strong>那么 SQL 语句包括增删改查，SQL 语句怎么分类呢？</strong></p>\n<ol>\n<li>DQL（数据查询语言 Data Query Language）: 查询语句，凡是 select 语句都是 DQL。</li>\n<li>DML（数据操作语言 Data Manipulation Language）：insert delete update，对表当中的数据进行增删改。</li>\n<li>DDL（数据定义语言 Data Definition Language）：create drop alter，对表结构的增删改。</li>\n<li>TCL（事务控制语言 Transactional Control Language）：commit 提交事务，rollback 回滚事务。(TCL 中的 T 是 Transaction)</li>\n<li>DCL（数据控制语言 Data Control Language）: grant 授权、revoke 撤销权限等。</li>\n</ol>\n<p><strong>常见 SQL 命令</strong><br>\nshow datebases;<br>\ncreate database <dbname>;<br>\nuse <dbname>;<br>\nshow tables;<br>\n删除数据库：drop database <dbname>;<br>\n查看表结构: desc <tablename>;<br>\n查看表内容:  select * from <tablename>;<br>\n查看 MySQL 版本: select version();<br>\n查看当前数据库名称: select database();<br>\n退出: exit;<br>\n查看别的数据库的表: show tables from <database>;<br>\n查看创建表的语句：show create table <tablename>;</p>\n<p><strong>什么是 sql 脚本呢？</strong><br>\n当一个文件的扩展名是.sql，并且该文件中编写了大量的 sql 语句，我们称这样的文件为 sql 脚本。<br>\n注意：直接使用 source 命令可以执行 sql 脚本。<br>\nsql 脚本中的数据量太大的时候，无法打开，请使用 source 命令完成初始化。</p>\n<h1 id=\"基本-select\">基本 SELECT<a title=\"#基本-select\" href=\"#基本-select\"></a></h1>\n<p><strong>简单的查询语句:</strong><br>\n语法格式：  select 字段名 1,字段名 2,字段名 3,… from 表名;</p>\n<blockquote>\n<p>sql 语句不区分大小写。</p>\n</blockquote>\n<p>查询员工的年薪？（字段可以参与数学运算。）<br>\n<code>select ename,sal * 12 from emp;</code> <br>\n  给查询结果的列重命名？<br>\n<code>select ename,sal * 12 as yearsal from emp;</code> <br>\n  别名中有中文？<br>\n<code>select ename,sal * 12 as 年薪 from emp; // 错误</code> <br>\n<code>select ename,sal * 12 as '年薪' from emp;</code> <br>\n注意：标准 sql 语句中要求字符串使用单引号括起来。虽然 mysql 支持双引号，尽量别用。<br>\nas 关键字可以省略？<br>\n<code>mysql&gt; select empno,ename,sal * 12 yearsal from emp;</code></p>\n<p>条件查询需要用到 where 语句，where 必须放到 from 语句表的后面<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1600517549715-eab7ed18-fa4e-4dae-b58e-744ec8dc8b93.png#align=left&amp;display=inline&amp;height=258&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=516&amp;originWidth=1081&amp;size=51351&amp;status=done&amp;style=none&amp;width=540.5\" alt=\"image.png\"></p>\n<p>在数据库当中 NULL 不是一个值，代表什么也没有，为空。<br>\n空不是一个值，不能用等号衡量。<br>\n<strong>必须使用 is null 或者 is not null</strong></p>\n<p>and 和 or 联合起来用：找出薪资大于 1000 的并且部门编号是 20 或 30 部门的员工。<br>\n<code>select ename,sal,deptno from emp where sal &gt; 1000 and deptno = 20 or deptno = 30; // 错误的</code> <br>\n<code>select ename,sal,deptno from emp where sal &gt; 1000 and (deptno = 20 or deptno = 30); // 正确的。</code> <br>\n**   注意：当运算符的优先级不确定的时候加小括号。**<br>\nin 等同于 or：<br>\n<code>select ename,job from emp where job in('SALESMAN', 'MANAGER');</code></p>\n<p>*<em>模糊查询 like **<br>\n找出名字当中含有 O 的？<br>\n   （在模糊查询当中，必须掌握两个特殊的符号，一个是%，一个是</em>）<br>\n   %代表任意多个字符，*代表任意 1 个字符。<br>\n   <code>select ename from emp where ename like '%O%';</code> <br>\n找出名字中第二个字母是 A 的？<br>\n<code>select ename from emp where ename like '_A%';</code> <br>\n找出名字中最后一个字母是 T 的？<br>\n<code>select ename from emp where ename like '%T';</code> <br>\n查询结果去重 <code>distinct</code>  distinct 只能出现在所有字段的最前面。<br>\n<code>select distinct job from emp;</code></p>\n<h1 id=\"排序-order-by\">排序 ORDER BY<a title=\"#排序-order-by\" href=\"#排序-order-by\"></a></h1>\n<p>默认是升序. asc 表示升序，desc 表示降序。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ename , sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal; <span class=\"operator\">/</span><span class=\"operator\">/</span> 升序</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename , sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">asc</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span> 升序</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename , sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">desc</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span> 降序。</span><br></pre></td></tr></table></figure>\n<p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ename,sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">desc</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename,sal <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">desc</span> , ename <span class=\"keyword\">asc</span>;</span><br></pre></td></tr></table></figure>\n<p>注意：越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。<br>\norder by 是最后执行的</p>\n<h1 id=\"分组/聚合函数\">分组/聚合函数<a title=\"#分组/聚合函数\" href=\"#分组/聚合函数\"></a></h1>\n<p><strong>count 计数, sum 求和, avg 平均值, max 最大值, min 最小值</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"built_in\">sum</span>(sal) <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> JOB<span class=\"operator\">=</span><span class=\"string\">&#x27;CLERK&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>所有的分组函数都是对“某一组”数据进行操作的。</strong><br>\n找出工资总和？<br>\n select sum(sal) from emp;<br>\n找出最高工资？<br>\n select max(sal) from emp;<br>\n找出最低工资？<br>\n select min(sal) from emp;<br>\n找出平均工资？<br>\n select avg(sal) from emp;<br>\n找出总人数？<br>\n select count(*) from emp;<br>\n select count(ename) from emp;<br>\n分组函数一共 5 个。<br>\n分组函数还有另一个名字：多行处理函数。<br>\n多行处理函数的特点：输入多行，最终输出的结果是 1 行。<br>\n分组函数自动忽略 NULL。</p>\n<p>所有数据库都是这样规定的，<strong>只要有 NULL 参与的运算结果一定是 NULL。</strong><br>\n使用 ifnull 函数：ifnull(可能为 NULL 的数据,被当做什么处理) ： 属于单行处理函数。<br>\n<code>select ename,(sal+ifnull(comm,0))*12 as yearsal from emp;</code> <br>\nsum 函数自动忽略 null</p>\n<p><strong>分组函数也能组合起来用：</strong><br>\n<code>select count(*),sum(sal),avg(sal),max(sal),min(sal) from emp;</code></p>\n<p><strong>count(*)和 count(具体的某个字段)，他们有什么区别？</strong><br>\ncount(*):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）<br>\ncount(comm): 表示统计 comm 字段中不为 NULL 的数据总数量。</p>\n<p><strong>group by ： 按照某个字段或者某些字段进行分组。</strong><br>\n<strong>having : having 是对分组之后的数据进行再次过滤。</strong><br>\n注意：分组函数一般都会和 group by 联合使用，这也是为什么它被称为分组函数的原因。<br>\n<strong>并且任何一个分组函数（count sum avg max min）都是在 group by 语句执行结束之后才会执行的。</strong><br>\n当一条 sql 语句没有 group by 的话，整张表的数据会自成一组。<br>\n为什么 where 里面不能用分组函数 <code>where avl(sal)&gt; 10;</code> ?<br>\n因为只有等 where 执行之后~~ group by 才能执行~~, 之后才会去分组函数, 在组内运算.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span>\t\t<span class=\"number\">5</span></span><br><span class=\"line\">\t\t..</span><br><span class=\"line\">\t<span class=\"keyword\">from</span>\t\t\t<span class=\"number\">1</span></span><br><span class=\"line\">\t\t..</span><br><span class=\"line\">\t<span class=\"keyword\">where</span>\t\t\t<span class=\"number\">2</span></span><br><span class=\"line\">\t\t..</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>\t\t<span class=\"number\">3</span></span><br><span class=\"line\">\t\t..</span><br><span class=\"line\">\t<span class=\"keyword\">having</span>\t\t<span class=\"number\">4</span></span><br><span class=\"line\">\t\t..</span><br><span class=\"line\">\t<span class=\"keyword\">order</span> <span class=\"keyword\">by</span>\t\t<span class=\"number\">6</span></span><br><span class=\"line\">\t\t..</span><br></pre></td></tr></table></figure>\n<p><strong>记住一个规则：当一条语句中有 group by 的话，select 后面只能跟分组函数和参与分组的字段。</strong></p>\n<h1 id=\"分组查询\">分组查询<a title=\"#分组查询\" href=\"#分组查询\"></a></h1>\n<p>分组查询主要涉及到两个子句，分别是：group by 和 having<br>\n一个完整的 select 语句格式如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> 字段</span><br><span class=\"line\"><span class=\"keyword\">from</span> 表名</span><br><span class=\"line\"><span class=\"keyword\">where</span> …….</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> ……..</span><br><span class=\"line\"><span class=\"keyword\">having</span> …….(就是为了过滤分组后的数据而存在的—不可以单独的出现)</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> ……..</span><br></pre></td></tr></table></figure>\n<p>以上语句的执行顺序</p>\n<ol>\n<li>首先执行 where 语句过滤原始数据</li>\n<li>执行 group by 进行分组</li>\n<li>执行 having 对分组数据进行操作</li>\n<li>执行 select 选出数据</li>\n<li>执行 order by 排序<br>\n原则：能在 where 中过滤的数据，尽量在 where 中过滤，效率较高。having 的过滤是专门对分组之后的数据进行过滤的。</li>\n</ol>\n<h1 id=\"连接查询-join\">连接查询 JOIN<a title=\"#连接查询-join\" href=\"#连接查询-join\"></a></h1>\n<p>在表的连接查询方面有一种现象被称为：笛卡尔积现象。<br>\n笛卡尔积现象：当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。</p>\n<p>关于表的别名：<br>\n<code>select e.ename,d.dname from emp e,dept d;</code> <br>\n表的别名有什么好处？<br>\n  第一：执行效率高。<br>\n  第二：可读性好。<br>\n<strong>内连接中的等值连接</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\te.ename,d.dname</span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\temp e</span><br><span class=\"line\"><span class=\"keyword\">join</span></span><br><span class=\"line\">\tdept d</span><br><span class=\"line\"><span class=\"keyword\">on</span></span><br><span class=\"line\">\te.deptno <span class=\"operator\">=</span> d.deptno;</span><br></pre></td></tr></table></figure>\n<p><strong>内连接的非等值连接</strong><br>\n工资-&gt;工资等级</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> e.ename , e.sal,s.grade</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">from</span> emp e</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">join</span> salgrade s</span><br><span class=\"line\">    <span class=\"operator\">-</span><span class=\"operator\">&gt;</span> <span class=\"keyword\">on</span> e.sal <span class=\"keyword\">between</span> s.losal <span class=\"keyword\">and</span> s.hisal;</span><br></pre></td></tr></table></figure>\n<p><strong>自连接: 一张表看出两张不同的表</strong><br>\n<strong>什么是外连接，和内连接有什么区别？</strong><br>\n内连接：<br>\n  假设 A 和 B 表进行连接，使用内连接的话，凡是 A 表和 B 表能够匹配上的记录查询出来，这就是内连接。<br>\n AB 两张表没有主副之分，两张表是平等的。<br>\n外连接：<br>\n  假设 A 和 B 表进行连接，使用外连接的话，AB 两张表中有一张表是主表，一张表是副表，主要查询主表中<br>\n  的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出 NULL 与之匹配。</p>\n<p>外连接的分类？<br>\n  左外连接（左连接）：表示左边的这张表是主表。<br>\n  右外连接（右连接）：表示右边的这张表是主表。<br>\n  左连接有右连接的写法，右连接也会有对应的左连接的写法。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">外连接：（右外连接<span class=\"operator\">/</span>右连接）</span><br><span class=\"line\"><span class=\"keyword\">select</span></span><br><span class=\"line\">\ta.ename <span class=\"string\">&#x27;员工&#x27;</span>, b.ename <span class=\"string\">&#x27;领导&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">from</span></span><br><span class=\"line\">\temp b</span><br><span class=\"line\"><span class=\"keyword\">right</span> <span class=\"keyword\">join</span></span><br><span class=\"line\">\temp a</span><br><span class=\"line\"><span class=\"keyword\">on</span></span><br><span class=\"line\">\ta.mgr <span class=\"operator\">=</span> b.empno;</span><br></pre></td></tr></table></figure>\n<h1 id=\"union-并集\">UNION 并集<a title=\"#union-并集\" href=\"#union-并集\"></a></h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> job<span class=\"operator\">=</span><span class=\"string\">&#x27;MANAGER&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">union</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> job<span class=\"operator\">=</span><span class=\"string\">&#x27;SALESMAN&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>合并结果集的时候，需要查询字段对应个数相同。在 Oracle 中更严格，不但要求个数相同，而且还要求类型对应相同。</p>\n<h1 id=\"limit-的使用\">LIMIT 的使用<a title=\"#limit-的使用\" href=\"#limit-的使用\"></a></h1>\n<p><code>select * from table limit m,n</code> <br>\n其中 m 是指记录开始的 index，从 0 开始，表示第一条记录<br>\nn 是指从第 m+1 条开始，取 n 条。<br>\n<code>select * from tablename limit 2,4</code> <br>\n即取出第 3 条至第 6 条，4 条记录</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit是<span class=\"keyword\">sql</span>语句最后执行的一个环节：</span><br><span class=\"line\">\t<span class=\"keyword\">select</span>\t\t<span class=\"number\">5</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"keyword\">from</span>\t\t\t<span class=\"number\">1</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"keyword\">where</span>\t\t\t<span class=\"number\">2</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span>\t\t<span class=\"number\">3</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"keyword\">having</span>\t\t<span class=\"number\">4</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\t<span class=\"keyword\">order</span> <span class=\"keyword\">by</span>\t\t<span class=\"number\">6</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">\tlimit\t\t\t<span class=\"number\">7</span></span><br><span class=\"line\">\t\t...;</span><br></pre></td></tr></table></figure>\n<p>分页的 sql 语句 <code>limit (PageNo-1)*PageSize, PageSize;</code></p>\n<h1 id=\"表\">表<a title=\"#表\" href=\"#表\"></a></h1>\n<h2 id=\"创建表\">创建表<a title=\"#创建表\" href=\"#创建表\"></a></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> tableName(</span><br><span class=\"line\">   columnName dataType(length),</span><br><span class=\"line\">   ………………..</span><br><span class=\"line\">   columnName dataType(length)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">set</span> character_set_results<span class=\"operator\">=</span><span class=\"string\">&#x27;gbk&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">show</span> variables <span class=\"keyword\">like</span> <span class=\"string\">&#x27;%char%&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">创建表的时候，表中有字段，每一个字段有：</span><br><span class=\"line\">     <span class=\"operator\">*</span> 字段名</span><br><span class=\"line\">     <span class=\"operator\">*</span> 字段数据类型</span><br><span class=\"line\">     <span class=\"operator\">*</span> 字段长度限制</span><br><span class=\"line\">     <span class=\"operator\">*</span> 字段约束</span><br></pre></td></tr></table></figure>\n<p><strong>常用数据类型</strong><br>\n int   整数型 (java 中的 int)<br>\n bigint 长整型 (java 中的 long)<br>\n float   浮点型 (java 中的 float double)<br>\n char   定长字符串 (String)<br>\n varchar 可变长字符串 (StringBuffer/StringBuilder)<br>\n date   日期类型 （对应 Java 中的 java.sql.Date 类型）<br>\n BLOB   二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应 java 中的 Object）<br>\n CLOB   字符大对象（存储较大文本，比如，可以存储 4G 的字符串。）<br>\nCharacter Large OBject（对应 java 中的 Object）</p>\n<h2 id=\"增/删/改-ddl\">增/删/改 DDL<a title=\"#增/删/改-ddl\" href=\"#增/删/改-ddl\"></a></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>删除表</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_student;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>添加字段</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t_student <span class=\"keyword\">add</span>  contact_tel <span class=\"type\">varchar</span>(<span class=\"number\">40</span>);</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>修改字段</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t_student modify student_name <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) ;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t_student change sex gender <span class=\"type\">char</span>(<span class=\"number\">2</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>删除字段</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> t_student <span class=\"keyword\">drop</span> contact_tel;</span><br></pre></td></tr></table></figure>\n<h2 id=\"增/删/改-dml\">增/删/改 DML<a title=\"#增/删/改-dml\" href=\"#增/删/改-dml\"></a></h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>添加记录</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student(student_id, student_name, sex, birthday, email, classes_id) <span class=\"keyword\">values</span>(<span class=\"number\">1001</span>, <span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;1988-01-01&#x27;</span>, <span class=\"string\">&#x27;qqq@163.com&#x27;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span>(<span class=\"number\">9999</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;MANAGER&#x27;</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>,<span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>如何插入日期：</strong><br>\n第一种方法，插入的日期格式和显示的日期格式一致<br>\n第二种方法，采用 str_to_date<br>\n第三种方法，添加系统日期（now()）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class=\"keyword\">values</span>(<span class=\"number\">9997</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;MANAGER&#x27;</span>, <span class=\"keyword\">null</span>, <span class=\"string\">&#x27;1981-06-12&#x27;</span>,<span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class=\"keyword\">values</span>(<span class=\"number\">9996</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;MANAGER&#x27;</span>,<span class=\"keyword\">null</span>,str_to_date(<span class=\"string\">&#x27;1981-06-12&#x27;</span>,<span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>),<span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(empno, ename, job, mgr, hiredate, sal, comm, deptno) <span class=\"keyword\">values</span>(<span class=\"number\">9995</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;MANAGER&#x27;</span>,<span class=\"keyword\">null</span>,now() ,<span class=\"number\">3000</span>, <span class=\"number\">500</span>, <span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>表复制</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp_bak <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> empno,ename,sal <span class=\"keyword\">from</span> emp;</span><br></pre></td></tr></table></figure>\n<p>以上方式，会自动创建表，将符合查询条件的数据自动复制到创建的表中<br>\n如何将查询的数据直接放到已经存在的表中，可以使用条件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp_bak <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> sal<span class=\"operator\">=</span><span class=\"number\">3000</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>数据更新</strong><br>\n可以修改数据，可以根据条件修改数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> 表名 <span class=\"keyword\">set</span> 字段名称<span class=\"number\">1</span><span class=\"operator\">=</span>需要修改的值<span class=\"number\">1</span>, 字段名称<span class=\"number\">2</span><span class=\"operator\">=</span>需要修改的值<span class=\"number\">2</span> <span class=\"keyword\">where</span> ……</span><br></pre></td></tr></table></figure>\n<p><strong>数据删除</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span>表名 <span class=\"keyword\">where</span> 。。。。。</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建表加入约束\">创建表加入约束<a title=\"#创建表加入约束\" href=\"#创建表加入约束\"></a></h2>\n<p><strong>常见的约束</strong><br>\na) 非空约束，not null<br>\nb) 唯一约束，unique  <br>\nc) 主键约束，primary key<br>\nd) 外键约束，foreign key<br>\ne) 自定义检查约束，check（不建议使用）(在 mysql 中现在还不支持)</p>\n<p>**非空约束，**针对某个字段设置其值不为空，如：学生的姓名不能为空</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_student;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_student(</span><br><span class=\"line\">\tstudent_id  \t<span class=\"type\">int</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">\tstudent_name \t<span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">\tsex\t\t<span class=\"type\">char</span>(<span class=\"number\">2</span>)  <span class=\"keyword\">default</span>  <span class=\"string\">&#x27;m&#x27;</span>,</span><br><span class=\"line\">\tbirthday\t<span class=\"type\">date</span>,</span><br><span class=\"line\">\temail\t\t<span class=\"type\">varchar</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">\tclasses_id\t<span class=\"type\">int</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>加入不符合约束条件的内容会报错</span><br></pre></td></tr></table></figure>\n<p>**唯一约束 unique **唯一性约束，它可以使某个字段的值不能重复，如：email 不能重复：[每个字段一个约束-列级约束]</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_student;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_student(</span><br><span class=\"line\">\tstudent_id  \t<span class=\"type\">int</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">\tstudent_name \t<span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span>,</span><br><span class=\"line\">\tsex\t\t<span class=\"type\">char</span>(<span class=\"number\">2</span>)  <span class=\"keyword\">default</span>  <span class=\"string\">&#x27;m&#x27;</span>,</span><br><span class=\"line\">\tbirthday\t<span class=\"type\">date</span>,</span><br><span class=\"line\">\temail\t\t<span class=\"type\">varchar</span>(<span class=\"number\">30</span>)  <span class=\"keyword\">unique</span>,</span><br><span class=\"line\">\tclasses_id\t<span class=\"type\">int</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_student(student_id, student_name , sex, birthday, email, classes_id)</span><br><span class=\"line\"><span class=\"keyword\">values</span></span><br><span class=\"line\">(<span class=\"number\">1001</span>,<span class=\"string\">&#x27;zhangsan&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;1988-01-01&#x27;</span>, <span class=\"string\">&#x27;qqq@163.com&#x27;</span>, <span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>给两个列或者多个列添加 unique [多个字段联合添加一个约束-表级约束]</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_user;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\">  \tid <span class=\"type\">int</span>,</span><br><span class=\"line\">  \tusercode <span class=\"type\">varchar</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  \tusername <span class=\"type\">varchar</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  \t<span class=\"keyword\">unique</span>(usercode,username) <span class=\"operator\">/</span><span class=\"operator\">/</span> 多个字段联合起来添加<span class=\"number\">1</span>个约束<span class=\"keyword\">unique</span> 【表级约束】</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>注意：not null 约束只有列级约束。没有表级约束。<br>\n<strong>主键约束: 不为空且不能重复</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_user;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\">  id <span class=\"type\">int</span> <span class=\"keyword\">primary</span> <span class=\"keyword\">key</span>,  <span class=\"operator\">/</span><span class=\"operator\">/</span> 列级约束</span><br><span class=\"line\">  username <span class=\"type\">varchar</span>(<span class=\"number\">255</span>),</span><br><span class=\"line\">  email <span class=\"type\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>主键约束, 主键值, 主键字段<br>\n主键有什么作用？</p>\n<ul>\n<li>表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键。</li>\n<li>主键的作用：主键值是这行记录在这张表当中的唯一标识。（就像一个人的身份证号码一样。）</li>\n</ul>\n<p>**  主键的分类:**<br>\n  根据<strong>主键字段的字段数量</strong>来划分：</p>\n<ol>\n<li>单一主键（推荐的，常用的。）</li>\n<li>复合主键 (多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式。）</li>\n</ol>\n<p>根据<strong>主键性质</strong>来划分：</p>\n<ol>\n<li>自然主键：主键值最好就是一个和业务没有任何关系的自然数。（这种方式是推荐的）</li>\n<li>业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键。（不推荐用）最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。</li>\n</ol>\n<p>一张表的主键约束只能有 1 个。（必须记住）<br>\n<strong>mysql 提供主键值自增：（非常重要。）</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_user;</span><br><span class=\"line\">  <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_user(</span><br><span class=\"line\">  \tid <span class=\"type\">int</span> <span class=\"keyword\">primary</span> <span class=\"keyword\">key</span> auto_increment, <span class=\"operator\">/</span><span class=\"operator\">/</span> id字段自动维护一个自增的数字，从<span class=\"number\">1</span>开始，以<span class=\"number\">1</span>递增。</span><br><span class=\"line\">  \tusername <span class=\"type\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p><strong>外键约束: 子表引用父表的某一字段</strong><br>\n关于外键约束的相关术语：</p>\n<ul>\n<li>外键约束: foreign key</li>\n<li>外键字段：添加有外键约束的字段</li>\n<li>外键值：外键字段中的每一个值。</li>\n</ul>\n<p>删除先删子, 再删除父表<br>\n创建的时候先创建父表, 后创建子表<br>\n外键可以为 NULL。 <br>\n外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？<br>\n注意：被引用的字段不一定是主键，但至少具有 unique 约束。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> if <span class=\"keyword\">exists</span> t_student;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> t_student(</span><br><span class=\"line\">\tstudent_id  \t<span class=\"type\">int</span>(<span class=\"number\">10</span>),</span><br><span class=\"line\">\tstudent_name \t<span class=\"type\">varchar</span>(<span class=\"number\">20</span>),</span><br><span class=\"line\">\tsex\t\t<span class=\"type\">char</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">\tbirthday\t<span class=\"type\">date</span>,</span><br><span class=\"line\">\temail\t\t<span class=\"type\">varchar</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">\tclasses_id\t<span class=\"type\">int</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> student_id_pk <span class=\"keyword\">primary</span> <span class=\"keyword\">key</span>(student_id),</span><br><span class=\"line\">  <span class=\"operator\">/</span><span class=\"operator\">/</span> 外键约束</span><br><span class=\"line\">\t<span class=\"keyword\">constraint</span> fk_classes_id <span class=\"keyword\">foreign</span> <span class=\"keyword\">key</span>(classes_id) <span class=\"keyword\">references</span> t_classes(classes_id)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"mysql-函数\">MySQL 函数<a title=\"#mysql-函数\" href=\"#mysql-函数\"></a></h1>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608628104426-3c96f455-fd2b-4d12-8409-c39de3d0d21a.png#align=left&amp;display=inline&amp;height=422&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=844&amp;originWidth=1629&amp;size=161241&amp;status=done&amp;style=none&amp;width=814.5\" alt=\"image.png\" class=\"φcx\"></p>\n<h2 id=\"数字函数\">数字函数<a title=\"#数字函数\" href=\"#数字函数\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608628125708-62edf585-c0ac-4095-b875-a52f5c7a0f6b.png#align=left&amp;display=inline&amp;height=429&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=857&amp;originWidth=1582&amp;size=324277&amp;status=done&amp;style=none&amp;width=791\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608628448775-653fbf09-85cd-466b-b552-244d78dc50e9.png#align=left&amp;display=inline&amp;height=378&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=755&amp;originWidth=1613&amp;size=274734&amp;status=done&amp;style=none&amp;width=806.5\" alt=\"image.png\"></p>\n<h2 id=\"日期函数\">日期函数<a title=\"#日期函数\" href=\"#日期函数\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608628801318-9fed73e7-4d83-4563-8221-5a0a345cf5e2.png#align=left&amp;display=inline&amp;height=324&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=647&amp;originWidth=1629&amp;size=184165&amp;status=done&amp;style=none&amp;width=814.5\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608628980094-1b2de4d8-908e-4cc1-a110-f9e072e5d0a2.png#align=left&amp;display=inline&amp;height=426&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=852&amp;originWidth=1628&amp;size=217362&amp;status=done&amp;style=none&amp;width=814\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608629819415-b7f21424-2ba0-4042-adf3-2064624499f5.png#align=left&amp;display=inline&amp;height=373&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=745&amp;originWidth=1743&amp;size=249049&amp;status=done&amp;style=none&amp;width=871.5\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608629982636-1a3d491d-c249-40af-86a9-457c15b09efa.png#align=left&amp;display=inline&amp;height=292&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=584&amp;originWidth=1705&amp;size=138622&amp;status=done&amp;style=none&amp;width=852.5\" alt=\"image.png\"></p>\n<h2 id=\"字符函数\">字符函数<a title=\"#字符函数\" href=\"#字符函数\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608630046432-3d5403e5-51f2-420f-b7a3-cf12f7f47db6.png#align=left&amp;display=inline&amp;height=334&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=668&amp;originWidth=1682&amp;size=169480&amp;status=done&amp;style=none&amp;width=841\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608630571966-b8b6ee75-245f-49de-b09a-945ebe612853.png#align=left&amp;display=inline&amp;height=266&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=532&amp;originWidth=1713&amp;size=146491&amp;status=done&amp;style=none&amp;width=856.5\" alt=\"image.png\"></p>\n<h2 id=\"条件函数\">条件函数<a title=\"#条件函数\" href=\"#条件函数\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608736977092-96b9a591-d875-4b36-9eb3-07a95995c342.png#align=left&amp;display=inline&amp;height=259&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=518&amp;originWidth=1444&amp;size=73247&amp;status=done&amp;style=none&amp;width=722\" alt=\"image.png\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1608737027923-92edb941-68be-4d8f-a2a0-df11df275ac0.png#align=left&amp;display=inline&amp;height=322&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=643&amp;originWidth=1499&amp;size=173223&amp;status=done&amp;style=none&amp;width=749.5\" alt=\"image.png\"></p>\n<h1 id=\"事务-tcl\">事务 TCL<a title=\"#事务-tcl\" href=\"#事务-tcl\"></a></h1>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> AUTOCOMMIT<span class=\"operator\">=</span><span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">START</span> TRANSACTION ;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> dept;</span><br><span class=\"line\"><span class=\"keyword\">UPDATE</span> dept <span class=\"keyword\">set</span> LOC<span class=\"operator\">=</span><span class=\"string\">&#x27;BEIJIN&#x27;</span> <span class=\"keyword\">WHERE</span> LOC<span class=\"operator\">=</span><span class=\"string\">&#x27;NEW YORK&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  dept;</span><br><span class=\"line\"><span class=\"keyword\">ROLLBACK</span> ;</span><br><span class=\"line\"># <span class=\"keyword\">COMMIT</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span>  dept;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于事务\">关于事务<a title=\"#关于事务\" href=\"#关于事务\"></a></h2>\n<p>一个事务是一个完整的业务逻辑单元，不可再分。<br>\n比如：银行账户转账，从 A 账户向 B 账户转账 10000.需要执行两条 update 语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> t_act <span class=\"keyword\">set</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">-</span> <span class=\"number\">10000</span> <span class=\"keyword\">where</span> actno <span class=\"operator\">=</span> <span class=\"string\">&#x27;act-001&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">update</span> t_act <span class=\"keyword\">set</span> balance <span class=\"operator\">=</span> balance <span class=\"operator\">+</span> <span class=\"number\">10000</span> <span class=\"keyword\">where</span> actno <span class=\"operator\">=</span> <span class=\"string\">&#x27;act-002&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>以上两条 DML 语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。<br>\n要想保证以上的两条 DML 语句同时成功或者同时失败，那么就需要使用数据库的**“事务机制”**。<br>\n<strong>和事务相关的语句只有：DML 语句。（insert delete update）</strong><br>\n为什么？因为它们这三个语句都是和数据库表当中的“数据”相关的。<br>\n事务的存在是为了保证数据的完整性，安全性。</p>\n<p>假设所有的业务都能使用 1 条 DML 语句搞定，还需要事务机制吗？<br>\n不需要事务。<br>\n但实际情况不是这样的，通常一个“事儿（事务【业务】）”需要多条 DML 语句共同联合完成。</p>\n<p><strong>事务的特性？</strong><br>\n事务包括四大特性：ACID<br>\nA(Atomicity): 原子性：事务是最小的工作单元，不可再分。<br>\nC(Consistency): 一致性：事务必须保证多条 DML 语句同时成功或者同时失败。<br>\nI(Isolation)：隔离性：事务 A 与事务 B 之间具有隔离。<br>\nD(Durability)：持久性：持久性说的是最终数据必须持久化到硬盘文件中，事务才算成功的结束。</p>\n<p><strong>事务中存在一些概念：</strong><br>\na) 事务（Transaction）：一批操作（一组 DML）<br>\nb) 开启事务（Start Transaction）<br>\nc) 回滚事务（rollback）<br>\nd) 提交事务（commit）<br>\ne) SET AUTOCOMMIT：禁用或启用事务的自动提交模式</p>\n<h2 id=\"并发过程中存在的问题\">并发过程中存在的问题<a title=\"#并发过程中存在的问题\" href=\"#并发过程中存在的问题\"></a></h2>\n<p>1 . <strong>丢失更新问题</strong><br>\n2 . <strong>读&quot;脏&quot;数据问题</strong><br>\n3 . <strong>不可重复读</strong></p>\n<h2 id=\"关于隔离级别\">关于隔离级别<a title=\"#关于隔离级别\" href=\"#关于隔离级别\"></a></h2>\n<p><strong>关于事务之间的隔离性</strong><br>\n  事务隔离性存在隔离级别，理论上隔离级别包括 4 个：<br>\n**   第一级别：读未提交（read uncommitted）**<br>\n允许一个事务可以看到其他事务未提交的修改。<br>\n    对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。<br>\n    读未提交存在脏读（Dirty Read）现象：表示读到了脏的数据。<br>\n**   第二级别：读已提交（read committed）**<br>\n允许一个事务只能看到其他事务已经提交的修改，未提交的修改是不可见的。<br>\n    这种隔离级别解决了: 脏读现象没有了。<br>\n    读已提交存在的问题是：不可重复读。<br>\n每次对方修改, 都读取不到之前的数据, 不可重复读<br>\n**   第三级别：可重复读（repeatable read）**<br>\n确保如果在一个事务中执行两次相同的 SELECT 语句，都能得到相同的结果，不管其他事务是否提交这些修改。 （银行总账）<br>\n    这种隔离级别解决了：不可重复读问题。<br>\n事务期间, 读取的数据不变, 不管别的事务是否对硬盘数据进行操作<br>\n    这种隔离级别存在的问题是：读取到的数据是幻象。<br>\n**   第四级别：序列化读/串行化读（serializable）  **<br>\n别的事务结束了, 本事务才能操作<br>\n    解决了所有问题。<br>\n将一个事务与其他事务完全地隔离。 <br>\n    效率低。需要事务排队。<br>\noracle 数据库默认的隔离级别是：读已提交。<br>\nmysql 数据库默认的隔离级别是：可重复读。</p>\n<p>mysql 事务默认情况下是自动提交的。<br>\n什么是自动提交？只要执行任意一条 DML 语句则提交一次。）怎么关闭自动提交？</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">start</span> transaction;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置隔离级别\">设置隔离级别<a title=\"#设置隔离级别\" href=\"#设置隔离级别\"></a></h2>\n<p>**通过修改配置文件设置  **<br>\n可以在 my.ini 文件中使用 transaction-isolation 选项来设置服务器的缺省事务隔离级别。  <br>\n该选项值可以是：  <br>\n– READ-UNCOMMITTED<br>\n– READ-COMMITTED<br>\n– REPEATABLE-READ<br>\n– SERIALIZABLE<br>\n例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">transaction<span class=\"operator\">-</span>isolation <span class=\"operator\">=</span> READ<span class=\"operator\">-</span>COMMITTED</span><br></pre></td></tr></table></figure>\n<p><strong>通过命令动态设置隔离级别</strong><br>\n隔离级别也可以在运行的服务器中动态设置，应使用 SET TRANSACTION ISOLATION LEVEL 语句。  <br>\n其语法模式为：<br>\n<code>SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL &lt;isolation-level&gt;</code> <br>\n其中的<isolation-level>可以是：<br>\n– READ UNCOMMITTED<br>\n– READ COMMITTED<br>\n– REPEATABLE READ<br>\n– SERIALIZABLE<br>\n例如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br></pre></td></tr></table></figure>\n<p><strong>查看隔离级别</strong><br>\n服务器变量 <code>tx_isolation</code>  包括会话级和全局级两个变量）中保存着当前的会话隔离级别。  <br>\n为了查看当前隔离级别，可访问 <code>tx_isolation</code>  变量：  <br>\n查看会话级的当前隔离级别：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> @<span class=\"variable\">@tx</span>_isolation;</span><br><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> @<span class=\"variable\">@session</span>.tx_isolation;</span><br></pre></td></tr></table></figure>\n<p>查看全局级的当前隔离级别：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql<span class=\"operator\">&gt;</span> <span class=\"keyword\">SELECT</span> @<span class=\"variable\">@global</span>.tx_isolation;</span><br></pre></td></tr></table></figure>\n<h1 id=\"索引\">索引<a title=\"#索引\" href=\"#索引\"></a></h1>\n<p><strong>什么是索引？有什么用？</strong><br>\n索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。<br>\n在数据库方面，查询一张表的时候有两种检索方式：<br>\n  第一种方式：全表扫描<br>\n  第二种方式：根据索引检索（效率很高）<br>\n索引为什么可以提高检索效率呢？ 其实最根本的原理是缩小了扫描的范围。</p>\n<p>索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。比如，表中的数据经常被修改这样就不适合添加索引，<strong>因为数据一旦修改，索引需要重新排序，进行维护。</strong><br>\n添加索引是给某一个字段，或者说某些字段添加索引。<br>\n select ename,sal from emp where ename = ‘SMITH’;<br>\n  当 ename 字段上没有添加索引的时候，以上 sql 语句会进行全表扫描，扫描 ename 字段中所有的值。<br>\n  当 ename 字段上添加索引的时候，以上 sql 语句会根据索引扫描，快速定位。</p>\n<p>什么时候考虑<strong>给字段添加索引</strong>？（满足什么条件）</p>\n<ol>\n<li>数据量庞大。（根据客户的需求，根据线上的环境）</li>\n<li>该字段很少的 DML(插入,删除)操作。（因为字段进行修改操作，索引也需要维护）</li>\n<li>该字段经常出现在 where 子句中。（经常根据哪个字段查询）</li>\n<li>该字段经常出现在连接操作的连接条件中.</li>\n</ol>\n<p>注意：主键和具有 unique 约束的字段自动会添加索引。根据主键查询效率较高。尽量根据主键检索。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给薪资sal字段添加索引：</span><br><span class=\"line\"><span class=\"keyword\">create</span> index emp_sal_index <span class=\"keyword\">on</span> emp(sal);</span><br></pre></td></tr></table></figure>\n<p><strong>索引底层采用的数据结构是：B + Tree</strong><br>\n<strong>索引的分类</strong></p>\n<ol>\n<li>单一索引：给单个字段添加索引</li>\n<li>复合索引: 给多个字段联合起来添加 1 个索引</li>\n<li>主键索引：主键上会自动添加索引</li>\n<li>唯一索引：有 unique 约束的字段上会自动添加索引</li>\n</ol>\n<p><strong>索引的实现原理？</strong><br>\n通过 B Tree 缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename <span class=\"operator\">=</span> <span class=\"string\">&#x27;SMITH&#x27;</span>;</span><br><span class=\"line\">通过索引转换为：</span><br><span class=\"line\"><span class=\"keyword\">select</span> ename <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> 物理地址 <span class=\"operator\">=</span> <span class=\"number\">0x3</span>;</span><br></pre></td></tr></table></figure>\n<p>索引什么时候失效？<br>\n<code>select ename from emp where ename like '%A%';</code> <br>\n模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。</p>\n<h1 id=\"视图\">视图<a title=\"#视图\" href=\"#视图\"></a></h1>\n<p><strong>什么是视图？</strong><br>\n站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）。</p>\n<p><strong>怎么创建视图？怎么删除视图？</strong></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> myview <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> empno,ename <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">view</span> myview;</span><br></pre></td></tr></table></figure>\n<p>注意：只有 DQL 语句才能以视图对象的方式创建出来。<br>\n对视图进行增删改查，会影响到原表数据。（通过视图影响原表数据的，不是直接操作的原表）<br>\n可以对视图进行 CRUD 操作。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp_bak <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> myview1 <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> empno,ename,sal <span class=\"keyword\">from</span> emp_bak;<span class=\"operator\">/</span><span class=\"operator\">/</span> 创建视图</span><br><span class=\"line\"><span class=\"keyword\">update</span> myview1 <span class=\"keyword\">set</span> ename<span class=\"operator\">=</span><span class=\"string\">&#x27;hehe&#x27;</span>,sal<span class=\"operator\">=</span><span class=\"number\">1</span> <span class=\"keyword\">where</span> empno <span class=\"operator\">=</span> <span class=\"number\">7369</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span> 通过视图修改原表数据。</span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> myview1 <span class=\"keyword\">where</span> empno <span class=\"operator\">=</span> <span class=\"number\">7369</span>; <span class=\"operator\">/</span><span class=\"operator\">/</span> 通过视图删除原表数据。</span><br></pre></td></tr></table></figure>\n<p><strong>视图的作用</strong><br>\n视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java 程序员只对视图对象进行 CRUD。<br>\n通过多表连接产生的视图, 每次修改只能修改来自其中一张表的数据.</p>\n<h1 id=\"数据库设计三范式\">数据库设计三范式<a title=\"#数据库设计三范式\" href=\"#数据库设计三范式\"></a></h1>\n<blockquote>\n<p><a href=\"https://segmentfault.com/a/1190000013695030\" target=\"_blank\" rel=\"external nofollow noopener\">https://segmentfault.com/a/1190000013695030</a> &gt; <a href=\"https://blog.csdn.net/wuyanxiaxia/article/details/22933021\" target=\"_blank\" rel=\"external nofollow noopener\">https://blog.csdn.net/wuyanxiaxia/article/details/22933021</a></p>\n</blockquote>\n<h2 id=\"第一范式:-原子性\">第一范式: 原子性<a title=\"#第一范式:-原子性\" href=\"#第一范式:-原子性\"></a></h2>\n<p>每个字段都必须是原子的, 不可再分. 一个字段只存储一项信息<br>\n在某个业务需求中: 字段 <strong>年月日</strong> 假如可以被分成 <strong>年,月,日</strong> ,就必须将改字段分为 3 个字段</p>\n<h2 id=\"第二范式:-唯一性\">第二范式: 唯一性<a title=\"#第二范式:-唯一性\" href=\"#第二范式:-唯一性\"></a></h2>\n<p>每一行都必须满足唯一性,   不同属性完全依赖于同一个主键. 任意一个字段都只依赖表中的同一个字段. 假如依赖于两个字段就需要将该表拆分为两个表.<br>\neg:比如不符合第二范式</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">学生证 名称</th>\n<th style=\"text-align:left\">学生证号</th>\n<th style=\"text-align:left\">学生证办理时间</th>\n<th style=\"text-align:left\">借书证名称</th>\n<th style=\"text-align:left\">借书证号</th>\n<th style=\"text-align:left\">借书证办理时间</th>\n</tr>\n</thead>\n</table></div></div><p>改成 2 张表如下<br>\n学生证表</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">学生证</th>\n<th style=\"text-align:left\">学生证号</th>\n<th style=\"text-align:left\">学生证办理时间</th>\n</tr>\n</thead>\n</table></div></div><p>借书证表</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">借书证</th>\n<th style=\"text-align:left\">借书证号</th>\n<th style=\"text-align:left\">借书证把你拉时间</th>\n</tr>\n</thead>\n</table></div></div><h2 id=\"第三范式:-冗余性\">第三范式: 冗余性<a title=\"#第三范式:-冗余性\" href=\"#第三范式:-冗余性\"></a></h2>\n<p>要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖<br>\neg:爸爸资料表，不满足第三范式</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">爸爸</th>\n<th style=\"text-align:left\">儿子</th>\n<th style=\"text-align:left\">女儿</th>\n<th style=\"text-align:left\">女儿的小熊</th>\n<th style=\"text-align:left\">女儿的海绵宝宝</th>\n</tr>\n</thead>\n</table></div></div><p>改成<br>\n爸爸信息表：</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">爸爸</th>\n<th style=\"text-align:left\">儿子</th>\n<th style=\"text-align:left\">女儿</th>\n</tr>\n</thead>\n</table></div></div><p>女儿信息表</p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">女儿</th>\n<th style=\"text-align:left\">女儿的小熊</th>\n<th style=\"text-align:left\">女儿的海绵宝宝</th>\n</tr>\n</thead>\n</table></div></div><p><strong>一对一设计，有两种设计方案:</strong><br>\n<strong>第一种设计方案：主键共享</strong><br>\n<strong>第二种设计方案：外键唯一</strong></p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/ce37t7/\">LeetCode 数据库</a></li><li><a href=\"https://vel.life/P2P%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/\">P2P系统后端设计</a></li></ul></div>","prev":{"title":"LeetCode 数据库","link":"ce37t7"},"next":{"title":"换了一个评论系统","link":"yn4ex1"},"plink":"https://mvbbb.github.io/zwggs9/","toc":[{"id":"mysql-命令","title":"MySQL 命令","index":"1"},{"id":"基本-select","title":"基本 SELECT","index":"2"},{"id":"排序-order-by","title":"排序 ORDER BY","index":"3"},{"id":"分组/聚合函数","title":"分组&#x2F;聚合函数","index":"4"},{"id":"分组查询","title":"分组查询","index":"5"},{"id":"连接查询-join","title":"连接查询 JOIN","index":"6"},{"id":"union-并集","title":"UNION 并集","index":"7"},{"id":"limit-的使用","title":"LIMIT 的使用","index":"8"},{"id":"表","title":"表","index":"9","children":[{"id":"创建表","title":"创建表","index":"9.1"},{"id":"增/删/改-ddl","title":"增&#x2F;删&#x2F;改 DDL","index":"9.2"},{"id":"增/删/改-dml","title":"增&#x2F;删&#x2F;改 DML","index":"9.3"},{"id":"创建表加入约束","title":"创建表加入约束","index":"9.4"}]},{"id":"mysql-函数","title":"MySQL 函数","index":"10","children":[{"id":"数字函数","title":"数字函数","index":"10.1"},{"id":"日期函数","title":"日期函数","index":"10.2"},{"id":"字符函数","title":"字符函数","index":"10.3"},{"id":"条件函数","title":"条件函数","index":"10.4"}]},{"id":"事务-tcl","title":"事务 TCL","index":"11","children":[{"id":"关于事务","title":"关于事务","index":"11.1"},{"id":"并发过程中存在的问题","title":"并发过程中存在的问题","index":"11.2"},{"id":"关于隔离级别","title":"关于隔离级别","index":"11.3"},{"id":"设置隔离级别","title":"设置隔离级别","index":"11.4"}]},{"id":"索引","title":"索引","index":"12"},{"id":"视图","title":"视图","index":"13"},{"id":"数据库设计三范式","title":"数据库设计三范式","index":"14","children":[{"id":"第一范式:-原子性","title":"第一范式: 原子性","index":"14.1"},{"id":"第二范式:-唯一性","title":"第二范式: 唯一性","index":"14.2"},{"id":"第三范式:-冗余性","title":"第三范式: 冗余性","index":"14.3"}]},{"id":"推荐文章","title":"推荐文章","index":"15"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/zwggs9/\" title=\"MySQL 基础\">https://mvbbb.github.io/zwggs9/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}