{"title":"Leetbook 初级算法","date":"2020-08-04T16:02:36.000Z","date_formatted":{"ll":"Aug 4, 2020","L":"08/04/2020","MM-DD":"08-04"},"link":"gggq6t","comments":true,"tags":["动态规划","树","算法","递归"],"categories":["数据结构与算法","算法"],"updated":"2021-02-03T04:21:01.237Z","content":"<p><a href=\"https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/</a><br>\n算法很重要,算法很重要,算法很重要</p>\n<a id=\"more\"></a>\n<h1 id=\"数组\">数组<a title=\"#数组\" href=\"#数组\"></a></h1>\n<p>边界条件控制最关键</p>\n<h2 id=\"删除排序数组中的重复项\">删除排序数组中的重复项<a title=\"#删除排序数组中的重复项\" href=\"#删除排序数组中的重复项\"></a></h2>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shuang-zhi-zhen-shan-chu-zhong-fu-xiang-by-t9qx90n/\" target=\"_blank\" rel=\"external nofollow noopener\">删除排序数组中的重复项</a></p>\n</blockquote>\n<p>双指针:<br>\np 用于指向当前元素<br>\nq 用于指向下一个与当前元素相异的值.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeDuplicates</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums==<span class=\"keyword\">null</span>||nums.length==<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>,q=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q&lt;nums.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[p]!=nums[q])&#123;<span class=\"comment\">//探测位的值与当前值不同, 将当前值的下一位改为探测位的值. 当前指针前移</span></span><br><span class=\"line\">                nums[p+<span class=\"number\">1</span>]=nums[q];</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            q++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们只需要移动相异的元素到当前值的后面, 不需要考虑与当前元素相同的值. 相同的值会被后来扫描到的相异的值所覆盖.<br>\np 移动的次数+1 就是相异元素的个数.</p>\n<h2 id=\"买卖股票的最佳时机-ⅱ\">买卖股票的最佳时机 Ⅱ<a title=\"#买卖股票的最佳时机-ⅱ\" href=\"#买卖股票的最佳时机-ⅱ\"></a></h2>\n<p>一看这题目就不简单</p>\n<h3 id=\"暴力\">暴力<a title=\"#暴力\" href=\"#暴力\"></a></h3>\n<h2 id=\"旋转数组\">旋转数组<a title=\"#旋转数组\" href=\"#旋转数组\"></a></h2>\n<h3 id=\"解法一:-朴素解法\">解法一: 朴素解法<a title=\"#解法一:-朴素解法\" href=\"#解法一:-朴素解法\"></a></h3>\n<p>每次把每个元素向右移动一位, 执行 k 次. 提前保存最后一位元素, 因为会被覆盖, 将其覆盖第一位元素.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k=k%nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=k;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=nums[nums.length-<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=nums.length-<span class=\"number\">2</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">                nums[j+<span class=\"number\">1</span>]=nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums[<span class=\"number\">0</span>]=temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 $O(n*k)$<br>\n空间复杂度 $O(1)$</p>\n<h3 id=\"解法二:-使用环状替换\">解法二: 使用环状替换<a title=\"#解法二:-使用环状替换\" href=\"#解法二:-使用环状替换\"></a></h3>\n<h3 id=\"解法三:-使用反转\">解法三: 使用反转<a title=\"#解法三:-使用反转\" href=\"#解法三:-使用反转\"></a></h3>\n<blockquote>\n<p>这个方法基于这个事实：当我们旋转数组 k 次， k%n 个尾部元素会被移动到头部，剩下的元素会被向后移动。<br>\n在这个方法中，我们首先将所有元素反转。然后反转前 k 个元素，再反转后面 n-k 个元素，就能得到想要的结果。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        k=k%nums.length;</span><br><span class=\"line\">       <span class=\"comment\">//前 n-k 逆序</span></span><br><span class=\"line\">        reverse(nums, <span class=\"number\">0</span>, nums.length-k-<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//后 k 逆序</span></span><br><span class=\"line\">       reverse(nums,nums.length-k,nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//全部逆序</span></span><br><span class=\"line\">       reverse(nums, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums,<span class=\"keyword\">int</span> begin,<span class=\"keyword\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(begin&lt;end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=nums[begin];</span><br><span class=\"line\">            nums[begin]=nums[end];</span><br><span class=\"line\">            nums[end]=temp;</span><br><span class=\"line\">            begin++;</span><br><span class=\"line\">            end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存在重复元素\">存在重复元素<a title=\"#存在重复元素\" href=\"#存在重复元素\"></a></h2>\n<p>我的思路: 使用 HashSet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">containsDuplicate</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        HashSet&lt;Integer&gt; st=<span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i:nums)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(st.contains(i))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                st.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        Solution s=<span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        System.out.println(s.containsDuplicate(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度和空间复杂度均为 $O(n)$<br>\n还有一种思路: 先对数组排序, 之后判断两两元素是否相同. 时间复杂度取决于排序算法</p>\n<h2 id=\"只出现一次的数字\">只出现一次的数字<a title=\"#只出现一次的数字\" href=\"#只出现一次的数字\"></a></h2>\n<p>题目要求时间复杂度为线性, 并且不使用额外的空间. 排除使用 Hash 表和排序算法. 肯定有捷径<br>\n使用异或运算: <img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596668705803-7518ce50-a7dc-4aee-b8bc-e742ede144ec.png#align=left&amp;display=inline&amp;height=332&amp;margin=%5Bobject%20Object%5D&amp;originHeight=332&amp;originWidth=954&amp;size=0&amp;status=done&amp;style=none&amp;width=954\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">singleNumber</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> single = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : nums) &#123;</span><br><span class=\"line\">            single ^= num;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> single;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两个数组的交集-ⅱ\">两个数组的交集 Ⅱ<a title=\"#两个数组的交集-ⅱ\" href=\"#两个数组的交集-ⅱ\"></a></h2>\n<p>先对数组进行排序, 之后使用两个指针. 把这两个指针当作同等地位</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] intersect(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2) &#123;</span><br><span class=\"line\">        Arrays.sort(nums1);</span><br><span class=\"line\">        Arrays.sort(nums2);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] intersection=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [Math.min(nums1.length,nums2.length)];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>; <span class=\"comment\">//交集集合指针</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index1=<span class=\"number\">0</span>,index2=<span class=\"number\">0</span>;<span class=\"comment\">//两个数组的指针</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index1&lt;nums1.length&amp;&amp;index2&lt;nums2.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums1[index1]&lt;nums2[index2])</span><br><span class=\"line\">                index1++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[index1]==nums2[index2])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    intersection[index++]=nums1[index1];</span><br><span class=\"line\">                    index1++;index2++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                index2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.copyOfRange(intersection, <span class=\"number\">0</span>, index)          ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]s)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Arrays.toString(<span class=\"keyword\">new</span> Solution().intersect(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;, <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"加一\">加一<a title=\"#加一\" href=\"#加一\"></a></h2>\n<p>第一想到的是使用递归, 不过之后改成了遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> carry=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits==<span class=\"keyword\">null</span>||digits.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=digits.length-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(carry==<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp=digits[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(temp&lt;<span class=\"number\">10</span>)</span><br><span class=\"line\">                    carry=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                digits[i]=temp%<span class=\"number\">10</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>&amp;&amp;carry==<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> [] res=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">                    res[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                    System.arraycopy(digits, <span class=\"number\">0</span>, res, <span class=\"number\">1</span>, digits.length);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]s)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Arrays.toString(<span class=\"keyword\">new</span> Solution().plusOne(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;</span><br><span class=\"line\">            <span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span></span><br><span class=\"line\">        &#125;)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>题目并不是很难, 只要是理清其中的逻辑关系<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597157416562-41ba9d02-c98a-46d1-94e1-32bb762a9e4b.png#align=left&amp;display=inline&amp;height=187&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=373&amp;originWidth=1053&amp;size=32714&amp;status=done&amp;style=none&amp;width=526.5\" alt=\"image.png\"><br>\n我的代码还是太臃肿了. 可以说是逻辑混乱的写法. 更加优秀的思路</p>\n<ol>\n<li>判断是否需要进位不需要一个标志位 carry , 直接判断被加一后的位置的元素是否为 0 , 如果为 0 , 证明需要进位</li>\n<li>假如不是为 0 , 说明不需要进位, **可以直接 return digits **了</li>\n<li>一些特殊情况就是当出现 9999、999999 之类的数字时，循环到最后也需要进位，出现这种情况时需要手动将它进一位</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] plusOne(<span class=\"keyword\">int</span>[] digits) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = digits.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            digits[i]++;</span><br><span class=\"line\">            digits[i] = digits[i] % <span class=\"number\">10</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (digits[i] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 这里是最tm离谱的. 例如 99 进位变成 00, 数组默认初始化恰好为 00</span></span><br><span class=\"line\">        digits = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[digits.length + <span class=\"number\">1</span>];</span><br><span class=\"line\">        digits[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移动零\">移动零<a title=\"#移动零\" href=\"#移动零\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">moveZeroes</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> zeroCnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[i]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">                nums[i-zeroCnt]=nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                zeroCnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=zeroCnt;i++)&#123;</span><br><span class=\"line\">            nums[nums.length-<span class=\"number\">1</span>-i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]a)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> [] nums=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        Solution s=<span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        s.moveZeroes(nums);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"两数之和\">两数之和<a title=\"#两数之和\" href=\"#两数之和\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] twoSum(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        HashMap&lt;Integer,Integer&gt; hMap=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hMap.containsKey(target-nums[i]))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;hMap.get(target-nums[i]),i&#125;;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                hMap.put(nums[i], i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"有效的数独\">有效的数独<a title=\"#有效的数独\" href=\"#有效的数独\"></a></h2>\n<p>其实想要做出这道题应该还是不能, 就是效率不怎么高: 只要我的方法足够蠢，这题就难不住我（泪目<br>\n对于 3*3 宫格的问题, 我们可以将不同区块映射到二维数组的不同行, 区块内的映射到该行的不同列, 同行的一列出现了重复现象就 <code>return false</code>. 问题归结到怎样将不同区块映射到不同行, 经过观察 box_index = (row / 3) * 3 + columns / 3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidSudoku</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] board)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> [][] row=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">9</span>][<span class=\"number\">9</span>];</span><br><span class=\"line\">     <span class=\"keyword\">int</span>[][]col=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">9</span>][<span class=\"number\">9</span>];</span><br><span class=\"line\">     <span class=\"keyword\">int</span>[][] boxs=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">9</span>][<span class=\"number\">9</span>];</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=<span class=\"number\">9</span>;i++)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(board[i][j]!=<span class=\"string\">&#x27;.&#x27;</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> num=board[i][j]-<span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">int</span> box_index = (i / <span class=\"number\">3</span>) * <span class=\"number\">3</span> + j / <span class=\"number\">3</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(row[i][num]==<span class=\"number\">0</span>&amp;&amp;col[num][j]==<span class=\"number\">0</span>&amp;&amp;boxs[box_index][num]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                     &#123;</span><br><span class=\"line\">                         row[i][num]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                         col[num][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                         boxs[box_index][num]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                     &#125;</span><br><span class=\"line\">                 <span class=\"keyword\">else</span></span><br><span class=\"line\">                     <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"旋转图像\">旋转图像<a title=\"#旋转图像\" href=\"#旋转图像\"></a></h2>\n<p>延主对角线反转一次, 之后延横向中心线反转一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l=matrix.length;</span><br><span class=\"line\">        <span class=\"comment\">//延主对角线反转一次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=l;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp=matrix[i][j];</span><br><span class=\"line\">                matrix[i][j]=matrix[j][i];</span><br><span class=\"line\">                matrix[j][i]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//延横向中心线反转一次</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;l/<span class=\"number\">2</span>;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = matrix[i][j];</span><br><span class=\"line\">            matrix[i][j] = matrix[i][l - j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            matrix[i][l - j - <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串\">字符串<a title=\"#字符串\" href=\"#字符串\"></a></h1>\n<h2 id=\"反转字符串\">反转字符串<a title=\"#反转字符串\" href=\"#反转字符串\"></a></h2>\n<p>过于简单了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">reverseString</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> begin=<span class=\"number\">0</span>,end=s.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(begin&lt;end)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> temp=s[begin];</span><br><span class=\"line\">            s[begin]=s[end];</span><br><span class=\"line\">            s[end]=temp;</span><br><span class=\"line\">            begin++;end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整数反转\">整数反转<a title=\"#整数反转\" href=\"#整数反转\"></a></h2>\n<p>虽然说看起来比较简单, 但是题目中要求了整数溢出返回 0 , 这就比较伤脑筋了.</p>\n<p>别人简洁的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            n = n*<span class=\"number\">10</span> + x%<span class=\"number\">10</span>;</span><br><span class=\"line\">            x = x/<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)n==n? (<span class=\"keyword\">int</span>)n:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串中第一个唯一字符\">字符串中第一个唯一字符<a title=\"#字符串中第一个唯一字符\" href=\"#字符串中第一个唯一字符\"></a></h2>\n<p>我的第一种解法: 思路是使用 HashMap 记录字符和他出现的频次, 之后遍历字符串中的字符, 看 Map 里面频次为 1 则 return</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">firstUniqChar</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        HashMap&lt;Character,Integer&gt;mp=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c = s.charAt(i);</span><br><span class=\"line\">            mp.put(c, mp.getOrDefault(c, <span class=\"number\">0</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">//如果map中含有指定的key，就返回该key对应的value，否则使用该方法的第二个参数作为默认值返回</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp.get(s.charAt(i))==<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596668705876-475cdb72-fe72-4227-a1e6-5499c1062389.png#align=left&amp;display=inline&amp;height=313&amp;margin=%5Bobject%20Object%5D&amp;originHeight=313&amp;originWidth=1065&amp;size=0&amp;status=done&amp;style=none&amp;width=1065\" alt=\"\" class=\"φcx\"></p>\n<p>效率不够高</p>\n<p>时间复杂度 $O(n)$: 只遍历了两遍字符串，同时散列表中查找操作是常数时间复杂度的。</p>\n<p>空间复杂度 $O(n)$</p>\n<h2 id=\"有效的字母异位词\">有效的字母异位词<a title=\"#有效的字母异位词\" href=\"#有效的字母异位词\"></a></h2>\n<p>过于简单</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAnagram</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] sarray=s.toCharArray();</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] tarray=t.toCharArray();</span><br><span class=\"line\">        Arrays.sort(sarray);</span><br><span class=\"line\">        Arrays.sort(tarray);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Arrays.equals(sarray, tarray);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]s)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().isAnagram(<span class=\"string\">&quot;rat&quot;</span>, <span class=\"string\">&quot;cart&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有更简单的解法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isAnagram</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()!=t.length())<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> []counter=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">            counter[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">            counter[t.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i:counter)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证回文串\">验证回文串<a title=\"#验证回文串\" href=\"#验证回文串\"></a></h2>\n<p>使用常规思路还是很容易做出来的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">      public boolean isPalindrome(String s) &#123;</span><br><span class=\"line\">        s&#x3D;s.toLowerCase();</span><br><span class=\"line\">        char[] s1&#x3D;new char[s.length()];</span><br><span class=\"line\">        int index&#x3D;0;</span><br><span class=\"line\">        for(int i&#x3D;0;i!&#x3D;s.length();i++)&#123;</span><br><span class=\"line\">            char c&#x3D;s.charAt(i);</span><br><span class=\"line\">            if((c&gt;&#x3D;&#39;a&#39;&amp;&amp;c&lt;&#x3D;&#39;z&#39;)||(c&gt;&#x3D;&#39;0&#39;&amp;&amp;c&lt;&#x3D;&#39;9&#39;)||(c&gt;&#x3D;&#39;A&#39;&amp;&amp;c&lt;&#x3D;&#39;Z&#39;))</span><br><span class=\"line\">            s1[index++]&#x3D;c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int begin&#x3D;0,end&#x3D;index-1;</span><br><span class=\"line\">        while(begin&lt;end)&#123;</span><br><span class=\"line\">            if(s1[begin]!&#x3D;s1[end])</span><br><span class=\"line\">               return false;</span><br><span class=\"line\">               begin++;end--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度和空间复杂度为 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"></p>\n<p>更好的解决方法是直接使用双指针</p>\n<h2 id=\"字符串转换整数-(atoi)\">字符串转换整数 (atoi)<a title=\"#字符串转换整数-(atoi)\" href=\"#字符串转换整数-(atoi)\"></a></h2>\n<h3 id=\"解法一-朴素解法\">解法一 朴素解法<a title=\"#解法一-朴素解法\" href=\"#解法一-朴素解法\"></a></h3>\n<p>这道题完全简直了, 被溢出折磨的不行了. 提交五次终于过了<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596905911366-cfdf71f2-60eb-4e5d-88da-bec5008444d6.png#align=left&amp;display=inline&amp;height=198&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=396&amp;originWidth=1066&amp;size=34502&amp;status=done&amp;style=none&amp;width=533\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>  res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;str.length()&amp;&amp;str.charAt(i)==<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==str.length())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">&#x27;-&#x27;</span>)&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;str.length()&amp;&amp;str.charAt(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;str.charAt(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=str.charAt(i)-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res&gt;(Integer.MAX_VALUE-x)/<span class=\"number\">10</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Integer.MIN_VALUE;</span><br><span class=\"line\">                res=res*<span class=\"number\">10</span>+x;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res=-res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str.charAt(i)==<span class=\"string\">&#x27;+&#x27;</span>)&#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;str.length()&amp;&amp;str.charAt(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;str.charAt(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=str.charAt(i)-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res&gt;(Integer.MAX_VALUE-x)/<span class=\"number\">10</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                res=res*<span class=\"number\">10</span>+x;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((str.charAt(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str.charAt(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(i&lt;str.length()&amp;&amp;str.charAt(i)&lt;=<span class=\"string\">&#x27;9&#x27;</span>&amp;&amp;str.charAt(i)&gt;=<span class=\"string\">&#x27;0&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=str.charAt(i)-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(res&gt;(Integer.MAX_VALUE-x)/<span class=\"number\">10</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">                res=res*<span class=\"number\">10</span>+x;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>((str.charAt(i)&lt;<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;str.charAt(i)&gt;<span class=\"string\">&#x27;9&#x27;</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []s)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().myAtoi(<span class=\"string\">&quot;-91283472332&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码有很多精简空间, 不过算了吧</p>\n<h3 id=\"解法二-自动机\">解法二 自动机<a title=\"#解法二-自动机\" href=\"#解法二-自动机\"></a></h3>\n<p><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/string-to-integer-atoi/solution/zi-fu-chuan-zhuan-huan-zheng-shu-atoi-by-leetcode-/</a></p>\n<h2 id=\"实现-strstr()\">实现 strStr()<a title=\"#实现-strstr()\" href=\"#实现-strstr()\"></a></h2>\n<h3 id=\"双指针解法\">双指针解法<a title=\"#双指针解法\" href=\"#双指针解法\"></a></h3>\n<h3 id=\"kmp-算法\">KMP 算法<a title=\"#kmp-算法\" href=\"#kmp-算法\"></a></h3>\n<p>后补, 这个有点难</p>\n<h2 id=\"最长公共前缀\">最长公共前缀<a title=\"#最长公共前缀\" href=\"#最长公共前缀\"></a></h2>\n<h3 id=\"方法一-常规思路\">方法一 常规思路<a title=\"#方法一-常规思路\" href=\"#方法一-常规思路\"></a></h3>\n<p>效率偏低<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596988660836-6f20a224-b5fa-4090-bc11-863d1f19af62.png#align=left&amp;display=inline&amp;height=199&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=397&amp;originWidth=1063&amp;size=34173&amp;status=done&amp;style=none&amp;width=531.5\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        String pattern=strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; alt=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=strs.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(index&lt;pattern.length()&amp;&amp;index&lt;strs[i].length()&amp;&amp;pattern.charAt(index)==strs[i].charAt(index))</span><br><span class=\"line\">                index++;</span><br><span class=\"line\">            alt.add(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        alt.sort(Integer::compareTo);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_index=alt.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>,min_index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []a)</span></span>&#123;</span><br><span class=\"line\">        String[] arr=<span class=\"keyword\">new</span> String[]&#123;&#125;;</span><br><span class=\"line\">        String s=<span class=\"keyword\">new</span> Solution().longestCommonPrefix(arr);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度  <img src=\"https://cdn.nlark.com/yuque/__latex/f168ecb8ea82616ea66627b6dcc574fc.svg#card=math&amp;code=O%28nm%29%20&amp;height=20&amp;width=50\" alt=\"\"> n 是字符串数量, m 是字符串平均长度</p>\n<h3 id=\"方法二-先排序-比较头尾\">方法二 先排序 比较头尾<a title=\"#方法二-先排序-比较头尾\" href=\"#方法二-先排序-比较头尾\"></a></h3>\n<p>这个思路还是比较妙的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(strs);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">1</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index&lt;strs[<span class=\"number\">0</span>].length()&amp;&amp;index&lt;strs[strs.length - <span class=\"number\">1</span>].length()&amp;&amp;strs[<span class=\"number\">0</span>].charAt(index)==strs[strs.length - <span class=\"number\">1</span>].charAt(index))</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>,index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []a)</span></span>&#123;</span><br><span class=\"line\">        String[] arr=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;flower&quot;</span>,<span class=\"string\">&quot;flow&quot;</span>,<span class=\"string\">&quot;flight&quot;</span>&#125;;</span><br><span class=\"line\">        String s=<span class=\"keyword\">new</span> Solution().longestCommonPrefix(arr);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度<img src=\"https://cdn.nlark.com/yuque/__latex/d344075a2c690847a757434e9e7fa128.svg#card=math&amp;code=O%28nlogn%29&amp;height=20&amp;width=67\" alt=\"\">  实际上就是 sort 的时间复杂度<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596989288007-78113ce8-441c-4e68-906e-43dc8b4d5cae.png#align=left&amp;display=inline&amp;height=202&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=403&amp;originWidth=1074&amp;size=34185&amp;status=done&amp;style=none&amp;width=537\" alt=\"image.png\"></p>\n<h3 id=\"方法三-水平扫描法\">方法三 水平扫描法<a title=\"#方法三-水平扫描法\" href=\"#方法三-水平扫描法\"></a></h3>\n<p>比较第一个字符串与第二个字符串, 得到他们的公共前缀, 将该公共前缀与第三个字符串作比较, repeat. 最后得到全部字符串的公共前缀.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        String prefix=strs[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=strs.length;i++)&#123;</span><br><span class=\"line\">            prefix=findPublic(prefix,strs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prefix;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findPublic</span><span class=\"params\">(String s1,String s2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=Math.min(s1.length(),s2.length());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index&lt;length&amp;&amp;s1.charAt(index)==s2.charAt(index))</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s1.substring(<span class=\"number\">0</span>,index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []a)</span></span>&#123;</span><br><span class=\"line\">        String[] arr=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;flower&quot;</span>&#125;;</span><br><span class=\"line\">        String s=<span class=\"keyword\">new</span> Solution().longestCommonPrefix(arr);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/f168ecb8ea82616ea66627b6dcc574fc.svg#card=math&amp;code=O%28nm%29%20&amp;height=20&amp;width=50\" alt=\"\"> n 是字符串数量, m 是字符串平均长度</p>\n<h3 id=\"方法四-二分分治法\">方法四 二分分治法<a title=\"#方法四-二分分治法\" href=\"#方法四-二分分治法\"></a></h3>\n<p>这种问题可以转换为分治思路.<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596990557505-da804a01-fefd-40d1-ad40-17b5dc9a70b4.png#align=left&amp;display=inline&amp;height=357&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1193&amp;originWidth=1920&amp;size=0&amp;status=done&amp;style=none&amp;width=574\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(strs.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> hepler(strs,<span class=\"number\">0</span>,strs.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hepler</span><span class=\"params\">(String[] strs,<span class=\"keyword\">int</span> begin,<span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(begin &gt;= end)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strs[begin];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(begin+end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        String lcpLeft=hepler(strs,begin,mid);</span><br><span class=\"line\">        String lcpRight=hepler(strs,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findPublic(lcpLeft, lcpRight);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">findPublic</span><span class=\"params\">(String s1,String s2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=Math.min(s1.length(),s2.length());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(index&lt;length&amp;&amp;s1.charAt(index)==s2.charAt(index))</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s1.substring(<span class=\"number\">0</span>,index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String []a)</span></span>&#123;</span><br><span class=\"line\">        String[] arr=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;dog&quot;</span>,<span class=\"string\">&quot;racecar&quot;</span>,<span class=\"string\">&quot;car&quot;</span>&#125;;</span><br><span class=\"line\">        String s=<span class=\"keyword\">new</span> Solution().longestCommonPrefix(arr);</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/f168ecb8ea82616ea66627b6dcc574fc.svg#card=math&amp;code=O%28nm%29&amp;height=20&amp;width=50\" alt=\"\"> .   空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/ce3cf3ffca5b9610e7be98b7c53a927c.svg#card=math&amp;code=O%28mlogn%29&amp;height=20&amp;width=72\" alt=\"\"> m 是字符串的平均长度, n 是字符串的数量, 空间复杂度主要取决于递归调用的层数, 层数最大为 <img src=\"https://cdn.nlark.com/yuque/__latex/94439105eb9164910f9c4dea9be17378.svg#card=math&amp;code=logn&amp;height=18&amp;width=31\" alt=\"\">，每层需要 m 的空间存储返回结果。</p>\n<h3 id=\"方法五-二分查找\">方法五 二分查找<a title=\"#方法五-二分查找\" href=\"#方法五-二分查找\"></a></h3>\n<p>选择最短字符串, 公共前缀一定包含于最短字符串<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597021995329-809950b3-fbdb-4730-ada7-214b3dfd268b.png#align=left&amp;display=inline&amp;height=370&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1440&amp;originWidth=1920&amp;size=0&amp;status=done&amp;style=none&amp;width=493\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strs == <span class=\"keyword\">null</span> || strs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minLength = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String str : strs) &#123;</span><br><span class=\"line\">            minLength = Math.min(minLength, str.length());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = minLength;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (high - low + <span class=\"number\">1</span>) / <span class=\"number\">2</span> + low;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCommonPrefix(strs, mid)) &#123;</span><br><span class=\"line\">                low = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, low);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isCommonPrefix</span><span class=\"params\">(String[] strs, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">        String str0 = strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, length);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = strs.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            String str = strs[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (str0.charAt(j) != str.charAt(j)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/13aaec71f438aadf1936156fa5bd06dd.svg#card=math&amp;code=O%28mnlogm%29&amp;height=20&amp;width=86\" alt=\"\"> , 其中  m  是字符串数组中的字符串的最小长度，n  是字符串的数量。二分查找的迭代执行次数是  <em>O</em>(log<em>m</em>)，每次迭代最多需要比较  mn  个字符.<br>\n空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/5e079a28737d5dd019a3b8f6133ee55e.svg#card=math&amp;code=O%281%29&amp;height=20&amp;width=34\" alt=\"\"></p>\n<h1 id=\"链表\">链表<a title=\"#链表\" href=\"#链表\"></a></h1>\n<h2 id=\"删除链表中的节点\">删除链表中的节点<a title=\"#删除链表中的节点\" href=\"#删除链表中的节点\"></a></h2>\n<p>非常规数据结构解法, 将所有数 copy 过来, 而不是对指针指向操作. 相当奇葩!</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">        ListNode p=node;</span><br><span class=\"line\">        ListNode pre=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p.val=p.next.val;</span><br><span class=\"line\">            pre=p;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pre.next=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看了官方的解答, 没想到还有更简单的解法. 有点妙</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">    node.val = node.next.val;</span><br><span class=\"line\">    node.next = node.next.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除链表的倒数第-n-个节点\">删除链表的倒数第 N 个节点<a title=\"#删除链表的倒数第-n-个节点\" href=\"#删除链表的倒数第-n-个节点\"></a></h2>\n<h3 id=\"方法一-使用额外的空间来存储节点\">方法一 使用额外的空间来存储节点<a title=\"#方法一-使用额外的空间来存储节点\" href=\"#方法一-使用额外的空间来存储节点\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ArrayList&lt;ListNode&gt; alt=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        ListNode p=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            alt.add(p);</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(alt.size()!=n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp=alt.get(alt.size()-n-<span class=\"number\">1</span>);</span><br><span class=\"line\">            temp.next=temp.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>效率不是太高 时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\">  空间复杂度<img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596853146125-6eb13c37-6b66-4deb-888e-d0818234a29c.png#align=left&amp;display=inline&amp;height=189&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=378&amp;originWidth=1065&amp;size=33652&amp;status=done&amp;style=none&amp;width=532.5\" alt=\"image.png\"></p>\n<h3 id=\"方法二-两次遍历\">方法二 两次遍历<a title=\"#方法二-两次遍历\" href=\"#方法二-两次遍历\"></a></h3>\n<p>第一次遍历找到链表长度, 下一次遍历找到应该被删除的节点的前一个位置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找到链表长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;</span><br><span class=\"line\">        ListNode p=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">            length++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//找到需要删除的节点的上一个位置</span></span><br><span class=\"line\">        <span class=\"comment\">//被删除的节点是头节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(length==n)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> delete_pre_index=length-n-<span class=\"number\">1</span>;</span><br><span class=\"line\">            p=head;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=delete_pre_index;i++)&#123;</span><br><span class=\"line\">                p=p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p.next=p.next.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\">  空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/5e079a28737d5dd019a3b8f6133ee55e.svg#card=math&amp;code=O%281%29&amp;height=20&amp;width=34\" alt=\"\"></p>\n<h3 id=\"方法三-使用快慢指针一次遍历\">方法三 使用快慢指针一次遍历<a title=\"#方法三-使用快慢指针一次遍历\" href=\"#方法三-使用快慢指针一次遍历\"></a></h3>\n<p>原理: 指针 1 和 指针 2 保持 n+1 个节点的间距, 指针 1 到达链表末尾(null)时, 指针 2 所指向的节点是待删除节点的上一个节点.<br>\n为了防止出现待删除的节点是头节点的特殊情况, 我们需要增加一个哑节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummy=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dummy.next=head;</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode first=dummy;</span><br><span class=\"line\">        ListNode end=dummy;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使两个指针保持 n 个节点的间距</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=n;i++)&#123;</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将指针1指向末尾(null), 现在指针2就指向待删除的节点的上一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(first!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            first=first.next;</span><br><span class=\"line\">            end=end.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        end.next=end.next.next;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596855054598-fbfba14a-2b92-4f8a-bf0e-e324d3e6cfce.png#align=left&amp;display=inline&amp;height=191&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=381&amp;originWidth=1086&amp;size=34119&amp;status=done&amp;style=none&amp;width=543\" alt=\"image.png\" class=\"φcx\"></p>\n<h3 id=\"方法四-递归\">方法四 递归<a title=\"#方法四-递归\" href=\"#方法四-递归\"></a></h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cur=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">ListNode* <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode* head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(!head) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">       head-&gt;next = removeNthFromEnd(head-&gt;next,n);</span><br><span class=\"line\">       cur++;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(n==cur) <span class=\"keyword\">return</span> head-&gt;next;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"反转链表\">反转链表<a title=\"#反转链表\" href=\"#反转链表\"></a></h2>\n<h3 id=\"迭代\">迭代<a title=\"#迭代\" href=\"#迭代\"></a></h3>\n<p>画图就比较好解决了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ListNode dummy=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dummy.next=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head.next!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            ListNode p=head.next;</span><br><span class=\"line\">            head.next=head.next.next;</span><br><span class=\"line\">            p.next=dummy.next;</span><br><span class=\"line\">            dummy.next=p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更加简洁的代码: 双指针迭代</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">    ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    ListNode curr = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        ListNode nextTemp = curr.next;</span><br><span class=\"line\">        curr.next = prev;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = nextTemp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\">  空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/5e079a28737d5dd019a3b8f6133ee55e.svg#card=math&amp;code=O%281%29&amp;height=20&amp;width=34\" alt=\"\"></p>\n<h3 id=\"递归\">递归<a title=\"#递归\" href=\"#递归\"></a></h3>\n<p>时间复杂度和空间复杂度都是 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        ListNode p = reverseList(head.next);</span><br><span class=\"line\">        head.next.next = head;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>p 指针一直指向链表末尾, 最后作为新链表的头被返回</p>\n<h1 id=\"合并两个有序链表\">合并两个有序链表<a title=\"#合并两个有序链表\" href=\"#合并两个有序链表\"></a></h1>\n<h2 id=\"使用指针\">使用指针<a title=\"#使用指针\" href=\"#使用指针\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        ListNode head=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode p1=l1,p2=l2,p=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p1!=<span class=\"keyword\">null</span> &amp;&amp; p2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1.val&lt;=p2.val)&#123;</span><br><span class=\"line\">                p.next=p1 ;p1=p1.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                p.next=p2; p2=p2.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            p=p.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p.next=p2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p2==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            p.next=p1;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归-1\">递归<a title=\"#递归-1\" href=\"#递归-1\"></a></h2>\n<p>挺妙的</p>\n<blockquote>\n<p>其实递归就是程序内部维护了一个栈。这个题就是每次都把最小值压入栈，最后出栈的时候，将所有数连在一起就可以了。说白了，就是用一个栈维护了顺序。最后的连接，当然是小的连小的，所以 l1 小，就连到 l1,l2 小就连到 l2，最后先返回的，就是最小的头结点。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2==<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.val&lt;=l2.val)&#123;</span><br><span class=\"line\">            l1.next = mergeTwoLists(l1.next,l2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            l2.next = mergeTwoLists(l1,l2.next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"回文链表\">回文链表<a title=\"#回文链表\" href=\"#回文链表\"></a></h2>\n<p>实在是想不到空间复杂度是 <img src=\"https://cdn.nlark.com/yuque/__latex/5e079a28737d5dd019a3b8f6133ee55e.svg#card=math&amp;code=O%281%29&amp;height=20&amp;width=34\" alt=\"\">  的写法, 看题解了<br>\n快慢指针找中间位置可实在是太骚了…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果链表为空或者链表只有一个元素，那么一定返回true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        ListNode p = head, q = head, pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//循环结束后p指向(int)(n/2)号节点，n为链表长度，索引从0开始</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q != <span class=\"keyword\">null</span> &amp;&amp; q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            q = q.next.next;<span class=\"comment\">//q每次向后移动两个位置</span></span><br><span class=\"line\">            ListNode temp = p.next;<span class=\"comment\">//临时记录下p的后继节点</span></span><br><span class=\"line\">            p.next = pre;<span class=\"comment\">//p的next指针反向</span></span><br><span class=\"line\">            pre = p;<span class=\"comment\">//移动pre</span></span><br><span class=\"line\">            p = temp;<span class=\"comment\">//移动p</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q != <span class=\"keyword\">null</span>) <span class=\"comment\">//链表长度为奇数，此时pre指向(int)(n/2)-1号元素，p指向(int)(n/2)号元素</span></span><br><span class=\"line\">            p = p.next;<span class=\"comment\">//p向后移动一位</span></span><br><span class=\"line\">        <span class=\"comment\">//判断是否回文</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span> &amp;&amp; pre != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.val != pre.val)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"树\">树<a title=\"#树\" href=\"#树\"></a></h1>\n<h2 id=\"二叉树的最大深度\">二叉树的最大深度<a title=\"#二叉树的最大深度\" href=\"#二叉树的最大深度\"></a></h2>\n<p>常规题目</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left=maxDepth(root.left);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right=maxDepth(root.right);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (left&gt;right?left:right)+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证二叉搜索树\">验证二叉搜索树<a title=\"#验证二叉搜索树\" href=\"#验证二叉搜索树\"></a></h2>\n<p>常规题目<br>\n二叉搜索树的特点: 中序遍历序列为递增</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidBST</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        Stack&lt;TreeNode&gt; st = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        Boolean is=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        TreeNode p=root;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> pre=Long.MIN_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"keyword\">null</span>||!st.empty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                st.push(p);</span><br><span class=\"line\">                p=p.left;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                p=st.pop();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p.val&lt;=pre)is=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                pre=p.val;</span><br><span class=\"line\">                p=p.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> is;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>中序遍历取得每一个值, 比较他与上一个值的大小, 因为搜索树的中序遍历是递增的, 所以每一次取得的值都要比上一次的值要大.</p>\n<h2 id=\"二叉树的层序遍历\">二叉树的层序遍历<a title=\"#二叉树的层序遍历\" href=\"#二叉树的层序遍历\"></a></h2>\n<p>还是比较简单的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class=\"line\">        Queue&lt;TreeNode&gt; qu=<span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        TreeNode p=root;</span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; res=<span class=\"keyword\">new</span> ArrayList&lt;&gt; ();</span><br><span class=\"line\">        qu.add(p);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=<span class=\"keyword\">null</span>&amp;&amp;!qu.isEmpty())&#123;</span><br><span class=\"line\">            List&lt;Integer&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt; ();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> size=qu.size();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=size;i++)&#123;</span><br><span class=\"line\">                p=qu.peek();qu.poll();</span><br><span class=\"line\">                list.add(p.val);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p.left!=<span class=\"keyword\">null</span>) qu.add(p.left);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p.right!=<span class=\"keyword\">null</span>) qu.add(p.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            res.add(list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"将有序数组转换为二叉搜索树\">将有序数组转换为二叉搜索树<a title=\"#将有序数组转换为二叉搜索树\" href=\"#将有序数组转换为二叉搜索树\"></a></h2>\n<p>典型的二分法问题, 递归建立一颗树<br>\n还是挺简单的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">sortedArrayToBST</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> helper(nums, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TreeNode <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> nums[],<span class=\"keyword\">int</span> begin, <span class=\"keyword\">int</span> end)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(begin&gt;end)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(begin+end)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        TreeNode root=<span class=\"keyword\">new</span> TreeNode(nums[mid]);</span><br><span class=\"line\">        root.left=helper(nums,begin,mid-<span class=\"number\">1</span>);</span><br><span class=\"line\">        root.right=helper(nums,mid+<span class=\"number\">1</span>,end);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"排序和搜索\">排序和搜索<a title=\"#排序和搜索\" href=\"#排序和搜索\"></a></h1>\n<h2 id=\"合并两个有序的数组\">合并两个有序的数组<a title=\"#合并两个有序的数组\" href=\"#合并两个有序的数组\"></a></h2>\n<p>不会有人想使用 Arrays.sort() 吧, 不会吧 🤣<br>\n双指针问题<br>\n可以使用额外的空间来临时保存 nums1 的数据, 空间换时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span>[] nums2, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> []arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+n];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>,q=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p&lt;m&amp;&amp;q&lt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums1[p]&lt;nums2[q])&#123;</span><br><span class=\"line\">                arr[index++]=nums1[p];</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                arr[index++]=nums2[q];</span><br><span class=\"line\">                q++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p!=m)&#123;</span><br><span class=\"line\">            arr[index++]=nums1[p++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q!=n)&#123;</span><br><span class=\"line\">            arr[index++]=nums2[q++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.arraycopy(arr, <span class=\"number\">0</span>, nums1, <span class=\"number\">0</span>, m+n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1596668705821-d43545c7-3213-4dfc-aee0-c389ac961996.png#align=left&amp;display=inline&amp;height=387&amp;margin=%5Bobject%20Object%5D&amp;originHeight=387&amp;originWidth=1068&amp;size=0&amp;status=done&amp;style=none&amp;width=1068\" alt=\"\"><br>\n<a href=\"https://leetcode-cn.com/problems/merge-sorted-array/solution/88-by-ikaruga/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/merge-sorted-array/solution/88-by-ikaruga/</a></p>\n<h1 id=\"动态规划\">动态规划<a title=\"#动态规划\" href=\"#动态规划\"></a></h1>\n<p>见 <a href=\"https://www.yzh.im/%E7%AE%80%E5%8D%95%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/?t=1597541181112\" target=\"_blank\" rel=\"external nofollow noopener\">简单动态规划</a></p>\n<h1 id=\"其他\">其他<a title=\"#其他\" href=\"#其他\"></a></h1>\n<h2 id=\"有效的括号\">有效的括号<a title=\"#有效的括号\" href=\"#有效的括号\"></a></h2>\n<p>使用栈</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] stack=<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        stack[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c=s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> top_c=stack[top];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isImg(top_c,c))&#123;</span><br><span class=\"line\">                top--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                stack[++top]=c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">isImg</span><span class=\"params\">(<span class=\"keyword\">char</span> top_c,<span class=\"keyword\">char</span> c2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]s)</span></span>&#123;</span><br><span class=\"line\">        String str=<span class=\"keyword\">new</span> String(<span class=\"string\">&quotquot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().isValid(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我觉得我自己实现的栈的运行效率不会太低, 不过还是挺慢的<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597056807550-fa85b1d6-2cb6-49a1-92b4-35b342362965.png#align=left&amp;display=inline&amp;height=204&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=408&amp;originWidth=1080&amp;size=34676&amp;status=done&amp;style=none&amp;width=540\" alt=\"image.png\"><br>\n时间复杂度和空间复杂度都是 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"><br>\n优化思路:</p>\n<ul>\n<li>判断字符串长度是否为偶数</li>\n<li>遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号 return false</li>\n<li>栈不为空, 同时栈栈顶和该字符不是匹配的, 而且该字符是右边部分 return false</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span>[] stack=<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[<span class=\"number\">10000</span>];</span><br><span class=\"line\">        stack[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;#&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=s.length();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c=s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">char</span> top_c=stack[top];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isImg(top_c,c))&#123;</span><br><span class=\"line\">                top--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!isImg(top_c,c)&amp;&amp;c!=<span class=\"string\">&#x27;(&#x27;</span>&amp;&amp;c!=<span class=\"string\">&#x27;&#123;&#x27;</span>&amp;&amp;c!=<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;[&#x27;</span>||c==<span class=\"string\">&#x27;(&#x27;</span>||c==<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">                stack[++top]=c;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(top==<span class=\"number\">0</span>&amp;&amp;c!=<span class=\"string\">&#x27;(&#x27;</span>&amp;&amp;c!=<span class=\"string\">&#x27;&#123;&#x27;</span>&amp;&amp;c!=<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boolean <span class=\"title\">isImg</span><span class=\"params\">(<span class=\"keyword\">char</span> top_c,<span class=\"keyword\">char</span> c2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;]&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top_c==<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c2==<span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[]s)</span></span>&#123;</span><br><span class=\"line\">        String str=<span class=\"keyword\">new</span> String(<span class=\"string\">&quotquot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().isValid(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过优化了相当于没有优化<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597058157314-f7cbbcf7-6304-468a-b454-ff233fc67feb.png#align=left&amp;display=inline&amp;height=198&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=395&amp;originWidth=1078&amp;size=34246&amp;status=done&amp;style=none&amp;width=539\" alt=\"image.png\"><br>\n另外一种更好的优化思路:<br>\n遍历字符串中的字符</p>\n<ol>\n<li>如果是左括号就入栈他**对应的右括号 **</li>\n<li>如果在遍历过程中栈就为空了就 <code>return false</code></li>\n<li>如果是右括号, 与栈顶相同就 pop 栈顶, 不相同就 <code>return false</code></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValid</span><span class=\"params\">(String s)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(s.isEmpty())</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       Stack&lt;Character&gt; stack=<span class=\"keyword\">new</span> Stack&lt;Character&gt;();</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">char</span> c:s.toCharArray())&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">               stack.push(<span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;&#123;&#x27;</span>)</span><br><span class=\"line\">               stack.push(<span class=\"string\">&#x27;&#125;&#x27;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(c==<span class=\"string\">&#x27;[&#x27;</span>)</span><br><span class=\"line\">               stack.push(<span class=\"string\">&#x27;]&#x27;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(stack.empty()||c!=stack.pop())</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(stack.empty())</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597058728510-0bbdddc4-42ee-404a-bf4d-929a5890cf3f.png#align=left&amp;display=inline&amp;height=193&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=386&amp;originWidth=1079&amp;size=34941&amp;status=done&amp;style=none&amp;width=539.5\" alt=\"image.png\" class=\"φcx\"></p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/lvkhi9/\">洛谷【搜索】暴力专项训练</a></li><li><a href=\"https://mvbbb.github.io/ehshi7/\">八皇后问题</a></li><li><a href=\"https://mvbbb.github.io/nftmte/\">位运算</a></li><li><a href=\"https://mvbbb.github.io/wu5oin/\">kuangbin 题单</a></li><li><a href=\"http://www.b5mang.com/pt_offer/sub_array_sum_max.html\">动态规划系列-子数组最大和</a></li></ul></div>","prev":{"title":"力扣-二叉树","link":"zhme42"},"plink":"https://mvbbb.github.io/gggq6t/","toc":[{"id":"数组","title":"数组","index":"1","children":[{"id":"删除排序数组中的重复项","title":"删除排序数组中的重复项","index":"1.1"},{"id":"买卖股票的最佳时机-ⅱ","title":"买卖股票的最佳时机 Ⅱ","index":"1.2","children":[{"id":"暴力","title":"暴力","index":"1.2.1"}]},{"id":"旋转数组","title":"旋转数组","index":"1.3","children":[{"id":"解法一:-朴素解法","title":"解法一: 朴素解法","index":"1.3.1"},{"id":"解法二:-使用环状替换","title":"解法二: 使用环状替换","index":"1.3.2"},{"id":"解法三:-使用反转","title":"解法三: 使用反转","index":"1.3.3"}]},{"id":"存在重复元素","title":"存在重复元素","index":"1.4"},{"id":"只出现一次的数字","title":"只出现一次的数字","index":"1.5"},{"id":"两个数组的交集-ⅱ","title":"两个数组的交集 Ⅱ","index":"1.6"},{"id":"加一","title":"加一","index":"1.7"},{"id":"移动零","title":"移动零","index":"1.8"},{"id":"两数之和","title":"两数之和","index":"1.9"},{"id":"有效的数独","title":"有效的数独","index":"1.10"},{"id":"旋转图像","title":"旋转图像","index":"1.11"}]},{"id":"字符串","title":"字符串","index":"2","children":[{"id":"反转字符串","title":"反转字符串","index":"2.1"},{"id":"整数反转","title":"整数反转","index":"2.2"},{"id":"字符串中第一个唯一字符","title":"字符串中第一个唯一字符","index":"2.3"},{"id":"有效的字母异位词","title":"有效的字母异位词","index":"2.4"},{"id":"验证回文串","title":"验证回文串","index":"2.5"},{"id":"字符串转换整数-(atoi)","title":"字符串转换整数 (atoi)","index":"2.6","children":[{"id":"解法一-朴素解法","title":"解法一 朴素解法","index":"2.6.1"},{"id":"解法二-自动机","title":"解法二 自动机","index":"2.6.2"}]},{"id":"实现-strstr()","title":"实现 strStr()","index":"2.7","children":[{"id":"双指针解法","title":"双指针解法","index":"2.7.1"},{"id":"kmp-算法","title":"KMP 算法","index":"2.7.2"}]},{"id":"最长公共前缀","title":"最长公共前缀","index":"2.8","children":[{"id":"方法一-常规思路","title":"方法一 常规思路","index":"2.8.1"},{"id":"方法二-先排序-比较头尾","title":"方法二 先排序 比较头尾","index":"2.8.2"},{"id":"方法三-水平扫描法","title":"方法三 水平扫描法","index":"2.8.3"},{"id":"方法四-二分分治法","title":"方法四 二分分治法","index":"2.8.4"},{"id":"方法五-二分查找","title":"方法五 二分查找","index":"2.8.5"}]}]},{"id":"链表","title":"链表","index":"3","children":[{"id":"删除链表中的节点","title":"删除链表中的节点","index":"3.1"},{"id":"删除链表的倒数第-n-个节点","title":"删除链表的倒数第 N 个节点","index":"3.2","children":[{"id":"方法一-使用额外的空间来存储节点","title":"方法一 使用额外的空间来存储节点","index":"3.2.1"},{"id":"方法二-两次遍历","title":"方法二 两次遍历","index":"3.2.2"},{"id":"方法三-使用快慢指针一次遍历","title":"方法三 使用快慢指针一次遍历","index":"3.2.3"},{"id":"方法四-递归","title":"方法四 递归","index":"3.2.4"}]},{"id":"反转链表","title":"反转链表","index":"3.3","children":[{"id":"迭代","title":"迭代","index":"3.3.1"},{"id":"递归","title":"递归","index":"3.3.2"}]}]},{"id":"合并两个有序链表","title":"合并两个有序链表","index":"4","children":[{"id":"使用指针","title":"使用指针","index":"4.1"},{"id":"递归-1","title":"递归","index":"4.2"},{"id":"回文链表","title":"回文链表","index":"4.3"}]},{"id":"树","title":"树","index":"5","children":[{"id":"二叉树的最大深度","title":"二叉树的最大深度","index":"5.1"},{"id":"验证二叉搜索树","title":"验证二叉搜索树","index":"5.2"},{"id":"二叉树的层序遍历","title":"二叉树的层序遍历","index":"5.3"},{"id":"将有序数组转换为二叉搜索树","title":"将有序数组转换为二叉搜索树","index":"5.4"}]},{"id":"排序和搜索","title":"排序和搜索","index":"6","children":[{"id":"合并两个有序的数组","title":"合并两个有序的数组","index":"6.1"}]},{"id":"动态规划","title":"动态规划","index":"7"},{"id":"其他","title":"其他","index":"8","children":[{"id":"有效的括号","title":"有效的括号","index":"8.1"}]},{"id":"推荐文章","title":"推荐文章","index":"9"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/gggq6t/\" title=\"Leetbook 初级算法\">https://mvbbb.github.io/gggq6t/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}