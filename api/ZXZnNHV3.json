{"title":"力扣-动态规划","date":"2020-08-15T01:37:22.000Z","date_formatted":{"ll":"Aug 15, 2020","L":"08/15/2020","MM-DD":"08-15"},"link":"evg4uw","comments":true,"tags":["动态规划"],"categories":["动态规划","数据结构与算法"],"updated":"2021-02-03T04:21:00.813Z","content":"<p>终于算是迈入动态规划的学习了, 希望别被打击信心<br>\n完美主义是使人停滞不前的主要原因. 不要总想着准备好了才开始做. 🌞<br>\n<a href=\"https://leetcode-cn.com/problemset/all/?topicSlugs=dynamic-programming\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problemset/all/?topicSlugs=dynamic-programming</a></p>\n<a id=\"more\"></a>\n<h1 id=\"爬楼梯问题\">爬楼梯问题<a title=\"#爬楼梯问题\" href=\"#爬楼梯问题\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/climbing-stairs/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/climbing-stairs/</a></p>\n</blockquote>\n<p>好像在学离散数学的时候碰到过这道题</p>\n<h2 id=\"暴力搜索,-回溯法\">暴力搜索, 回溯法<a title=\"#暴力搜索,-回溯法\" href=\"#暴力搜索,-回溯法\"></a></h2>\n<ol>\n<li>当前可以走一步, 回溯法求剩下 n-1 阶的走法</li>\n<li>当前可以走两步, 回溯法求上下 n-2 阶的走法</li>\n</ol>\n<p>结果是 1+2 的方法总数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">1</span>||n==<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> climbStairs(n-<span class=\"number\">1</span>)+climbStairs(n-<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>超时, 重复计算太多, 重复计算可以联想到斐波那契数列</p>\n<h2 id=\"动态规划\">动态规划<a title=\"#动态规划\" href=\"#动态规划\"></a></h2>\n<p><strong>解题</strong><br>\n到达楼梯的第 i 阶有多少种爬法, 与第几阶的爬法直接相关, 如何递推的求出第 i 阶楼梯的爬法 ?<br>\n第 i 阶爬法的数量 = 第 i-1 阶爬法的数量 + 第 i-2 阶爬法的数量<br>\n<img src=\"https://cdn.nlark.com/yuque/__latex/cc8d1bdda3b967b50f8c33d198a022c2.svg#card=math&amp;code=f%28x%29%3Df%28x-1%29%2Bf%28x-2%29&amp;height=20&amp;width=197\" alt=\"\"><br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597456447078-13a971a5-48a1-4671-9772-4c37eb853350.png#align=left&amp;display=inline&amp;height=93&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=215&amp;originWidth=1331&amp;size=350033&amp;status=done&amp;style=none&amp;width=574\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">climbStairs</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// p是 i-2 , q是 i-1, r是当前</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>,q=<span class=\"number\">0</span>,r=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            p=q;</span><br><span class=\"line\">            q=r;</span><br><span class=\"line\">            r=p+q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>总结</strong></p>\n<ol>\n<li><strong>确定原问题和子问题</strong><br>\n原问题是求 n 阶台阶的走法, 子问题是求 1 阶, 2 阶, 3 阶… n 阶台阶的走法</li>\n<li><strong>确定状态</strong><br>\n本题的动态规划状态单一, 第 i 个状态即为 i 阶台阶的走法数量</li>\n<li><strong>确定边界状态的值</strong><br>\n边界状态为 1 阶与 2 阶台阶的走法, 1 阶有一种走法, 2 阶有 2 种走法.<img src=\"https://cdn.nlark.com/yuque/__latex/780271b90e5c1ecea2d221568ee9281d.svg#card=math&amp;code=dp%5B1%5D%3D1%2C%20dp%5B2%5D%3D2&amp;height=20&amp;width=139\" alt=\"\"></li>\n<li><strong>确定状态转移方程</strong><br>\n将求第 i 个状态的值转换为求 i-1 和 i-2 状态的值, 动态规划转移方程是  <img src=\"https://cdn.nlark.com/yuque/__latex/29d18a92ebf8297e93fe66ef56054fb9.svg#card=math&amp;code=dp%5Bi%5D%3Ddp%5Bi-1%5D%2Bdp%5Bi-2%5D%2C%20i%3E%3D3&amp;height=20&amp;width=255\" alt=\"\"></li>\n</ol>\n<h1 id=\"打家劫舍\">打家劫舍<a title=\"#打家劫舍\" href=\"#打家劫舍\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/house-robber/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/house-robber/</a></p>\n</blockquote>\n<h2 id=\"枚举\">枚举<a title=\"#枚举\" href=\"#枚举\"></a></h2>\n<p>在不触发警报的情况下选择总和最大的子集. 最多有 <img src=\"https://cdn.nlark.com/yuque/__latex/d1db0d9c696a8c056e7117dbbb4ef6db.svg#card=math&amp;code=2%5En&amp;height=16&amp;width=16\" alt=\"\">  种可能, 时间复杂度是 <img src=\"https://cdn.nlark.com/yuque/__latex/c7cf1b9b9c957554447d062a3d1ab89c.svg#card=math&amp;code=O%282%5En%29&amp;height=20&amp;width=43\" alt=\"\"></p>\n<h2 id=\"动态规划-1\">动态规划<a title=\"#动态规划-1\" href=\"#动态规划-1\"></a></h2>\n<h3 id=\"思路\">思路<a title=\"#思路\" href=\"#思路\"></a></h3>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597458308947-4e15cdfe-60ca-41fd-b1f5-b108ecbb4984.png#align=left&amp;display=inline&amp;height=329&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=657&amp;originWidth=1321&amp;size=733477&amp;status=done&amp;style=none&amp;width=660.5\" alt=\"image.png\"><br>\n一下两种情况去最大值</p>\n<ol>\n<li>不偷这间房, 前 i 的最优解是 <code>dp[i-1]</code></li>\n<li>偷这间房, 前 i 的最优解是 <code>dp[i-2]+nums[i]</code></li>\n</ol>\n<p>这两种情况下不会产生同时偷相邻两间房的情况</p>\n<h3 id=\"解答\">解答<a title=\"#解答\" href=\"#解答\"></a></h3>\n<h4 id=\"使用额外数组空间\">使用额外数组空间<a title=\"#使用额外数组空间\" href=\"#使用额外数组空间\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> N=nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;<span class=\"comment\">//没有房子</span></span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=nums[<span class=\"number\">0</span>];<span class=\"comment\">//只有一间房子</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=N;i++)&#123;</span><br><span class=\"line\">            dp[i]=Math.max(dp[i-<span class=\"number\">1</span>],nums[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度  <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"></p>\n<h4 id=\"使用滚动数组\">使用滚动数组<a title=\"#使用滚动数组\" href=\"#使用滚动数组\"></a></h4>\n<p>在求解第 i 个时, 我们只用到了 <img src=\"https://cdn.nlark.com/yuque/__latex/2bc2ba74b42c6a185478a0505d72736e.svg#card=math&amp;code=f%28x-1%29%2Cf%28x-2%29&amp;height=20&amp;width=129\" alt=\"\">  的结果, 使用两个遍历来保存值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rob</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prev = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> curr = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 每次循环，计算“偷到当前房子为止的最大金额”</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i : nums) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环开始时，curr 表示 dp[k-1]，prev 表示 dp[k-2]</span></span><br><span class=\"line\">        <span class=\"comment\">// dp[k] = max&#123; dp[k-1], dp[k-2] + i &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = Math.max(curr, prev + i);</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = temp;</span><br><span class=\"line\">        <span class=\"comment\">// 循环结束时，curr 表示 dp[k]，prev 表示 dp[k-1]</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最大子序和\">最大子序和<a title=\"#最大子序和\" href=\"#最大子序和\"></a></h1>\n<h2 id=\"动态规划-2\">动态规划<a title=\"#动态规划-2\" href=\"#动态规划-2\"></a></h2>\n<h3 id=\"思路-1\">思路<a title=\"#思路-1\" href=\"#思路-1\"></a></h3>\n<p>若像前两道题一样思考, 假如求出来了前 i-1 个数 (dp[i-1]) 和前 i 个数 (dp[i]) 的最大子序和, 根据第 i 个数, 我们是否可以推导出 dp[i] 与 dp[i-1] 之间的关系?<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597460106050-6421fb0b-5f09-4975-8da9-dcbee670ca82.png#align=left&amp;display=inline&amp;height=363&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=725&amp;originWidth=1330&amp;size=763953&amp;status=done&amp;style=none&amp;width=665\" alt=\"image.png\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597460403691-72114c66-90dd-4b77-8f9f-5b6aefe1986d.png#align=left&amp;display=inline&amp;height=384&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=767&amp;originWidth=1329&amp;size=743685&amp;status=done&amp;style=none&amp;width=664.5\" alt=\"image.png\"><br>\n针对与每一个数组中的数, 找到它的最大子序和, 之后返回数组中最大子序和最大</p>\n<h3 id=\"解答-1\">解答<a title=\"#解答-1\" href=\"#解答-1\"></a></h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxSub=dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=nums.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dp[i-<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                dp[i]=dp[i-<span class=\"number\">1</span>]+nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i]=nums[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dp[i]&gt;maxSub)</span><br><span class=\"line\">                maxSub=dp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxSub;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于我们在求 dp[i] 时只使用了 dp[i-1], 空间优化版</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pre=<span class=\"number\">0</span>,maxAns=nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i:nums)&#123;</span><br><span class=\"line\">            pre=Math.max(pre+i, i);</span><br><span class=\"line\">            maxAns=Math.max(maxAns, pre);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxAns;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"买卖股票的最佳时机\">买卖股票的最佳时机<a title=\"#买卖股票的最佳时机\" href=\"#买卖股票的最佳时机\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p>\n</blockquote>\n<h2 id=\"枚举-1\">枚举<a title=\"#枚举-1\" href=\"#枚举-1\"></a></h2>\n<p>对于每一个数组中的元素, 遍历它之后的元素, 算出对应的盈利额, 最后找出最大的盈利额</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> [] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[prices.length*prices.length/<span class=\"number\">2</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=prices.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;i)&#123;</span><br><span class=\"line\">                    arr[size++]=prices[j]-prices[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Arrays.sort(arr);</span><br><span class=\"line\">       <span class=\"comment\">// System.out.println(Arrays.toString(arr)+arr[arr.length-1]);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[arr.length-<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span>?arr[arr.length-<span class=\"number\">1</span>]:<span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不出意外,  超时了<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597542485180-6af5075f-98f1-4077-9522-041bea87cb81.png#align=left&amp;display=inline&amp;height=155&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=309&amp;originWidth=1570&amp;size=34161&amp;status=done&amp;style=none&amp;width=785\" alt=\"image.png\"><br>\n其实大可不必使用一个数组来存储枚举结果. 优化后的枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> res=Integer.MIN_VALUE;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=prices.length;i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=prices.length;j++)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(j&gt;i)&#123;</span><br><span class=\"line\">                   <span class=\"keyword\">int</span> temp=prices[j]-prices[i];</span><br><span class=\"line\">                   <span class=\"keyword\">if</span>(temp&gt;res)</span><br><span class=\"line\">                       res=temp;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597542787189-d65c1f30-7207-43b7-9390-c528629476b1.png#align=left&amp;display=inline&amp;height=253&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=346&amp;originWidth=708&amp;size=23928&amp;status=done&amp;style=none&amp;width=517\" alt=\"image.png\"><br>\ntoo slow 时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\"></p>\n<h2 id=\"一次遍历\">一次遍历<a title=\"#一次遍历\" href=\"#一次遍历\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597543209320-e4456d3a-a122-4c00-863c-cdb841b3cbd2.png#align=left&amp;display=inline&amp;height=340&amp;margin=%5Bobject%20Object%5D&amp;originHeight=340&amp;originWidth=578&amp;size=0&amp;status=done&amp;style=none&amp;width=578\" alt=\"\"><br>\n依次遍历数组, 用 min_value 记录目前为止的最小值, 对于 prices[i]-min_value 得到一个当前利润, 使用 max_profit 来记录当前利润的最大值. 如果 prices[i]-min_value&lt;0 , 更新 min_value. prices[i]-min_value&gt;max_profit, 更新 max_profit</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxProfit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] prices)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min_value=Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> max_profit=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=prices.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prices[i] &lt; min_value)</span><br><span class=\"line\">                min_value = prices[i];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prices[i] - min_value &gt; max_profit)</span><br><span class=\"line\">                max_profit = prices[i] - min_value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_profit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Solution().maxProfit(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"最小路径和\">最小路径和<a title=\"#最小路径和\" href=\"#最小路径和\"></a></h1>\n<p><strong>状态的设置:</strong> dp[i][j] 代表从 (i,j)-&gt;(m-1,n-1) 的最小路径和<br>\n<strong>状态转移方程:</strong> 考虑如何求出 dp[i][j]</p>\n<ol>\n<li>(i-1,j)-&gt;(i,j) dp[i][j] 的前继状态 dp[i-1][j]</li>\n<li>(i,j-1)-&gt;(i,j) dp[i][j] 的前继状态 dp[i][j-1]</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/__latex/41182ecedbea2c298810c6769ee0ccfc.svg#card=math&amp;code=dp%28i%2Cj%29%3Dgrid%28i%2Cj%29%2Bmin%28dp%28i-1%2Cj%29%2Cdp%28i%2Cj-1%29%29&amp;height=20&amp;width=367\" alt=\"\"><br>\n需要更新数组的值为到左上角的最短路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minPathSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid==<span class=\"keyword\">null</span>||grid.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rows=grid.length,columns=grid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> [][]dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[rows][columns];</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"comment\">//先解决数组第一列</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] + grid[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//解决数组第一行</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; columns; j++) &#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j - <span class=\"number\">1</span>] + grid[<span class=\"number\">0</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=rows;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j!=columns;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=Math.min(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>])+grid[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[rows-<span class=\"number\">1</span>][columns-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度与空间复杂度为 <img src=\"https://cdn.nlark.com/yuque/__latex/f168ecb8ea82616ea66627b6dcc574fc.svg#card=math&amp;code=O%28nm%29&amp;height=20&amp;width=50\" alt=\"\"></p>\n<h1 id=\"不同路径\">不同路径<a title=\"#不同路径\" href=\"#不同路径\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/unique-paths/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/unique-paths/</a></p>\n</blockquote>\n<p>这不就是排列组合吗, 并且类似于上一道题<br>\n我的思路: 建立一个 dp 数组, 到达 dp[i][j] 的路径数是 dp[i-1][j]+dp[i][j-1], 初始条件是 dp[0][0]=1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m][n];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m==<span class=\"number\">0</span>||n==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=m;i++)&#123;</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=n;j++)&#123;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j!=n;j++)&#123;</span><br><span class=\"line\">                dp[i][j]=dp[i-<span class=\"number\">1</span>][j]+dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597582718939-bb3d64e5-71dc-4c84-a4a3-4f2d34ba2f96.png#align=left&amp;display=inline&amp;height=179&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=358&amp;originWidth=734&amp;size=24096&amp;status=done&amp;style=none&amp;width=367\" alt=\"image.png\"><br>\n第一次自己过 dp ,感动<br>\n时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/0ca5e4e27ca8dc4c891d2c8598529ed1.svg#card=math&amp;code=O%28mn%29&amp;height=20&amp;width=50\" alt=\"\">  空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/0ca5e4e27ca8dc4c891d2c8598529ed1.svg#card=math&amp;code=O%28mn%29&amp;height=20&amp;width=33\" alt=\"\"><br>\n尝试空间复杂度 思路: dp 中的每一个数的值是左边和上边的和, 假如尝试使用一维数组, 先全部初始化为 1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePaths</span><span class=\"params\">(<span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] cur = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\">        Arrays.fill(cur,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++)&#123;</span><br><span class=\"line\">                cur[j] += cur[j-<span class=\"number\">1</span>] ;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur[n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一次只记一行，当换行的时候数组里存放的是第 i-1 行的数据. 遍历每一行的时候, 某个位置的值的左边是更新之后的值, 但是该位置的值是上一行的数据, +=得到该位置更新后的数据.</p>\n<h1 id=\"判断子序列\">判断子序列<a title=\"#判断子序列\" href=\"#判断子序列\"></a></h1>\n<p>注意, 不是判断子串</p>\n<blockquote>\n<p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，&quot;ace&quot;是&quot;abcde&quot;的一个子序列，而&quot;aec&quot;不是）。</p>\n</blockquote>\n<h2 id=\"双指针\">双指针<a title=\"#双指针\" href=\"#双指针\"></a></h2>\n<p>p1 遍历 s, p2 遍历 t</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubsequence</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p1=<span class=\"number\">0</span>,p2=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;p1!=s.length();p1++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> c=s.charAt(p1);</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(p2&lt;t.length()&amp;&amp; t.charAt(p2)!=c)</span><br><span class=\"line\">                p2++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p2&gt;=t.length())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            p2++;<span class=\"comment\">//记得跳过查找到的字符</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().isSubsequence(<span class=\"string\">&quot;aaaaaa&quot;</span>, <span class=\"string\">&quot;bbaaaa&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597585527617-6ad4bbfe-d69b-4260-8c40-6cc82bc503a3.png#align=left&amp;display=inline&amp;height=274&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=355&amp;originWidth=725&amp;size=24300&amp;status=done&amp;style=none&amp;width=560\" alt=\"image.png\"><br>\n更加简洁的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubsequence</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), m = t.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i) == t.charAt(j)) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i == n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态规划-3\">动态规划<a title=\"#动态规划-3\" href=\"#动态规划-3\"></a></h2>\n<p>大多数时间花在根据指定字符之后在 t 里面去查找的过程中. 我们可以预处理出对于 tt 的每一个位置，从该位置开始往后每一个字符第一次出现的位置。(<a href=\"https://leetcode-cn.com/problems/is-subsequence/solution/pan-duan-zi-xu-lie-by-leetcode-solution/\" target=\"_blank\" rel=\"external nofollow noopener\">力扣题解</a>) 令  f[i][j] 表示字符串  t  中从位置  i  开始往后字符  j 第一次出现的位置。f[位置 i][字符j]= i 之后字符 j 第一次出现的位置<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597588734287-ba1e2e33-be17-483b-b0b3-d5fd71b1cd85.png#align=left&amp;display=inline&amp;height=321&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=449&amp;originWidth=1045&amp;size=79112&amp;status=done&amp;style=none&amp;width=746\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSubsequence</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = s.length(), m = t.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m + <span class=\"number\">1</span>][<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">            f[m][i] = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = m - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">26</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (t.charAt(i) == j + <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">                    f[i][j] = i;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    f[i][j] = f[i + <span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> add = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f[add][s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>] == m) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            add = f[add][s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().isSubsequence(<span class=\"string\">&quot;aaaaaa&quot;</span>, <span class=\"string\">&quot;bbaaaa&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三角形最小路径和\">三角形最小路径和<a title=\"#三角形最小路径和\" href=\"#三角形最小路径和\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/triangle/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/triangle/</a></p>\n</blockquote>\n<p>注意, 这道题的最短路径不是每次选择子节点的最小值, 步步最优不一定全局最优</p>\n<h2 id=\"递归\">递归<a title=\"#递归\" href=\"#递归\"></a></h2>\n<p>类似于求二叉树的最短路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  dfs(triangle, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == triangle.size()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.min(dfs(triangle, i + <span class=\"number\">1</span>, j), dfs(triangle, i + <span class=\"number\">1</span>, j + <span class=\"number\">1</span>)) + triangle.get(i).get(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>dfs 的任务, 得到根节点的值, 递归地得到子节点的最小值</p>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/triangle/solution/di-gui-ji-yi-hua-dp-bi-xu-miao-dong-by-sweetiee/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/triangle/solution/di-gui-ji-yi-hua-dp-bi-xu-miao-dong-by-sweetiee/</a></p>\n</blockquote>\n<p>写得还是不够熟练</p>\n<h2 id=\"递归+记忆化\">递归+记忆化<a title=\"#递归+记忆化\" href=\"#递归+记忆化\"></a></h2>\n<p>使用二维数组来存储计算过后的值, 避免重复计算. 类似于斐波那契数列的优化方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Integer[][] memo;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.memo=<span class=\"keyword\">new</span> Integer[triangle.size()][triangle.size()]    ;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(triangle,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==triangle.size())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(memo[i][j]!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[i][j];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.min(dfs(triangle,i+<span class=\"number\">1</span>,j),dfs(triangle,i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>))+triangle.get(i).get(j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度和空间复杂度都是 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\"></p>\n<h2 id=\"动态规划-4\">动态规划<a title=\"#动态规划-4\" href=\"#动态规划-4\"></a></h2>\n<p>定义二维 dp 数组，将解法二中「自顶向下的递归」改为「自底向上的递推」。</p>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/triangle/solution/di-gui-ji-yi-hua-dp-bi-xu-miao-dong-by-sweetiee/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/triangle/solution/di-gui-ji-yi-hua-dp-bi-xu-miao-dong-by-sweetiee/</a></p>\n</blockquote>\n<p>怎么说呢, 这有点像递归的 for 循环迭代版 😄<br>\n<code>dp[i][j]</code>  表示从点 (i, j) 到底边的最小路径和。<br>\n状态转移方程: <img src=\"https://cdn.nlark.com/yuque/__latex/feaf3a19bd550884134e39ee3c5fb983.svg#card=math&amp;code=dp%5Bi%5D%5Bj%5D%3Dmin%28dp%5Bi%2B1%5D%5Bj%5D%2Cdp%5Bi%2B1%5D%5Bj%2B1%5D%29%2Btriangle%5Bi%5D%5Bj%5D&amp;height=20&amp;width=418\" alt=\"\"> <br>\n边界条件  <strong>多定义一行一列（默认初始值 0），就不用判断边界了，动态规划常用方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minPath=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height=triangle.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[height+<span class=\"number\">1</span>][height+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=height-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=triangle.get(i).size();j++)&#123;</span><br><span class=\"line\">                dp[i][j] = Math.min(dp[i+<span class=\"number\">1</span>][j],dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>])+triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度和空间复杂度都是 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\"></p>\n<h2 id=\"动态规划空间优化\">动态规划空间优化<a title=\"#动态规划空间优化\" href=\"#动态规划空间优化\"></a></h2>\n<p>优化思路类似于 “不同路径” 的优化思路<br>\n定义一维数组<br>\n在一轮遍历中使用 dp 方程时, 我们只是用到了数组中的一行数据. 执行 i 次遍历时, 数组中保存的是 i+1 行遍历时的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumTotal</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height=triangle.size();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[height+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=height-<span class=\"number\">1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=triangle.get(i).size();j++)&#123;</span><br><span class=\"line\">                dp[j] = Math.min(dp[j], dp[j + <span class=\"number\">1</span>]) + triangle.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\">  空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"></p>\n<h1 id=\"不同路径-ⅱ\">不同路径 Ⅱ<a title=\"#不同路径-ⅱ\" href=\"#不同路径-ⅱ\"></a></h1>\n<h2 id=\"动态规划-5\">动态规划<a title=\"#动态规划-5\" href=\"#动态规划-5\"></a></h2>\n<p>dp[i][j] 定义为 (0,0) 到 (i,j) 的路径数目<br>\n<strong>边界条件:</strong> dp[0][0]=1, dp[i][0]=1 , i 为 1 出现的前面的位置. dp[i][0]=0 ,i 为 1 出现及其后面的位置, dp[0][j] 同理<br>\n<strong>状态转移方程:</strong> <img src=\"https://cdn.nlark.com/yuque/__latex/bda7b442bc2193f8f3ab5f690f61834d.svg#card=math&amp;code=dp%5Bi%5D%5Bj%5D%3Ddp%5Bi-1%5D%5Bj%5D%2Bdp%5Bi%5D%5Bj-1%5D.%20obstacleGrid%5Bi%5D%5Bj%5D%21%3D0&amp;height=20&amp;width=415\" alt=\"\">, 假如 <img src=\"https://cdn.nlark.com/yuque/__latex/04b6bd351a75bcbd971c0690e8c02480.svg#card=math&amp;code=%20obstacleGrid%5Bi%5D%5Bj%5D%3D%3D0&amp;height=20&amp;width=168\" alt=\"\">, 证明该位置存在障碍物, <img src=\"https://cdn.nlark.com/yuque/__latex/03fb69462891cac662c8138d1fb2b0ca.svg#card=math&amp;code=dp%5Bi%5D%5Bj%5D%3D0&amp;height=20&amp;width=79\" alt=\"\">.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[obstacleGrid.length][obstacleGrid[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=dp.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=dp[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=m&amp;&amp;obstacleGrid[i][<span class=\"number\">0</span>]==<span class=\"number\">0</span>;i++)</span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j!=n&amp;&amp;obstacleGrid[<span class=\"number\">0</span>][j]==<span class=\"number\">0</span>;j++)</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j]=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i!=m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j!=n;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obstacleGrid[i][j]==<span class=\"number\">0</span>)</span><br><span class=\"line\">                    dp[i][j]=dp[i-<span class=\"number\">1</span>][j]+dp[i][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m-<span class=\"number\">1</span>][n-<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度和空间复杂度都是 <img src=\"https://cdn.nlark.com/yuque/__latex/f168ecb8ea82616ea66627b6dcc574fc.svg#card=math&amp;code=O%28nm%29&amp;height=20&amp;width=50\" alt=\"\"><br>\n我们还可以优化一下边界条件, 之前我们需要初始化 dp 数组的第一列和第一行, 更佳的方式是多给 dp 数组一行一列, 这是一种常用的优化方法.</p>\n<h2 id=\"动态规划空间优化-1\">动态规划空间优化<a title=\"#动态规划空间优化-1\" href=\"#动态规划空间优化-1\"></a></h2>\n<p>原理同 “不同路径-空间优化版”, 使用一位数组代替二维数组, 当开始遍历第 i 行时, 数组中存储的是 i-1 行的数据.<br>\n同样的, 有障碍的位置的路径数为 0.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">uniquePathsWithObstacles</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=obstacleGrid.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=obstacleGrid[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[]= <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>; <span class=\"comment\">//边界条件</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)&#123;</span><br><span class=\"line\">                dp[j] = obstacleGrid[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] == <span class=\"number\">1</span> ? <span class=\"number\">0</span> : dp[j] + dp[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>空间复杂度是 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\">, n 是列数</p>\n<h1 id=\"*零钱兑换\">*零钱兑换<a title=\"#*零钱兑换\" href=\"#*零钱兑换\"></a></h1>\n<p>不是步步最优, 全局最优. 假如存在币值 1,5,7, 贪心算法会失效.</p>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/coin-change/solution/javadi-gui-ji-yi-hua-sou-suo-dong-tai-gui-hua-by-s/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/coin-change/solution/javadi-gui-ji-yi-hua-sou-suo-dong-tai-gui-hua-by-s/</a></p>\n</blockquote>\n<h2 id=\"暴力递归\">暴力递归<a title=\"#暴力递归\" href=\"#暴力递归\"></a></h2>\n<p>考虑组成 amount 的硬币组合的最后一个硬币<br>\n<img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597708687684-dc9e6a14-81c5-49da-af29-6ac1c1ec7ee1.png#align=left&amp;display=inline&amp;height=108&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=170&amp;originWidth=1047&amp;size=35088&amp;status=done&amp;style=none&amp;width=668\" alt=\"image.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coins.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=helper(coins,amount,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res==Integer.MAX_VALUE?-<span class=\"number\">1</span>:res;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(<span class=\"keyword\">int</span> [] coins,<span class=\"keyword\">int</span> amount,<span class=\"keyword\">int</span> count)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amount&lt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amount==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minCost=Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> lastCoin: coins)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cost=helper(coins,amount-lastCoin,count+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cost&lt;minCost)</span><br><span class=\"line\">                minCost=cost;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> minCost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"记忆化搜索\">记忆化搜索<a title=\"#记忆化搜索\" href=\"#记忆化搜索\"></a></h2>\n<p>解决递归中存在的重复计算问题. 使用备忘录 <code>memo</code> <br>\n<code>memo[n]</code>  表示 <code>amount=n</code>  时需要的最小硬币数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] memo;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(coins.length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> findWay(coins,amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// findWay函数的目的是为了找到 amount数量的零钱可以兑换的最少硬币数量，返回其值int</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findWay</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins,<span class=\"keyword\">int</span> amount)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amount &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(amount == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(memo[amount] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> min = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> coin:coins)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> res = findWay(coins,amount-coin);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res &gt;= <span class=\"number\">0</span> &amp;&amp; res &lt; min)&#123;</span><br><span class=\"line\">                min = res + <span class=\"number\">1</span>; <span class=\"comment\">// 加1，是为了加上得到res结果的那个步骤中，兑换的一个硬币</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[amount] = (min == Integer.MAX_VALUE ? -<span class=\"number\">1</span> : min);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> memo[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().coinChange(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>&#125;, <span class=\"number\">100</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态规划:-自顶向下\">动态规划: 自顶向下<a title=\"#动态规划:-自顶向下\" href=\"#动态规划:-自顶向下\"></a></h2>\n<p><code>dp[i]=x, amout=i</code>  时需要的最小硬币数是 x<br>\n思想类似与递归问题的翻转, 我们递归之前是取出一个硬币, 之后求组成剩余 amount 的最小值. 转换思路, 从币值为 1 开始, 逐渐递增得到额定 amount 的最小值. 币值逐渐递增的过程中存在一个状态转移方程<br>\n边界条件: dp[0]=0<br>\n状态转移方程: <img src=\"https://cdn.nlark.com/yuque/__latex/483df81f7b161c6a50b96631b43bbc7f.svg#card=math&amp;code=dp%5Bi%5D%3Dmin%28dp%5Bi-coin%5D%2B1%2Cdp%5Bi%5D%29&amp;height=20&amp;width=251\" alt=\"\">, 其中 coin 为 coins 中的某一个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">coinChange</span><span class=\"params\">(<span class=\"keyword\">int</span>[] coins, <span class=\"keyword\">int</span> amount)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[amount+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=amount; i++) &#123;</span><br><span class=\"line\">            dp[i] = i == <span class=\"number\">0</span> ? <span class=\"number\">0</span> : amount+<span class=\"number\">1</span>; <span class=\"comment\">//amount+1为不可能的值. dp[0]=0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> coin : coins) &#123;<span class=\"comment\">//不同币值的都来试一试, 凑出来</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>( i -coin &gt;=<span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">                    dp[i] = Math.min(dp[i-coin] + <span class=\"number\">1</span>, dp[i]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[amount] == amount+<span class=\"number\">1</span> ? -<span class=\"number\">1</span> : dp[amount];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/cbca8bfe2c1911464998488ef573dd79.svg#card=math&amp;code=O%28sn%29&amp;height=20&amp;width=44\" alt=\"\"> s 是金额, n 是币值数<br>\n空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/fe8f9699f6c3f24874816ca411ac2407.svg#card=math&amp;code=O%28s%29&amp;height=20&amp;width=33\" alt=\"\">  为 dp 数组空间</p>\n<h2 id=\"贪心+dfs\">贪心+DFS<a title=\"#贪心+dfs\" href=\"#贪心+dfs\"></a></h2>\n<h2 id=\"bfs\">BFS<a title=\"#bfs\" href=\"#bfs\"></a></h2>\n<h1 id=\"最长公共子序列\">最长公共子序列<a title=\"#最长公共子序列\" href=\"#最长公共子序列\"></a></h1>\n<h2 id=\"自底向上- -动态规划\">自底向上   动态规划<a title=\"#自底向上- -动态规划\" href=\"#自底向上- -动态规划\"></a></h2>\n<p><a href=\"https://www.yzh.im/%E9%97%AB%E6%B0%8FDP%E5%88%86%E6%9E%90%E6%B3%95/#%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97\" target=\"_blank\" rel=\"external nofollow noopener\">最长公共子序列</a><br>\n<a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/solution/dong-tai-gui-hua-tu-wen-jie-xi-by-yijiaoqian/\" target=\"_blank\" rel=\"external nofollow noopener\">题解</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=text1.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=text2.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1.charAt(i-<span class=\"number\">1</span>)==text2.charAt(j-<span class=\"number\">1</span>))</span><br><span class=\"line\">                    dp[i][j]=dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    dp[i][j]=Math.max(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n][m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"*动态规划-空间优化\">*动态规划 空间优化<a title=\"#*动态规划-空间优化\" href=\"#*动态规划-空间优化\"></a></h2>\n<p><a href=\"https://leetcode-cn.com/problems/longest-common-subsequence/solution/dong-tai-gui-hua-tu-wen-jie-xi-by-yijiaoqian/\" target=\"_blank\" rel=\"external nofollow noopener\"><img src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/1552854/1597761665522-588d539e-8b2d-4afc-87a1-eefdb789a757.jpeg#align=left&amp;display=inline&amp;height=1080&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1080&amp;originWidth=1920&amp;size=0&amp;status=done&amp;style=none&amp;width=1920\" alt=\"\"></a><br>\n使用一维数组进行空间优化, 每次使用了 (i,j) 的左上方, 左边, 右边<br>\n使用一维数组时, 遍历第 i 行时, 数组存储的是 i-1 行的数据, 遍历到第 j 个时, 前 j-1 个存储的是使用二维数组时 dp[i][j-1] 的数据 (左边) . 一维数组本身 dp[j] 存储的是原来二维数组 dp[i-1,j] 的数据(上边). 但是左上方的数据被覆盖了, 因此, 我们需要额外使用一个变量来存储左上角的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=text1.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=text2.length();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dp[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[m+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> last=<span class=\"number\">0</span>;<span class=\"comment\">//保存相对于下次遍历的 (i-1,j-1) 的数(左上角)</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)&#123;</span><br><span class=\"line\">                temp=dp[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(text1.charAt(i-<span class=\"number\">1</span>)==text2.charAt(j-<span class=\"number\">1</span>))&#123;</span><br><span class=\"line\">                    dp[j]=last+<span class=\"number\">1</span>;<span class=\"comment\">//左上角</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">                    dp[j]=Math.max(dp[j],dp[j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">                last=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[m];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"递归-1\">递归<a title=\"#递归-1\" href=\"#递归-1\"></a></h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597758136031-e969c3c2-f909-434a-9eb5-3a912f2ba043.png#align=left&amp;display=inline&amp;height=170&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=339&amp;originWidth=1559&amp;size=32469&amp;status=done&amp;style=none&amp;width=779.5\" alt=\"image.png\" class=\"φcx\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  helper(text1,<span class=\"number\">0</span>,text2,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(String text1,<span class=\"keyword\">int</span> i,String text2,<span class=\"keyword\">int</span> j,<span class=\"keyword\">int</span> res)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==text1.length()||j==text2.length())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(text1.charAt(i)==text2.charAt(j))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> helper(text1,i+<span class=\"number\">1</span>,text2,j+<span class=\"number\">1</span>,res+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(helper(text1,i+<span class=\"number\">1</span>,text2,j,res),helper(text1,i,text2,j+<span class=\"number\">1</span>,res));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().longestCommonSubsequence(<span class=\"string\">&quot;abc&quot;</span>,<span class=\"string\">&quot;def&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"暴力搜索\">暴力搜索<a title=\"#暴力搜索\" href=\"#暴力搜索\"></a></h2>\n<p>使用备忘录的自顶向下的递归</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] memo;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">longestCommonSubsequence</span><span class=\"params\">(String text1, String text2)</span> </span>&#123;</span><br><span class=\"line\">          memo=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[text1.length()+<span class=\"number\">1</span>][text2.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">return</span>  helper(text1,<span class=\"number\">0</span>,text2,<span class=\"number\">0</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">(String text1,<span class=\"keyword\">int</span> i,String text2,<span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==text1.length()||j==text2.length())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(text1.charAt(i)==text2.charAt(j))&#123;</span><br><span class=\"line\">               memo[i][j]= <span class=\"number\">1</span>+helper(text1, i+<span class=\"number\">1</span>, text2, j+<span class=\"number\">1</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> memo[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l1=memo[i+<span class=\"number\">1</span>][j]==<span class=\"number\">0</span>? helper(text1, i+<span class=\"number\">1</span>, text2, j): memo[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l2=memo[i][j+<span class=\"number\">1</span>]==<span class=\"number\">0</span>? helper(text1, i, text2, j+<span class=\"number\">1</span>): memo[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                memo[i][j]=Math.max(l1, l2);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> memo[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">new</span> Solution().longestCommonSubsequence(<span class=\"string\">&quot;pmjghexybyrgzczy&quot;</span>,<span class=\"string\">&quot;hafcdqbgncrcbihkd&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1552854/1597761362166-11cdd791-74cc-4da2-82f3-23f8599661ca.png#align=left&amp;display=inline&amp;height=113&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=226&amp;originWidth=725&amp;size=19168&amp;status=done&amp;style=none&amp;width=362.5\" alt=\"image.png\" class=\"φcx\"></p>\n<h1 id=\"最长上升子序列\">最长上升子序列<a title=\"#最长上升子序列\" href=\"#最长上升子序列\"></a></h1>\n<p>注意: 是上升子序列, 不一定连续</p>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/dong-tai-gui-hua-she-ji-fang-fa-zhi-pai-you-xi-jia/\" target=\"_blank\" rel=\"external nofollow noopener\">题解</a></p>\n</blockquote>\n<h2 id=\"动态规划-6\">动态规划<a title=\"#动态规划-6\" href=\"#动态规划-6\"></a></h2>\n<p><strong>状态定义: <strong><code>dp[i]</code>  表示</strong>以 <code>nums[i]</code> 结尾</strong>的「上升子序列」的长度。注意：这个定义中  <strong><code>nums[i]</code> 必须被选取，且必须是这个子序列的最后一个元素</strong>。<br>\n**边界条件: **<code>dp[1]=1</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lengthOfLIS</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">    <span class=\"comment\">// base case：dp 数组全都初始化为 1</span></span><br><span class=\"line\">    Arrays.fill(dp, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我们这里不是要去数小于 nums[i] 的个数有多少个, 而是根据小于nums[i]对应的 LIS 来更新 nums[i]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; nums[j])</span><br><span class=\"line\">                dp[i] = Math.max(dp[i], dp[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class=\"line\">        res = Math.max(res, dp[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/9f84a66d88d24c3b1bc91df5b5346a13.svg#card=math&amp;code=O%28n%5E2%29&amp;height=23&amp;width=43\" alt=\"\">  空间复杂度 <img src=\"https://cdn.nlark.com/yuque/__latex/7ba55e7c64a9405a0b39a1107e90ca94.svg#card=math&amp;code=O%28n%29&amp;height=20&amp;width=36\" alt=\"\"></p>\n<h2 id=\"二分法\">二分法<a title=\"#二分法\" href=\"#二分法\"></a></h2>\n<p>见题解</p>\n<h1 id=\"不同的二叉搜索树\">不同的二叉搜索树<a title=\"#不同的二叉搜索树\" href=\"#不同的二叉搜索树\"></a></h1>\n<blockquote>\n<p><a href=\"https://leetcode-cn.com/problems/unique-binary-search-trees/solution/bu-tong-de-er-cha-sou-suo-shu-cong-yuan-shi-de-di-/\" target=\"_blank\" rel=\"external nofollow noopener\">https://leetcode-cn.com/problems/unique-binary-search-trees/solution/bu-tong-de-er-cha-sou-suo-shu-cong-yuan-shi-de-di-/</a></p>\n</blockquote>\n<h2 id=\"递归-2\">递归<a title=\"#递归-2\" href=\"#递归-2\"></a></h2>\n<p>选定一个节点 i 做为根节点, [1,i-1] 放在左子树, [i+1,n]放在右子树. 对左子树和右子树递归操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"title\">public</span> <span class=\"title\">int</span> <span class=\"title\">numTrees</span>(<span class=\"title\">int</span> <span class=\"title\">n</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            ans += numTrees(i - <span class=\"number\">1</span>) * numTrees(n - i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"备忘录+递归\">备忘录+递归<a title=\"#备忘录+递归\" href=\"#备忘录+递归\"></a></h2>\n<p>因为个数固定, 二叉搜索树的数量固定.<br>\n使用备忘录记录数量为 n 的二叉搜索树的个数</p>\n<h2 id=\"动态规划-7\">动态规划<a title=\"#动态规划-7\" href=\"#动态规划-7\"></a></h2>\n<p>递归的迭代版<br>\n条件转移: <img src=\"https://cdn.nlark.com/yuque/__latex/2c652e5ce94162117d249f96f693f769.svg#card=math&amp;code=dp%5Bi%5D%3D%5Csum_%7Bj%3D0%7D%5E%7Bi-1%7D%20dp%5Bj%5D%2Adp%5Bi-j-1%5D&amp;height=55&amp;width=220\" alt=\"\"><br>\ndp[i] 表示用 i 个节点构造出的二叉搜索树的方法总数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numTrees</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i - <span class=\"number\">1</span> ; j++) &#123;</span><br><span class=\"line\">                dp[i] += dp[j] * dp[i - j - <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"完全平方数\">完全平方数<a title=\"#完全平方数\" href=\"#完全平方数\"></a></h1>\n<p>类似于零钱兑换问题, 不同的是, 这里的 零钱兑换中 coins 数组是不变的, 这道题要变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numSquares</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//dp[i]=x; 组成整数i的完全平方数的个数为x</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i!=dp.length;i++)</span><br><span class=\"line\">            dp[i]=i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] table=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(<span class=\"keyword\">int</span>) (Math.sqrt(n) + <span class=\"number\">1</span>)];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;table.length;i++)&#123;</span><br><span class=\"line\">            table[i]= i*i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;= n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j!=table.length;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;=table[j])&#123;</span><br><span class=\"line\">                    dp[i]=Math.min(dp[i], dp[i-table[j]]+<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> x=<span class=\"keyword\">new</span> Solution().numSquares(<span class=\"number\">13</span>);</span><br><span class=\"line\">         System.out.println(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>时间复杂度<img src=\"https://cdn.nlark.com/yuque/__latex/c5055e726bd36a909897f5a4d0eed884.svg#card=math&amp;code=O%28n%2Asqrt%28n%29%29&amp;height=20&amp;width=104\" alt=\"\"><br>\n代码优化</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numSquares</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n + <span class=\"number\">1</span>]; <span class=\"comment\">// 默认初始化值都为0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            dp[i] = i; <span class=\"comment\">// 最坏的情况就是每次+1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; i - j * j &gt;= <span class=\"number\">0</span>; j++) &#123;</span><br><span class=\"line\">                dp[i] = Math.min(dp[i], dp[i - j * j] + <span class=\"number\">1</span>); <span class=\"comment\">// 动态转移方程</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/vf5dyb/\">D(la)P(ji)</a></li><li><a href=\"https://mvbbb.github.io/aa32vk/\">自顶向下与自底向上</a></li><li><a href=\"https://mvbbb.github.io/gggq6t/\">Leetbook 初级算法</a></li><li><a href=\"http://www.b5mang.com/pt_offer/sub_array_sum_max.html\">动态规划系列-子数组最大和</a></li></ul></div>","prev":{"title":"自顶向下与自底向上","link":"aa32vk"},"next":{"title":"排序算法","link":"iixrxk"},"plink":"https://mvbbb.github.io/evg4uw/","toc":[{"id":"爬楼梯问题","title":"爬楼梯问题","index":"1","children":[{"id":"暴力搜索,-回溯法","title":"暴力搜索, 回溯法","index":"1.1"},{"id":"动态规划","title":"动态规划","index":"1.2"}]},{"id":"打家劫舍","title":"打家劫舍","index":"2","children":[{"id":"枚举","title":"枚举","index":"2.1"},{"id":"动态规划-1","title":"动态规划","index":"2.2","children":[{"id":"思路","title":"思路","index":"2.2.1"},{"id":"解答","title":"解答","index":"2.2.2"}]}]},{"id":"最大子序和","title":"最大子序和","index":"3","children":[{"id":"动态规划-2","title":"动态规划","index":"3.1","children":[{"id":"思路-1","title":"思路","index":"3.1.1"},{"id":"解答-1","title":"解答","index":"3.1.2"}]}]},{"id":"买卖股票的最佳时机","title":"买卖股票的最佳时机","index":"4","children":[{"id":"枚举-1","title":"枚举","index":"4.1"},{"id":"一次遍历","title":"一次遍历","index":"4.2"}]},{"id":"最小路径和","title":"最小路径和","index":"5"},{"id":"不同路径","title":"不同路径","index":"6"},{"id":"判断子序列","title":"判断子序列","index":"7","children":[{"id":"双指针","title":"双指针","index":"7.1"},{"id":"动态规划-3","title":"动态规划","index":"7.2"}]},{"id":"三角形最小路径和","title":"三角形最小路径和","index":"8","children":[{"id":"递归","title":"递归","index":"8.1"},{"id":"递归+记忆化","title":"递归+记忆化","index":"8.2"},{"id":"动态规划-4","title":"动态规划","index":"8.3"},{"id":"动态规划空间优化","title":"动态规划空间优化","index":"8.4"}]},{"id":"不同路径-ⅱ","title":"不同路径 Ⅱ","index":"9","children":[{"id":"动态规划-5","title":"动态规划","index":"9.1"},{"id":"动态规划空间优化-1","title":"动态规划空间优化","index":"9.2"}]},{"id":"*零钱兑换","title":"*零钱兑换","index":"10","children":[{"id":"暴力递归","title":"暴力递归","index":"10.1"},{"id":"记忆化搜索","title":"记忆化搜索","index":"10.2"},{"id":"动态规划:-自顶向下","title":"动态规划: 自顶向下","index":"10.3"},{"id":"贪心+dfs","title":"贪心+DFS","index":"10.4"},{"id":"bfs","title":"BFS","index":"10.5"}]},{"id":"最长公共子序列","title":"最长公共子序列","index":"11","children":[{"id":"自底向上- -动态规划","title":"自底向上   动态规划","index":"11.1"},{"id":"*动态规划-空间优化","title":"*动态规划 空间优化","index":"11.2"},{"id":"递归-1","title":"递归","index":"11.3"},{"id":"暴力搜索","title":"暴力搜索","index":"11.4"}]},{"id":"最长上升子序列","title":"最长上升子序列","index":"12","children":[{"id":"动态规划-6","title":"动态规划","index":"12.1"},{"id":"二分法","title":"二分法","index":"12.2"}]},{"id":"不同的二叉搜索树","title":"不同的二叉搜索树","index":"13","children":[{"id":"递归-2","title":"递归","index":"13.1"},{"id":"备忘录+递归","title":"备忘录+递归","index":"13.2"},{"id":"动态规划-7","title":"动态规划","index":"13.3"}]},{"id":"完全平方数","title":"完全平方数","index":"14"},{"id":"推荐文章","title":"推荐文章","index":"15"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/evg4uw/\" title=\"力扣-动态规划\">https://mvbbb.github.io/evg4uw/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}