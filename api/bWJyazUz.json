{"title":"静态资源映射","date":"2021-01-20T09:00:44.000Z","date_formatted":{"ll":"Jan 20, 2021","L":"01/20/2021","MM-DD":"01-20"},"link":"mbrk53","comments":true,"tags":["SpringBoot"],"categories":["Java","Spring"],"updated":"2021-02-03T04:20:57.353Z","content":"<p><strong>前言：</strong><br>\nSpringBoot 默认将 <code>resources</code>  目录下的<code>/static,/public,/resources,/META-INF/resources</code>设置为静态资源路径</p>\n<p><strong>场景一: 所有的静态资源访问都通过一个特定的前缀, 以区分静态请求或者动态请求</strong></p>\n<a id=\"more\"></a>\n<p>配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br></pre></td></tr></table></figure>\n<p>效果: 原来存放在静态资源目录中的 <code>text.txt</code>  文件的访问链接由 <code>localhost/text.txt </code>  变成 <code>localhost/res/text.txt</code></p>\n<p><strong>场景二: 我想要使某个文件夹中的内容成为可以被访问的静态资源</strong><br>\n方法一:<br>\n配置:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">static-locations:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">classpath:/haha/</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">file:E:/JavaProject/mvc/files/</span></span><br></pre></td></tr></table></figure>\n<p>效果:</p>\n<ul>\n<li>可通过 <code>localhost/text2.txt</code>  访问位于 <code>E:\\JavaProject\\mvc\\files\\</code>  下的 <code>text2.txt</code>  文件</li>\n<li>可以通过 <code>localhost/text.txt</code>  访问位于 <code>resources\\haha\\</code>  下的 <code>text.txt</code>  文件</li>\n</ul>\n<p>方法二:<br>\n编写配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 描述：配置地址映射</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title\">WebMvcConfigurer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将以 /images/ 开头的请求映射到本地的 FILE_DIR 目录下</span></span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/images/**&quot;</span>).</span><br><span class=\"line\">                addResourceLocations(<span class=\"string\">&quot;file:&quot;</span>+ Constant.FILE_DIR);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>场景三: 我想要实现首页效果, 也就是访问地址默认显示 index.html, 但是地址栏里面没有 index.html</strong><br>\n做法: 直接将 index.html 放在静态资源路径下</p>\n<p><strong>场景四: 我想要显示网页图标</strong><br>\n做法: 直接将 favicon.ico 放在静态资源路径下</p>\n<div><h1 id=\"推荐文章\">推荐文章<a title=\"#推荐文章\" href=\"%e6%8e%a8%e8%8d%90%e6%96%87%e7%ab%a0\"></a></h1><ul><li><a href=\"https://mvbbb.github.io/iq1x0p/\">mybatis-generator-maven插件与lombok的引入</a></li></ul></div>","prev":{"title":"mybatis-generator-maven插件与lombok的引入","link":"iq1x0p"},"next":{"title":"【网络协议】TCP分段与IP分片","link":"olnngo"},"plink":"https://mvbbb.github.io/mbrk53/","toc":[{"id":"推荐文章","title":"推荐文章","index":"1"}],"copyright":{"author":"Mvbbb","link":"<a href=\"https://mvbbb.github.io/mbrk53/\" title=\"静态资源映射\">https://mvbbb.github.io/mbrk53/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}